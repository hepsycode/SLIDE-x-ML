// 
// Politecnico di Milano
// Code created using PandA - Version: PandA 0.9.6 - Revision 891ec3caed502474cab0813cc4a9fc678deabaa5 - Date 2022-05-26T13:43:07
// bambu executed with: bambu -I/home/dews/Scrivania/bambu-hls/RESULTS/BAMBU/28x28/fft/includes/values_54 --simulate --simulator=VERILATOR --clock-period=5 --experimental-setup=BAMBU-AREA --device-name=xc7a100t-1csg324-VVD /home/dews/Scrivania/bambu-hls/cc4cs_bambu/benchmarkBasic/fft/thrd.c 
// 
// Send any bug to: panda-info@polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_LGPLv3.
// They are all part of the BAMBU/PANDA IP LIBRARY.
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the PandA framework; see the files COPYING.LIB
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

`ifdef __ICARUS__
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VERILATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef MODEL_TECH
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VCS
  `define _SIM_HAVE_CLOG2
`endif
`ifdef NCVERILOG
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_SIMULATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_ISIM
  `define _SIM_HAVE_CLOG2
`endif

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module constant_value(out1);
  parameter BITSIZE_out1=1, value=1'b0;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = value;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module register_SE(clock, reset, in1, wenable, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  
  reg [BITSIZE_out1-1:0] reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock)
    if (wenable)
      reg_out1 <= in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ARRAY_1D_STD_BRAM_SDS_BUS_BASE(clock, reset, in1, in2, in3, sel_LOAD, sel_STORE, S_oe_ram, S_we_ram, S_addr_ram, S_Wdata_ram, Sin_Rdata_ram, S_data_ram_size, Sin_DataRdy, out1, Sout_Rdata_ram, Sout_DataRdy, proxy_in1, proxy_in2, proxy_in3, proxy_sel_LOAD, proxy_sel_STORE, proxy_out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1, BITSIZE_S_addr_ram=1, BITSIZE_S_Wdata_ram=8, BITSIZE_Sin_Rdata_ram=8, BITSIZE_Sout_Rdata_ram=8, BITSIZE_S_data_ram_size=1, MEMORY_INIT_file="array.mem", n_elements=1, data_size=32, address_space_begin=0, address_space_rangesize=4, BUS_PIPELINED=1, BRAM_BITSIZE=32, PRIVATE_MEMORY=0, USE_SPARSE_MEMORY=1, HIGH_LATENCY=0, BITSIZE_proxy_in1=1, BITSIZE_proxy_in2=1, BITSIZE_proxy_in3=1, BITSIZE_proxy_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input sel_LOAD;
  input sel_STORE;
  input S_oe_ram;
  input S_we_ram;
  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;
  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;
  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;
  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;
  input Sin_DataRdy;
  input [BITSIZE_proxy_in1-1:0] proxy_in1;
  input [BITSIZE_proxy_in2-1:0] proxy_in2;
  input [BITSIZE_proxy_in3-1:0] proxy_in3;
  input proxy_sel_LOAD;
  input proxy_sel_STORE;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output [BITSIZE_proxy_out1-1:0] proxy_out1;
  
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  parameter n_bytes = n_elements*(BRAM_BITSIZE/8);
  parameter n_byte_on_databus = BRAM_BITSIZE/8;
  parameter n_mem_elements = n_bytes/(n_byte_on_databus) + (n_bytes%(n_byte_on_databus) == 0 ? 0 : 1);
  parameter nbit_addr = BITSIZE_in2 > BITSIZE_proxy_in2 ? BITSIZE_in2 : BITSIZE_proxy_in2;
  
  `ifdef _SIM_HAVE_CLOG2
    parameter nbit_read_addr = n_elements == 1 ? 1 : $clog2(n_elements);
    parameter nbits_byte_offset = n_byte_on_databus==1 ? 0 : $clog2(n_byte_on_databus);
    parameter nbits_address_space_rangesize = $clog2(address_space_rangesize);
  `else
    parameter nbit_read_addr = n_elements == 1 ? 1 : log2(n_elements);
    parameter nbits_byte_offset = n_byte_on_databus==1 ? 0 : log2(n_byte_on_databus);
    parameter nbits_address_space_rangesize = log2(address_space_rangesize);
  `endif
    
  wire [nbit_read_addr-1:0] memory_addr_a;
  wire [nbit_read_addr-1:0] memory_addr_a_mem;
  reg [nbit_read_addr-1:0] memory_addr_a1 =0;
  
  wire bram_write;
  wire bram_write_mem;
  reg bram_write1 =0;
  reg [data_size-1:0] dout_a =0;
  reg [data_size-1:0] dout_a_registered =0;
  wire cs, oe_ram_cs, we_ram_cs;
  reg we_ram_cs_delayed =0;
  reg oe_ram_cs_delayed =0;
  reg oe_ram_cs_delayed_registered =0;
  reg oe_ram_cs_delayed_registered1 =0;
  wire [nbit_addr-1:0] relative_addr;
  wire [nbit_addr-1:0] tmp_addr;
  wire [data_size-1:0] din_a;
  wire [data_size-1:0] din_a_mem;
  reg [data_size-1:0] din_a1 =0;
  reg [data_size-1:0] memory [0:n_elements-1] /* synthesis syn_ramstyle = "no_rw_check" */;
  
  initial
  begin
    $readmemb(MEMORY_INIT_file, memory, 0, n_elements-1);
  end
  
  assign din_a = proxy_sel_STORE ? proxy_in1 : sel_STORE ? in1 : S_Wdata_ram;
  assign bram_write = sel_STORE || proxy_sel_STORE || we_ram_cs;
  generate
    if(HIGH_LATENCY==2)
    begin
      always @ (posedge clock)
      begin
         memory_addr_a1 <= memory_addr_a;
         bram_write1 <= bram_write;
         din_a1 <= din_a;
      end
      assign memory_addr_a_mem = memory_addr_a1;
      assign bram_write_mem = bram_write1;
      assign din_a_mem = din_a1;
    end
    else
    begin
      assign memory_addr_a_mem = memory_addr_a;
      assign bram_write_mem = bram_write;
      assign din_a_mem = din_a;
    end
  endgenerate
  
  always @(posedge clock)
  begin
    if (bram_write_mem)
    begin
      memory[memory_addr_a_mem] <= din_a_mem;
    end
    if(HIGH_LATENCY==0)
    begin
      dout_a <= memory[memory_addr_a_mem];
    end
    else if(HIGH_LATENCY==1)
    begin
      dout_a_registered <= memory[memory_addr_a_mem];
      dout_a <= dout_a_registered;
    end
    else
    begin
      dout_a_registered <= memory[memory_addr_a_mem];
      dout_a <= dout_a_registered;
    end
  end
  
  assign tmp_addr = (proxy_sel_LOAD||proxy_sel_STORE) ? proxy_in2 : in2;
  
  generate
    if(PRIVATE_MEMORY==0 && USE_SPARSE_MEMORY==0)
      assign cs = (S_addr_ram >= (address_space_begin)) && (S_addr_ram < (address_space_begin+address_space_rangesize));
    else if(PRIVATE_MEMORY==0)
      assign cs = S_addr_ram[nbit_addr-1:nbits_address_space_rangesize] == address_space_begin[nbit_addr-1:nbits_address_space_rangesize];
    else
      assign cs = 1'b0;
  endgenerate
  
  assign oe_ram_cs = S_oe_ram && cs;
  assign we_ram_cs = S_we_ram && cs;
  
  generate
    if(PRIVATE_MEMORY==0 && USE_SPARSE_MEMORY==0)
      assign relative_addr = (sel_STORE===1'b1 || sel_LOAD===1'b1 || proxy_sel_STORE===1'b1 || proxy_sel_LOAD===1'b1) ? tmp_addr-address_space_begin[nbit_addr-1:0] : S_addr_ram-address_space_begin[nbit_addr-1:0];
    else if(PRIVATE_MEMORY==0)
      assign relative_addr = (sel_STORE===1'b1 || sel_LOAD===1'b1 || proxy_sel_STORE===1'b1 || proxy_sel_LOAD===1'b1) ? tmp_addr[nbits_address_space_rangesize-1:0] : S_addr_ram[nbits_address_space_rangesize-1:0];
    else if(USE_SPARSE_MEMORY==1)
      assign relative_addr = tmp_addr[nbits_address_space_rangesize-1:0];
    else
      assign relative_addr = tmp_addr-address_space_begin[nbit_addr-1:0];
  endgenerate
  
  generate
    if (n_elements==1)
      assign memory_addr_a = {nbit_read_addr{1'b0}};
    else
      assign memory_addr_a = relative_addr[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset];
  endgenerate
  
  assign out1 = dout_a;
  assign proxy_out1 = dout_a;
  always @(posedge clock )
  begin
    if(reset == 1'b0)
      begin
        oe_ram_cs_delayed <= 1'b0;
        if(HIGH_LATENCY != 0) oe_ram_cs_delayed_registered <= 1'b0;
        if(HIGH_LATENCY == 2) oe_ram_cs_delayed_registered1 <= 1'b0;
      end
    else
      begin
        if(HIGH_LATENCY==0)
          oe_ram_cs_delayed <= oe_ram_cs & (!oe_ram_cs_delayed | BUS_PIPELINED);
        else if(HIGH_LATENCY==1)
        begin
          oe_ram_cs_delayed_registered <= oe_ram_cs & ((!oe_ram_cs_delayed_registered & !oe_ram_cs_delayed) | BUS_PIPELINED);
          oe_ram_cs_delayed <= oe_ram_cs_delayed_registered;
        end
        else
        begin
          oe_ram_cs_delayed_registered1 <= oe_ram_cs & ((!oe_ram_cs_delayed_registered1 & !oe_ram_cs_delayed_registered) | BUS_PIPELINED);
          oe_ram_cs_delayed_registered <= oe_ram_cs_delayed_registered1;
          oe_ram_cs_delayed <= oe_ram_cs_delayed_registered;
        end
      end
  end
    
  always @(posedge clock )
  begin
    if(reset == 1'b0)
      we_ram_cs_delayed <= 1'b0;
    else
      we_ram_cs_delayed <= we_ram_cs & !we_ram_cs_delayed;
  end
  
  generate
    if(PRIVATE_MEMORY==1)
      assign Sout_Rdata_ram =Sin_Rdata_ram;
    else if (BITSIZE_Sout_Rdata_ram <= data_size)
      assign Sout_Rdata_ram = oe_ram_cs_delayed ? dout_a[BITSIZE_Sout_Rdata_ram-1:0] : Sin_Rdata_ram;
    else
      assign Sout_Rdata_ram = oe_ram_cs_delayed ? {{BITSIZE_Sout_Rdata_ram-data_size{1'b0}}, dout_a} : Sin_Rdata_ram;
  endgenerate
  
  generate
    if(PRIVATE_MEMORY==1)
      assign Sout_DataRdy = Sin_DataRdy;
    else
      assign Sout_DataRdy = oe_ram_cs_delayed | Sin_DataRdy | we_ram_cs_delayed;
  endgenerate
  
  // Add assertion here
  // psl default clock = (posedge clock);
  // psl ERROR_SDS_data_ram_size: assert never {(BRAM_BITSIZE != in3 && (sel_LOAD || sel_STORE)) || (BRAM_BITSIZE != proxy_in3 && (proxy_sel_LOAD || proxy_sel_STORE))};
  // psl ERROR_SDS_alignment: assert never {(((in2-address_space_begin) %(BRAM_BITSIZE/8) != 0) && (sel_LOAD || sel_STORE)) || (((proxy_in2-address_space_begin) %(BRAM_BITSIZE/8) != 0) && (proxy_sel_LOAD || proxy_sel_STORE))};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ARRAY_1D_STD_BRAM_SDS_BUS(clock, reset, in1, in2, in3, in4, sel_LOAD, sel_STORE, S_oe_ram, S_we_ram, S_addr_ram, S_Wdata_ram, Sin_Rdata_ram, S_data_ram_size, Sin_DataRdy, out1, Sout_Rdata_ram, Sout_DataRdy, proxy_in1, proxy_in2, proxy_in3, proxy_sel_LOAD, proxy_sel_STORE, proxy_out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1, BITSIZE_S_addr_ram=1, BITSIZE_S_Wdata_ram=8, BITSIZE_Sin_Rdata_ram=8, BITSIZE_Sout_Rdata_ram=8, BITSIZE_S_data_ram_size=1, MEMORY_INIT_file="array.mem", n_elements=1, data_size=32, address_space_begin=0, address_space_rangesize=4, BUS_PIPELINED=1, BRAM_BITSIZE=32, PRIVATE_MEMORY=0, USE_SPARSE_MEMORY=1, BITSIZE_proxy_in1=1, BITSIZE_proxy_in2=1, BITSIZE_proxy_in3=1, BITSIZE_proxy_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input in4;
  input sel_LOAD;
  input sel_STORE;
  input S_oe_ram;
  input S_we_ram;
  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;
  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;
  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;
  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;
  input Sin_DataRdy;
  input [BITSIZE_proxy_in1-1:0] proxy_in1;
  input [BITSIZE_proxy_in2-1:0] proxy_in2;
  input [BITSIZE_proxy_in3-1:0] proxy_in3;
  input proxy_sel_LOAD;
  input proxy_sel_STORE;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output [BITSIZE_proxy_out1-1:0] proxy_out1;
  ARRAY_1D_STD_BRAM_SDS_BUS_BASE #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_in3(BITSIZE_in3), .BITSIZE_out1(BITSIZE_out1), .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram), .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram), .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram), .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size), .MEMORY_INIT_file(MEMORY_INIT_file), .n_elements(n_elements), .data_size(data_size), .address_space_begin(address_space_begin), .address_space_rangesize(address_space_rangesize), .BUS_PIPELINED(BUS_PIPELINED), .BRAM_BITSIZE(BRAM_BITSIZE), .PRIVATE_MEMORY(PRIVATE_MEMORY), .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY), .HIGH_LATENCY(0), .BITSIZE_proxy_in1(BITSIZE_proxy_in1), .BITSIZE_proxy_in2(BITSIZE_proxy_in2), .BITSIZE_proxy_in3(BITSIZE_proxy_in3), .BITSIZE_proxy_out1(BITSIZE_proxy_out1)) ARRAY_1D_STD_BRAM_instance (.out1(out1), .Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .proxy_out1(proxy_out1), .clock(clock), .reset(reset), .in1(in1), .in2(in2), .in3(in3), .sel_LOAD(sel_LOAD & in4), .sel_STORE(sel_STORE & in4), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(proxy_in1), .proxy_in2(proxy_in2), .proxy_in3(proxy_in3), .proxy_sel_LOAD(proxy_sel_LOAD), .proxy_sel_STORE(proxy_sel_STORE));
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module addr_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module IIdata_converter_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UUdata_converter_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module register_STD(clock, reset, in1, wenable, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  reg [BITSIZE_out1-1:0] reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock)
    reg_out1 <= in1;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module fp_view_convert_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UIdata_converter_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ASSIGN_SIGNED_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UIconvert_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module IIconvert_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module IUdata_converter_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UUconvert_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module read_cond_FU(in1, out1);
  parameter BITSIZE_in1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output out1;
  assign out1 = in1 != {BITSIZE_in1{1'b0}};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_extract_bit_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output out1;
  assign out1 = (in1 >> in2)&1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module extract_bit_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output out1;
  assign out1 = (in1 >>> in2)&1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module multi_read_cond_FU(in1, out1);
  parameter BITSIZE_in1=1, PORTSIZE_in1=2, BITSIZE_out1=1;
  // IN
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_view_convert_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module bit_and_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 & in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module bit_ior_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 | in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module bit_not_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = ~in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module eq_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 == in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module lshift_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PRECISION=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg2_bitsize = $clog2(PRECISION);
  `else
    parameter arg2_bitsize = log2(PRECISION);
  `endif
  generate
    if(BITSIZE_in2 > arg2_bitsize)
      assign out1 = in1 <<< in2[arg2_bitsize-1:0];
    else
      assign out1 = in1 <<< in2;
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module lt_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 < in2;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ne_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 != in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ternary_mp_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  input signed [BITSIZE_in3-1:0] in3;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 - in2 + in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module truth_and_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 && in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module truth_not_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = !in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module truth_or_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 || in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module truth_xor_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = (in1!={BITSIZE_in1{1'b0}}) ^ (in2!={BITSIZE_in2{1'b0}});
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_and_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 & in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2016-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_ior_concat_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1, OFFSET_PARAMETER=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  parameter nbit_out = BITSIZE_out1 > OFFSET_PARAMETER ? BITSIZE_out1 : 1+OFFSET_PARAMETER;
  wire [nbit_out-1:0] tmp_in1;
  wire [OFFSET_PARAMETER-1:0] tmp_in2;
  generate
    if(BITSIZE_in1 >= nbit_out)
      assign tmp_in1=in1[nbit_out-1:0];
    else
      assign tmp_in1={{(nbit_out-BITSIZE_in1){1'b0}},in1};
  endgenerate
  generate
    if(BITSIZE_in2 >= OFFSET_PARAMETER)
      assign tmp_in2=in2[OFFSET_PARAMETER-1:0];
    else
      assign tmp_in2={{(OFFSET_PARAMETER-BITSIZE_in2){1'b0}},in2};
  endgenerate
  assign out1 = {tmp_in1[nbit_out-1:OFFSET_PARAMETER] , tmp_in2};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_ior_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 | in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_not_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = ~in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_xor_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 ^ in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_cond_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 != 0 ? in2 : in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_eq_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 == in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_lshift_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PRECISION=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg2_bitsize = $clog2(PRECISION);
  `else
    parameter arg2_bitsize = log2(PRECISION);
  `endif
  generate
    if(BITSIZE_in2 > arg2_bitsize)
      assign out1 = in1 << in2[arg2_bitsize-1:0];
    else
      assign out1 = in1 << in2;
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_minus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 - in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_ne_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 != in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_negate_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = -in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_plus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_rshift_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PRECISION=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg2_bitsize = $clog2(PRECISION);
  `else
    parameter arg2_bitsize = log2(PRECISION);
  `endif
  generate
    if(BITSIZE_in2 > arg2_bitsize)
      assign out1 = in1 >> (in2[arg2_bitsize-1:0]);
    else
      assign out1 = in1 >> in2;
  endgenerate

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ASSIGN_UNSIGNED_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module MUX_GATE(sel, in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input sel;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = sel ? in1 : in2;
endmodule

// Datapath RTL description for __float64_divSRT4if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_divSRT4if(clock, reset, in_port_a, in_port_b, return_port, selector_MUX_186_reg_26_0_0_0, selector_MUX_186_reg_26_0_0_1, selector_MUX_188_reg_28_0_0_0, selector_MUX_189_reg_29_0_0_0, selector_MUX_191_reg_30_0_0_0, selector_MUX_216_reg_53_0_0_0, selector_MUX_216_reg_53_0_0_1, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION___float64_divSRT4if_15199_15373, OUT_CONDITION___float64_divSRT4if_15199_15428, OUT_MULTIIF___float64_divSRT4if_15199_31375);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input selector_MUX_186_reg_26_0_0_0;
  input selector_MUX_186_reg_26_0_0_1;
  input selector_MUX_188_reg_28_0_0_0;
  input selector_MUX_189_reg_29_0_0_0;
  input selector_MUX_191_reg_30_0_0_0;
  input selector_MUX_216_reg_53_0_0_0;
  input selector_MUX_216_reg_53_0_0_1;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_24;
  input wrenable_reg_25;
  input wrenable_reg_26;
  input wrenable_reg_27;
  input wrenable_reg_28;
  input wrenable_reg_29;
  input wrenable_reg_3;
  input wrenable_reg_30;
  input wrenable_reg_31;
  input wrenable_reg_32;
  input wrenable_reg_33;
  input wrenable_reg_34;
  input wrenable_reg_35;
  input wrenable_reg_36;
  input wrenable_reg_37;
  input wrenable_reg_38;
  input wrenable_reg_39;
  input wrenable_reg_4;
  input wrenable_reg_40;
  input wrenable_reg_41;
  input wrenable_reg_42;
  input wrenable_reg_43;
  input wrenable_reg_44;
  input wrenable_reg_45;
  input wrenable_reg_46;
  input wrenable_reg_47;
  input wrenable_reg_48;
  input wrenable_reg_49;
  input wrenable_reg_5;
  input wrenable_reg_50;
  input wrenable_reg_51;
  input wrenable_reg_52;
  input wrenable_reg_53;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output [63:0] return_port;
  output OUT_CONDITION___float64_divSRT4if_15199_15373;
  output OUT_CONDITION___float64_divSRT4if_15199_15428;
  output OUT_MULTIIF___float64_divSRT4if_15199_31375;
  // Component and signal declarations
  wire signed [11:0] out_ASSIGN_SIGNED_FU_5_i0_fu___float64_divSRT4if_15199_31454;
  wire signed [11:0] out_ASSIGN_SIGNED_FU_7_i0_fu___float64_divSRT4if_15199_31456;
  wire signed [2:0] out_IIconvert_expr_FU_13_i0_fu___float64_divSRT4if_15199_15238;
  wire signed [2:0] out_IIconvert_expr_FU_17_i0_fu___float64_divSRT4if_15199_15245;
  wire signed [2:0] out_IIconvert_expr_FU_21_i0_fu___float64_divSRT4if_15199_15261;
  wire signed [2:0] out_IIconvert_expr_FU_25_i0_fu___float64_divSRT4if_15199_15268;
  wire signed [2:0] out_IIconvert_expr_FU_29_i0_fu___float64_divSRT4if_15199_15275;
  wire signed [2:0] out_IIconvert_expr_FU_35_i0_fu___float64_divSRT4if_15199_15294;
  wire signed [3:0] out_IIconvert_expr_FU_57_i0_fu___float64_divSRT4if_15199_15342;
  wire signed [2:0] out_IIconvert_expr_FU_59_i0_fu___float64_divSRT4if_15199_15345;
  wire signed [2:0] out_IIconvert_expr_FU_9_i0_fu___float64_divSRT4if_15199_15231;
  wire [1:0] out_IUdata_converter_FU_11_i0_fu___float64_divSRT4if_15199_15234;
  wire [1:0] out_IUdata_converter_FU_15_i0_fu___float64_divSRT4if_15199_15241;
  wire [1:0] out_IUdata_converter_FU_19_i0_fu___float64_divSRT4if_15199_15248;
  wire [1:0] out_IUdata_converter_FU_23_i0_fu___float64_divSRT4if_15199_15264;
  wire [1:0] out_IUdata_converter_FU_27_i0_fu___float64_divSRT4if_15199_15271;
  wire [1:0] out_IUdata_converter_FU_31_i0_fu___float64_divSRT4if_15199_15278;
  wire [0:0] out_IUdata_converter_FU_45_i0_fu___float64_divSRT4if_15199_15463;
  wire [0:0] out_IUdata_converter_FU_49_i0_fu___float64_divSRT4if_15199_15454;
  wire [2:0] out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349;
  wire [1:0] out_IUdata_converter_FU_63_i0_fu___float64_divSRT4if_15199_15352;
  wire [1:0] out_IUdata_converter_FU_64_i0_fu___float64_divSRT4if_15199_15356;
  wire [11:0] out_IUdata_converter_FU_68_i0_fu___float64_divSRT4if_15199_15416;
  wire [54:0] out_MUX_186_reg_26_0_0_0;
  wire [54:0] out_MUX_186_reg_26_0_0_1;
  wire [63:0] out_MUX_188_reg_28_0_0_0;
  wire [63:0] out_MUX_189_reg_29_0_0_0;
  wire [7:0] out_MUX_191_reg_30_0_0_0;
  wire [63:0] out_MUX_216_reg_53_0_0_0;
  wire [63:0] out_MUX_216_reg_53_0_0_1;
  wire signed [1:0] out_UIconvert_expr_FU_10_i0_fu___float64_divSRT4if_15199_15232;
  wire signed [7:0] out_UIconvert_expr_FU_12_i0_fu___float64_divSRT4if_15199_15236;
  wire signed [1:0] out_UIconvert_expr_FU_14_i0_fu___float64_divSRT4if_15199_15239;
  wire signed [7:0] out_UIconvert_expr_FU_16_i0_fu___float64_divSRT4if_15199_15243;
  wire signed [1:0] out_UIconvert_expr_FU_18_i0_fu___float64_divSRT4if_15199_15246;
  wire signed [7:0] out_UIconvert_expr_FU_20_i0_fu___float64_divSRT4if_15199_15259;
  wire signed [1:0] out_UIconvert_expr_FU_22_i0_fu___float64_divSRT4if_15199_15262;
  wire signed [7:0] out_UIconvert_expr_FU_24_i0_fu___float64_divSRT4if_15199_15266;
  wire signed [1:0] out_UIconvert_expr_FU_26_i0_fu___float64_divSRT4if_15199_15269;
  wire signed [7:0] out_UIconvert_expr_FU_28_i0_fu___float64_divSRT4if_15199_15273;
  wire signed [1:0] out_UIconvert_expr_FU_30_i0_fu___float64_divSRT4if_15199_15276;
  wire signed [1:0] out_UIconvert_expr_FU_42_i0_fu___float64_divSRT4if_15199_15456;
  wire signed [1:0] out_UIconvert_expr_FU_46_i0_fu___float64_divSRT4if_15199_15447;
  wire signed [1:0] out_UIconvert_expr_FU_56_i0_fu___float64_divSRT4if_15199_15340;
  wire signed [1:0] out_UIconvert_expr_FU_58_i0_fu___float64_divSRT4if_15199_15343;
  wire signed [1:0] out_UIconvert_expr_FU_60_i0_fu___float64_divSRT4if_15199_15346;
  wire signed [1:0] out_UIconvert_expr_FU_62_i0_fu___float64_divSRT4if_15199_15350;
  wire signed [1:0] out_UIconvert_expr_FU_67_i0_fu___float64_divSRT4if_15199_15407;
  wire signed [7:0] out_UIconvert_expr_FU_8_i0_fu___float64_divSRT4if_15199_15229;
  wire signed [7:0] out_UIdata_converter_FU_32_i0_fu___float64_divSRT4if_15199_15284;
  wire signed [1:0] out_UIdata_converter_FU_33_i0_fu___float64_divSRT4if_15199_15286;
  wire signed [7:0] out_UIdata_converter_FU_34_i0_fu___float64_divSRT4if_15199_15291;
  wire signed [1:0] out_UIdata_converter_FU_36_i0_fu___float64_divSRT4if_15199_15301;
  wire signed [1:0] out_UIdata_converter_FU_37_i0_fu___float64_divSRT4if_15199_15305;
  wire signed [1:0] out_UIdata_converter_FU_38_i0_fu___float64_divSRT4if_15199_15308;
  wire signed [1:0] out_UIdata_converter_FU_39_i0_fu___float64_divSRT4if_15199_15310;
  wire signed [1:0] out_UIdata_converter_FU_40_i0_fu___float64_divSRT4if_15199_15313;
  wire signed [1:0] out_UIdata_converter_FU_43_i0_fu___float64_divSRT4if_15199_15458;
  wire signed [1:0] out_UIdata_converter_FU_44_i0_fu___float64_divSRT4if_15199_15460;
  wire signed [1:0] out_UIdata_converter_FU_47_i0_fu___float64_divSRT4if_15199_15449;
  wire signed [1:0] out_UIdata_converter_FU_48_i0_fu___float64_divSRT4if_15199_15451;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_divSRT4if_15199_15210;
  wire signed [5:0] out_UIdata_converter_FU_55_i0_fu___float64_divSRT4if_15199_15334;
  wire signed [11:0] out_UIdata_converter_FU_6_i0_fu___float64_divSRT4if_15199_15215;
  wire signed [63:0] out_UIdata_converter_FU_74_i0_fu___float64_divSRT4if_15199_15431;
  wire [3:0] out_UUconvert_expr_FU_54_i0_fu___float64_divSRT4if_15199_15331;
  wire out_UUdata_converter_FU_41_i0_fu___float64_divSRT4if_15199_15325;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_78_i0_fu___float64_divSRT4if_15199_15211;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_78_i1_fu___float64_divSRT4if_15199_15216;
  wire signed [12:0] out_bit_and_expr_FU_16_0_16_79_i0_fu___float64_divSRT4if_15199_15411;
  wire signed [1:0] out_bit_and_expr_FU_8_0_8_80_i0_fu___float64_divSRT4if_15199_15302;
  wire signed [7:0] out_bit_and_expr_FU_8_8_8_81_i0_fu___float64_divSRT4if_15199_15288;
  wire signed [1:0] out_bit_and_expr_FU_8_8_8_81_i1_fu___float64_divSRT4if_15199_15309;
  wire signed [1:0] out_bit_and_expr_FU_8_8_8_81_i2_fu___float64_divSRT4if_15199_15314;
  wire signed [1:0] out_bit_and_expr_FU_8_8_8_81_i3_fu___float64_divSRT4if_15199_15315;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_82_i0_fu___float64_divSRT4if_15199_15233;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_83_i0_fu___float64_divSRT4if_15199_15240;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_divSRT4if_15199_15247;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_divSRT4if_15199_15263;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_divSRT4if_15199_15270;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_87_i0_fu___float64_divSRT4if_15199_15277;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_88_i0_fu___float64_divSRT4if_15199_15317;
  wire signed [3:0] out_bit_ior_expr_FU_0_8_8_89_i0_fu___float64_divSRT4if_15199_15347;
  wire signed [3:0] out_bit_ior_expr_FU_0_8_8_90_i0_fu___float64_divSRT4if_15199_15348;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_91_i0_fu___float64_divSRT4if_15199_15351;
  wire signed [10:0] out_bit_ior_expr_FU_16_0_16_92_i0_fu___float64_divSRT4if_15199_15408;
  wire signed [7:0] out_bit_ior_expr_FU_8_8_8_93_i0_fu___float64_divSRT4if_15199_15292;
  wire signed [1:0] out_bit_ior_expr_FU_8_8_8_93_i1_fu___float64_divSRT4if_15199_15316;
  wire signed [1:0] out_bit_ior_expr_FU_8_8_8_93_i2_fu___float64_divSRT4if_15199_15452;
  wire signed [1:0] out_bit_ior_expr_FU_8_8_8_93_i3_fu___float64_divSRT4if_15199_15453;
  wire signed [1:0] out_bit_ior_expr_FU_8_8_8_93_i4_fu___float64_divSRT4if_15199_15461;
  wire signed [1:0] out_bit_ior_expr_FU_8_8_8_93_i5_fu___float64_divSRT4if_15199_15462;
  wire signed [1:0] out_bit_not_expr_FU_8_8_94_i0_fu___float64_divSRT4if_15199_15287;
  wire signed [1:0] out_bit_not_expr_FU_8_8_94_i1_fu___float64_divSRT4if_15199_15311;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [10:0] out_const_10;
  wire [11:0] out_const_11;
  wire [12:0] out_const_12;
  wire out_const_13;
  wire [1:0] out_const_14;
  wire [52:0] out_const_15;
  wire [2:0] out_const_16;
  wire [3:0] out_const_17;
  wire [1:0] out_const_18;
  wire [2:0] out_const_19;
  wire [2:0] out_const_2;
  wire [3:0] out_const_20;
  wire [5:0] out_const_21;
  wire [5:0] out_const_22;
  wire [2:0] out_const_23;
  wire [4:0] out_const_24;
  wire [31:0] out_const_25;
  wire [5:0] out_const_26;
  wire [31:0] out_const_27;
  wire [62:0] out_const_28;
  wire [62:0] out_const_29;
  wire [3:0] out_const_3;
  wire [51:0] out_const_30;
  wire [52:0] out_const_31;
  wire [53:0] out_const_32;
  wire [55:0] out_const_33;
  wire [57:0] out_const_34;
  wire [2:0] out_const_4;
  wire [6:0] out_const_5;
  wire [6:0] out_const_6;
  wire [6:0] out_const_7;
  wire [6:0] out_const_8;
  wire [6:0] out_const_9;
  wire [52:0] out_conv_out_reg_26_reg_26_55_53;
  wire [54:0] out_conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0_53_55;
  wire [63:0] out_conv_out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1_1_64;
  wire [63:0] out_conv_out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2_1_64;
  wire [7:0] out_conv_out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3_5_8;
  wire [54:0] out_conv_out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318_53_55;
  wire out_eq_expr_FU_16_0_16_95_i0_fu___float64_divSRT4if_15199_15219;
  wire out_eq_expr_FU_16_0_16_95_i1_fu___float64_divSRT4if_15199_15220;
  wire out_eq_expr_FU_16_0_16_96_i0_fu___float64_divSRT4if_15199_15221;
  wire out_eq_expr_FU_16_0_16_96_i1_fu___float64_divSRT4if_15199_15251;
  wire out_eq_expr_FU_16_0_16_96_i2_fu___float64_divSRT4if_15199_15433;
  wire out_eq_expr_FU_8_0_8_97_i0_fu___float64_divSRT4if_15199_29804;
  wire out_eq_expr_FU_8_0_8_98_i0_fu___float64_divSRT4if_15199_29810;
  wire out_eq_expr_FU_8_0_8_99_i0_fu___float64_divSRT4if_15199_29812;
  wire out_extract_bit_expr_FU_69_i0_fu___float64_divSRT4if_15199_30241;
  wire out_extract_bit_expr_FU_70_i0_fu___float64_divSRT4if_15199_30246;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_divSRT4if_15199_15204;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_divSRT4if_15199_15205;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i0_fu___float64_divSRT4if_15199_15230;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i1_fu___float64_divSRT4if_15199_15237;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i2_fu___float64_divSRT4if_15199_15244;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i3_fu___float64_divSRT4if_15199_15260;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i4_fu___float64_divSRT4if_15199_15267;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i5_fu___float64_divSRT4if_15199_15274;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_100_i6_fu___float64_divSRT4if_15199_15293;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_101_i0_fu___float64_divSRT4if_15199_15341;
  wire signed [2:0] out_lshift_expr_FU_8_0_8_102_i0_fu___float64_divSRT4if_15199_15344;
  wire signed [2:0] out_lshift_expr_FU_8_0_8_102_i1_fu___float64_divSRT4if_15199_15355;
  wire out_lt_expr_FU_64_0_64_103_i0_fu___float64_divSRT4if_15199_15432;
  wire out_multi_read_cond_FU_71_i0_fu___float64_divSRT4if_15199_31375;
  wire out_ne_expr_FU_16_0_16_104_i0_fu___float64_divSRT4if_15199_15226;
  wire out_ne_expr_FU_16_0_16_104_i1_fu___float64_divSRT4if_15199_15256;
  wire out_read_cond_FU_65_i0_fu___float64_divSRT4if_15199_15373;
  wire out_read_cond_FU_75_i0_fu___float64_divSRT4if_15199_15428;
  wire out_reg_0_reg_0;
  wire [54:0] out_reg_10_reg_10;
  wire out_reg_11_reg_11;
  wire [63:0] out_reg_12_reg_12;
  wire [51:0] out_reg_13_reg_13;
  wire [11:0] out_reg_14_reg_14;
  wire [11:0] out_reg_15_reg_15;
  wire out_reg_16_reg_16;
  wire out_reg_17_reg_17;
  wire [11:0] out_reg_18_reg_18;
  wire [11:0] out_reg_19_reg_19;
  wire [7:0] out_reg_1_reg_1;
  wire [54:0] out_reg_20_reg_20;
  wire [63:0] out_reg_21_reg_21;
  wire [63:0] out_reg_22_reg_22;
  wire out_reg_23_reg_23;
  wire out_reg_24_reg_24;
  wire [63:0] out_reg_25_reg_25;
  wire [54:0] out_reg_26_reg_26;
  wire [63:0] out_reg_27_reg_27;
  wire [63:0] out_reg_28_reg_28;
  wire [63:0] out_reg_29_reg_29;
  wire [7:0] out_reg_2_reg_2;
  wire [7:0] out_reg_30_reg_30;
  wire out_reg_31_reg_31;
  wire out_reg_32_reg_32;
  wire out_reg_33_reg_33;
  wire [54:0] out_reg_34_reg_34;
  wire [54:0] out_reg_35_reg_35;
  wire [53:0] out_reg_36_reg_36;
  wire [54:0] out_reg_37_reg_37;
  wire [57:0] out_reg_38_reg_38;
  wire [54:0] out_reg_39_reg_39;
  wire [1:0] out_reg_3_reg_3;
  wire [1:0] out_reg_40_reg_40;
  wire [53:0] out_reg_41_reg_41;
  wire [53:0] out_reg_42_reg_42;
  wire [10:0] out_reg_43_reg_43;
  wire out_reg_44_reg_44;
  wire out_reg_45_reg_45;
  wire [63:0] out_reg_46_reg_46;
  wire out_reg_47_reg_47;
  wire out_reg_48_reg_48;
  wire out_reg_49_reg_49;
  wire [1:0] out_reg_4_reg_4;
  wire [63:0] out_reg_50_reg_50;
  wire [63:0] out_reg_51_reg_51;
  wire out_reg_52_reg_52;
  wire [63:0] out_reg_53_reg_53;
  wire [1:0] out_reg_5_reg_5;
  wire [52:0] out_reg_6_reg_6;
  wire [54:0] out_reg_7_reg_7;
  wire [53:0] out_reg_8_reg_8;
  wire [54:0] out_reg_9_reg_9;
  wire signed [13:0] out_ternary_mp_expr_FU_16_16_16_16_105_i0_fu___float64_divSRT4if_15199_15410;
  wire out_truth_and_expr_FU_1_1_1_106_i0_fu___float64_divSRT4if_15199_31344;
  wire out_truth_and_expr_FU_1_1_1_106_i1_fu___float64_divSRT4if_15199_31374;
  wire out_truth_and_expr_FU_1_1_1_106_i2_fu___float64_divSRT4if_15199_31381;
  wire out_truth_and_expr_FU_1_1_1_106_i3_fu___float64_divSRT4if_15199_31384;
  wire out_truth_and_expr_FU_1_1_1_106_i4_fu___float64_divSRT4if_15199_31387;
  wire out_truth_not_expr_FU_1_1_107_i0_fu___float64_divSRT4if_15199_15227;
  wire out_truth_not_expr_FU_1_1_107_i1_fu___float64_divSRT4if_15199_15257;
  wire out_truth_not_expr_FU_1_1_107_i2_fu___float64_divSRT4if_15199_31341;
  wire out_truth_not_expr_FU_1_1_107_i3_fu___float64_divSRT4if_15199_31371;
  wire out_truth_not_expr_FU_1_1_107_i4_fu___float64_divSRT4if_15199_31378;
  wire out_truth_or_expr_FU_1_1_1_108_i0_fu___float64_divSRT4if_15199_31403;
  wire out_truth_xor_expr_FU_1_0_1_109_i0_fu___float64_divSRT4if_15199_30194;
  wire [52:0] out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0;
  wire [0:0] out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1;
  wire [0:0] out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2;
  wire [4:0] out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_110_i0_fu___float64_divSRT4if_15199_15207;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_111_i0_fu___float64_divSRT4if_15199_15235;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_111_i1_fu___float64_divSRT4if_15199_15265;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_111_i2_fu___float64_divSRT4if_15199_15285;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_112_i0_fu___float64_divSRT4if_15199_15306;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_113_i0_fu___float64_divSRT4if_15199_15336;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_113_i1_fu___float64_divSRT4if_15199_15338;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_114_i0_fu___float64_divSRT4if_15199_15390;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_115_i0_fu___float64_divSRT4if_15199_15401;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_115_i1_fu___float64_divSRT4if_15199_15414;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_116_i0_fu___float64_divSRT4if_15199_30144;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_116_i1_fu___float64_divSRT4if_15199_30161;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i0_fu___float64_divSRT4if_15199_15223;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i10_fu___float64_divSRT4if_15199_15425;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i11_fu___float64_divSRT4if_15199_15448;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i12_fu___float64_divSRT4if_15199_15450;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i13_fu___float64_divSRT4if_15199_15457;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i14_fu___float64_divSRT4if_15199_15459;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i1_fu___float64_divSRT4if_15199_15225;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i2_fu___float64_divSRT4if_15199_15228;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i3_fu___float64_divSRT4if_15199_15253;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i4_fu___float64_divSRT4if_15199_15255;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i5_fu___float64_divSRT4if_15199_15258;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i6_fu___float64_divSRT4if_15199_15289;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i7_fu___float64_divSRT4if_15199_15295;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i8_fu___float64_divSRT4if_15199_15296;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_117_i9_fu___float64_divSRT4if_15199_15415;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_118_i0_fu___float64_divSRT4if_15199_15208;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_118_i1_fu___float64_divSRT4if_15199_15213;
  wire [53:0] out_ui_bit_and_expr_FU_64_0_64_119_i0_fu___float64_divSRT4if_15199_15370;
  wire [53:0] out_ui_bit_and_expr_FU_64_0_64_119_i1_fu___float64_divSRT4if_15199_15403;
  wire [56:0] out_ui_bit_and_expr_FU_64_0_64_120_i0_fu___float64_divSRT4if_15199_15387;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_121_i0_fu___float64_divSRT4if_15199_15393;
  wire [52:0] out_ui_bit_and_expr_FU_64_0_64_122_i0_fu___float64_divSRT4if_15199_15397;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_123_i0_fu___float64_divSRT4if_15199_15242;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_123_i1_fu___float64_divSRT4if_15199_15272;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_124_i0_fu___float64_divSRT4if_15199_30183;
  wire [1:0] out_ui_bit_and_expr_FU_8_8_8_125_i0_fu___float64_divSRT4if_15199_15299;
  wire [54:0] out_ui_bit_ior_concat_expr_FU_126_i0_fu___float64_divSRT4if_15199_15323;
  wire [54:0] out_ui_bit_ior_concat_expr_FU_126_i1_fu___float64_divSRT4if_15199_15369;
  wire [58:0] out_ui_bit_ior_concat_expr_FU_127_i0_fu___float64_divSRT4if_15199_15388;
  wire [63:0] out_ui_bit_ior_concat_expr_FU_128_i0_fu___float64_divSRT4if_15199_15472;
  wire [61:0] out_ui_bit_ior_expr_FU_0_64_64_129_i0_fu___float64_divSRT4if_15199_15353;
  wire [61:0] out_ui_bit_ior_expr_FU_0_64_64_130_i0_fu___float64_divSRT4if_15199_15357;
  wire [57:0] out_ui_bit_ior_expr_FU_0_64_64_131_i0_fu___float64_divSRT4if_15199_15383;
  wire [53:0] out_ui_bit_ior_expr_FU_0_64_64_132_i0_fu___float64_divSRT4if_15199_15402;
  wire [63:0] out_ui_bit_ior_expr_FU_0_64_64_133_i0_fu___float64_divSRT4if_15199_15418;
  wire [4:0] out_ui_bit_ior_expr_FU_0_8_8_134_i0_fu___float64_divSRT4if_15199_15333;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_135_i0_fu___float64_divSRT4if_15199_15290;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_135_i1_fu___float64_divSRT4if_15199_15297;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_135_i2_fu___float64_divSRT4if_15199_15434;
  wire [52:0] out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318;
  wire [52:0] out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319;
  wire [59:0] out_ui_bit_ior_expr_FU_64_0_64_137_i0_fu___float64_divSRT4if_15199_15380;
  wire [63:0] out_ui_bit_ior_expr_FU_64_0_64_138_i0_fu___float64_divSRT4if_15199_15469;
  wire [56:0] out_ui_bit_ior_expr_FU_64_64_64_139_i0_fu___float64_divSRT4if_15199_15392;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_139_i1_fu___float64_divSRT4if_15199_15441;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_139_i2_fu___float64_divSRT4if_15199_15468;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i0_fu___float64_divSRT4if_15199_15249;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i1_fu___float64_divSRT4if_15199_15250;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i2_fu___float64_divSRT4if_15199_15279;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i3_fu___float64_divSRT4if_15199_15280;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i4_fu___float64_divSRT4if_15199_15298;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i5_fu___float64_divSRT4if_15199_15300;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i6_fu___float64_divSRT4if_15199_15400;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_140_i7_fu___float64_divSRT4if_15199_15412;
  wire [1:0] out_ui_bit_not_expr_FU_1_1_141_i0_fu___float64_divSRT4if_15199_15307;
  wire [1:0] out_ui_bit_not_expr_FU_1_1_141_i1_fu___float64_divSRT4if_15199_15312;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_142_i0_fu___float64_divSRT4if_15199_15283;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_142_i1_fu___float64_divSRT4if_15199_15303;
  wire [0:0] out_ui_bit_xor_expr_FU_1_1_1_143_i0_fu___float64_divSRT4if_15199_15218;
  wire [11:0] out_ui_cond_expr_FU_16_16_16_16_144_i0_fu___float64_divSRT4if_15199_31404;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_145_i0_fu___float64_divSRT4if_15199_31400;
  wire [52:0] out_ui_cond_expr_FU_64_64_64_64_146_i0_fu___float64_divSRT4if_15199_31345;
  wire [63:0] out_ui_cond_expr_FU_64_64_64_64_146_i10_fu___float64_divSRT4if_15199_31394;
  wire [63:0] out_ui_cond_expr_FU_64_64_64_64_146_i11_fu___float64_divSRT4if_15199_31398;
  wire [63:0] out_ui_cond_expr_FU_64_64_64_64_146_i12_fu___float64_divSRT4if_15199_31407;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_146_i1_fu___float64_divSRT4if_15199_31348;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_146_i2_fu___float64_divSRT4if_15199_31351;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_146_i3_fu___float64_divSRT4if_15199_31354;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_146_i4_fu___float64_divSRT4if_15199_31357;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_146_i5_fu___float64_divSRT4if_15199_31360;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_146_i6_fu___float64_divSRT4if_15199_31367;
  wire [58:0] out_ui_cond_expr_FU_64_64_64_64_146_i7_fu___float64_divSRT4if_15199_31388;
  wire [56:0] out_ui_cond_expr_FU_64_64_64_64_146_i8_fu___float64_divSRT4if_15199_31390;
  wire [53:0] out_ui_cond_expr_FU_64_64_64_64_146_i9_fu___float64_divSRT4if_15199_31392;
  wire out_ui_eq_expr_FU_64_0_64_147_i0_fu___float64_divSRT4if_15199_15222;
  wire out_ui_eq_expr_FU_64_0_64_147_i1_fu___float64_divSRT4if_15199_15252;
  wire out_ui_eq_expr_FU_8_0_8_148_i0_fu___float64_divSRT4if_15199_29722;
  wire out_ui_eq_expr_FU_8_0_8_149_i0_fu___float64_divSRT4if_15199_29725;
  wire out_ui_eq_expr_FU_8_0_8_150_i0_fu___float64_divSRT4if_15199_29728;
  wire out_ui_eq_expr_FU_8_0_8_151_i0_fu___float64_divSRT4if_15199_29731;
  wire out_ui_eq_expr_FU_8_0_8_152_i0_fu___float64_divSRT4if_15199_29734;
  wire out_ui_eq_expr_FU_8_0_8_153_i0_fu___float64_divSRT4if_15199_29737;
  wire out_ui_extract_bit_expr_FU_66_i0_fu___float64_divSRT4if_15199_30288;
  wire out_ui_extract_bit_expr_FU_73_i0_fu___float64_divSRT4if_15199_30254;
  wire [53:0] out_ui_lshift_expr_FU_64_0_64_154_i0_fu___float64_divSRT4if_15199_15321;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_154_i1_fu___float64_divSRT4if_15199_30140;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_154_i2_fu___float64_divSRT4if_15199_30158;
  wire [57:0] out_ui_lshift_expr_FU_64_0_64_154_i3_fu___float64_divSRT4if_15199_31442;
  wire [59:0] out_ui_lshift_expr_FU_64_0_64_154_i4_fu___float64_divSRT4if_15199_31452;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_155_i0_fu___float64_divSRT4if_15199_15354;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_155_i1_fu___float64_divSRT4if_15199_15358;
  wire [55:0] out_ui_lshift_expr_FU_64_0_64_156_i0_fu___float64_divSRT4if_15199_15368;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_156_i1_fu___float64_divSRT4if_15199_15371;
  wire [58:0] out_ui_lshift_expr_FU_64_0_64_156_i2_fu___float64_divSRT4if_15199_15386;
  wire [53:0] out_ui_lshift_expr_FU_64_0_64_156_i3_fu___float64_divSRT4if_15199_15398;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_157_i0_fu___float64_divSRT4if_15199_15417;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_158_i0_fu___float64_divSRT4if_15199_15455;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_158_i1_fu___float64_divSRT4if_15199_15464;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_158_i2_fu___float64_divSRT4if_15199_15471;
  wire [58:0] out_ui_lshift_expr_FU_64_0_64_159_i0_fu___float64_divSRT4if_15199_30179;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_160_i0_fu___float64_divSRT4if_15199_30225;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_160_i1_fu___float64_divSRT4if_15199_31431;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_161_i0_fu___float64_divSRT4if_15199_31421;
  wire [4:0] out_ui_lshift_expr_FU_8_0_8_162_i0_fu___float64_divSRT4if_15199_15332;
  wire [1:0] out_ui_lshift_expr_FU_8_0_8_163_i0_fu___float64_divSRT4if_15199_15382;
  wire [56:0] out_ui_minus_expr_FU_64_64_64_164_i0_fu___float64_divSRT4if_15199_30175;
  wire [7:0] out_ui_minus_expr_FU_8_0_8_165_i0_fu___float64_divSRT4if_15199_15372;
  wire out_ui_ne_expr_FU_1_1_1_166_i0_fu___float64_divSRT4if_15199_29806;
  wire out_ui_ne_expr_FU_64_0_64_167_i0_fu___float64_divSRT4if_15199_15224;
  wire out_ui_ne_expr_FU_64_0_64_167_i1_fu___float64_divSRT4if_15199_15254;
  wire out_ui_ne_expr_FU_64_0_64_168_i0_fu___float64_divSRT4if_15199_29800;
  wire out_ui_ne_expr_FU_8_0_8_169_i0_fu___float64_divSRT4if_15199_29798;
  wire [54:0] out_ui_negate_expr_FU_64_64_170_i0_fu___float64_divSRT4if_15199_15320;
  wire [54:0] out_ui_negate_expr_FU_64_64_170_i1_fu___float64_divSRT4if_15199_15322;
  wire [54:0] out_ui_negate_expr_FU_64_64_170_i2_fu___float64_divSRT4if_15199_15324;
  wire [63:0] out_ui_plus_expr_FU_64_64_64_171_i0_fu___float64_divSRT4if_15199_15419;
  wire [53:0] out_ui_plus_expr_FU_64_64_64_171_i1_fu___float64_divSRT4if_15199_30136;
  wire [53:0] out_ui_plus_expr_FU_64_64_64_171_i2_fu___float64_divSRT4if_15199_30154;
  wire [1:0] out_ui_rshift_expr_FU_0_32_32_172_i0_fu___float64_divSRT4if_15199_15335;
  wire [1:0] out_ui_rshift_expr_FU_0_32_32_173_i0_fu___float64_divSRT4if_15199_15337;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_divSRT4if_15199_15206;
  wire [3:0] out_ui_rshift_expr_FU_64_0_64_174_i1_fu___float64_divSRT4if_15199_15330;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_divSRT4if_15199_15209;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_175_i1_fu___float64_divSRT4if_15199_15214;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_divSRT4if_15199_15212;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_176_i1_fu___float64_divSRT4if_15199_15217;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_divSRT4if_15199_15381;
  wire [57:0] out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_divSRT4if_15199_15389;
  wire [56:0] out_ui_rshift_expr_FU_64_0_64_178_i1_fu___float64_divSRT4if_15199_15391;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_178_i2_fu___float64_divSRT4if_15199_15399;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_178_i3_fu___float64_divSRT4if_15199_15413;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_divSRT4if_15199_15394;
  wire [53:0] out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_divSRT4if_15199_15396;
  wire [51:0] out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_divSRT4if_15199_15406;
  wire [52:0] out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_divSRT4if_15199_30129;
  wire [51:0] out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_divSRT4if_15199_30133;
  wire [53:0] out_ui_rshift_expr_FU_64_0_64_181_i2_fu___float64_divSRT4if_15199_30148;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_181_i3_fu___float64_divSRT4if_15199_30151;
  wire [53:0] out_ui_rshift_expr_FU_64_0_64_181_i4_fu___float64_divSRT4if_15199_30165;
  wire [56:0] out_ui_rshift_expr_FU_64_0_64_181_i5_fu___float64_divSRT4if_15199_31434;
  wire [56:0] out_ui_rshift_expr_FU_64_0_64_181_i6_fu___float64_divSRT4if_15199_31437;
  wire [58:0] out_ui_rshift_expr_FU_64_0_64_181_i7_fu___float64_divSRT4if_15199_31445;
  wire [58:0] out_ui_rshift_expr_FU_64_0_64_181_i8_fu___float64_divSRT4if_15199_31448;
  wire [57:0] out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_divSRT4if_15199_30169;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_divSRT4if_15199_30173;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_divSRT4if_15199_30220;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_divSRT4if_15199_31424;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_183_i2_fu___float64_divSRT4if_15199_31427;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_divSRT4if_15199_31412;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_divSRT4if_15199_31415;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_185_i0_fu___float64_divSRT4if_15199_15281;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_186_i0_fu___float64_divSRT4if_15199_15339;
  wire [63:0] out_ui_view_convert_expr_FU_76_i0_fu___float64_divSRT4if_15199_15474;
  
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(53), .BITSIZE_out1(53)) ASSIGN_UNSIGNED_FU_u_assign_0 (.out1(out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0), .in1(out_conv_out_reg_26_reg_26_55_53));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) ASSIGN_UNSIGNED_FU_u_assign_1 (.out1(out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1), .in1(out_const_0));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) ASSIGN_UNSIGNED_FU_u_assign_2 (.out1(out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2), .in1(out_const_0));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(5), .BITSIZE_out1(5)) ASSIGN_UNSIGNED_FU_u_assign_3 (.out1(out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3), .in1(out_const_24));
  MUX_GATE #(.BITSIZE_in1(55), .BITSIZE_in2(55), .BITSIZE_out1(55)) MUX_186_reg_26_0_0_0 (.out1(out_MUX_186_reg_26_0_0_0), .sel(selector_MUX_186_reg_26_0_0_0), .in1(out_conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0_53_55), .in2(out_conv_out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318_53_55));
  MUX_GATE #(.BITSIZE_in1(55), .BITSIZE_in2(55), .BITSIZE_out1(55)) MUX_186_reg_26_0_0_1 (.out1(out_MUX_186_reg_26_0_0_1), .sel(selector_MUX_186_reg_26_0_0_1), .in1(out_ui_lshift_expr_FU_64_0_64_156_i1_fu___float64_divSRT4if_15199_15371), .in2(out_MUX_186_reg_26_0_0_0));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_188_reg_28_0_0_0 (.out1(out_MUX_188_reg_28_0_0_0), .sel(selector_MUX_188_reg_28_0_0_0), .in1(out_conv_out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1_1_64), .in2(out_ui_lshift_expr_FU_64_0_64_155_i0_fu___float64_divSRT4if_15199_15354));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_189_reg_29_0_0_0 (.out1(out_MUX_189_reg_29_0_0_0), .sel(selector_MUX_189_reg_29_0_0_0), .in1(out_conv_out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2_1_64), .in2(out_ui_lshift_expr_FU_64_0_64_155_i1_fu___float64_divSRT4if_15199_15358));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_191_reg_30_0_0_0 (.out1(out_MUX_191_reg_30_0_0_0), .sel(selector_MUX_191_reg_30_0_0_0), .in1(out_conv_out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3_5_8), .in2(out_ui_minus_expr_FU_8_0_8_165_i0_fu___float64_divSRT4if_15199_15372));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_216_reg_53_0_0_0 (.out1(out_MUX_216_reg_53_0_0_0), .sel(selector_MUX_216_reg_53_0_0_0), .in1(out_reg_27_reg_27), .in2(out_ui_cond_expr_FU_64_64_64_64_146_i10_fu___float64_divSRT4if_15199_31394));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_216_reg_53_0_0_1 (.out1(out_MUX_216_reg_53_0_0_1), .sel(selector_MUX_216_reg_53_0_0_1), .in1(out_ui_lshift_expr_FU_64_0_64_158_i2_fu___float64_divSRT4if_15199_15471), .in2(out_MUX_216_reg_53_0_0_0));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(11), .value(11'b01111111110)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(13), .value(13'b0111111111111)) const_12 (.out1(out_const_12));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_13 (.out1(out_const_13));
  constant_value #(.BITSIZE_out1(2), .value(2'b10)) const_14 (.out1(out_const_14));
  constant_value #(.BITSIZE_out1(53), .value(53'b10000000000000000000000000000000000000000000000000000)) const_15 (.out1(out_const_15));
  constant_value #(.BITSIZE_out1(3), .value(3'b101)) const_16 (.out1(out_const_16));
  constant_value #(.BITSIZE_out1(4), .value(4'b1011)) const_17 (.out1(out_const_17));
  constant_value #(.BITSIZE_out1(2), .value(2'b11)) const_18 (.out1(out_const_18));
  constant_value #(.BITSIZE_out1(3), .value(3'b110)) const_19 (.out1(out_const_19));
  constant_value #(.BITSIZE_out1(3), .value(3'b010)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(4), .value(4'b1100)) const_20 (.out1(out_const_20));
  constant_value #(.BITSIZE_out1(6), .value(6'b110100)) const_21 (.out1(out_const_21));
  constant_value #(.BITSIZE_out1(6), .value(6'b110111)) const_22 (.out1(out_const_22));
  constant_value #(.BITSIZE_out1(3), .value(3'b111)) const_23 (.out1(out_const_23));
  constant_value #(.BITSIZE_out1(5), .value(5'b11100)) const_24 (.out1(out_const_24));
  constant_value #(.BITSIZE_out1(32), .value(32'b11110001111111111111111101101100)) const_25 (.out1(out_const_25));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_26 (.out1(out_const_26));
  constant_value #(.BITSIZE_out1(32), .value(32'b11111110000000001111111111010000)) const_27 (.out1(out_const_27));
  constant_value #(.BITSIZE_out1(63), .value(63'b111111111110000000000000000000000000000000000000000000000000000)) const_28 (.out1(out_const_28));
  constant_value #(.BITSIZE_out1(63), .value(63'b111111111111000000000000000000000000000000000000000000000000000)) const_29 (.out1(out_const_29));
  constant_value #(.BITSIZE_out1(4), .value(4'b0100)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_30 (.out1(out_const_30));
  constant_value #(.BITSIZE_out1(53), .value(53'b11111111111111111111111111111111111111111111111111111)) const_31 (.out1(out_const_31));
  constant_value #(.BITSIZE_out1(54), .value(54'b111111111111111111111111111111111111111111111111111111)) const_32 (.out1(out_const_32));
  constant_value #(.BITSIZE_out1(56), .value(56'b11111111111111111111111111111111111111111111111111111111)) const_33 (.out1(out_const_33));
  constant_value #(.BITSIZE_out1(58), .value(58'b1111111111111111111111111111111111111111111111111111111111)) const_34 (.out1(out_const_34));
  constant_value #(.BITSIZE_out1(3), .value(3'b011)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110011)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110110)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110111)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111111)) const_9 (.out1(out_const_9));
  UUdata_converter_FU #(.BITSIZE_in1(55), .BITSIZE_out1(53)) conv_out_reg_26_reg_26_55_53 (.out1(out_conv_out_reg_26_reg_26_55_53), .in1(out_reg_26_reg_26));
  UUdata_converter_FU #(.BITSIZE_in1(53), .BITSIZE_out1(55)) conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0_53_55 (.out1(out_conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0_53_55), .in1(out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_0));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) conv_out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1_1_64 (.out1(out_conv_out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1_1_64), .in1(out_u_assign_conn_obj_1_ASSIGN_UNSIGNED_FU_u_assign_1));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) conv_out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2_1_64 (.out1(out_conv_out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2_1_64), .in1(out_u_assign_conn_obj_2_ASSIGN_UNSIGNED_FU_u_assign_2));
  UUdata_converter_FU #(.BITSIZE_in1(5), .BITSIZE_out1(8)) conv_out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3_5_8 (.out1(out_conv_out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3_5_8), .in1(out_u_assign_conn_obj_3_ASSIGN_UNSIGNED_FU_u_assign_3));
  UUdata_converter_FU #(.BITSIZE_in1(53), .BITSIZE_out1(55)) conv_out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318_53_55 (.out1(out_conv_out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318_53_55), .in1(out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15204 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_divSRT4if_15199_15204), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15205 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_divSRT4if_15199_15205), .in1(in_port_b));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_divSRT4if_15199_15206 (.out1(out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_divSRT4if_15199_15206), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_divSRT4if_15199_15205), .in2(out_const_5));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15207 (.out1(out_ui_bit_and_expr_FU_1_0_1_110_i0_fu___float64_divSRT4if_15199_15207), .in1(out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_divSRT4if_15199_15206), .in2(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_divSRT4if_15199_15208 (.out1(out_ui_bit_and_expr_FU_64_0_64_118_i0_fu___float64_divSRT4if_15199_15208), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_divSRT4if_15199_15204), .in2(out_const_30));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_divSRT4if_15199_15209 (.out1(out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_divSRT4if_15199_15209), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_divSRT4if_15199_15204), .in2(out_const_6));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_15210 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_divSRT4if_15199_15210), .in1(out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_divSRT4if_15199_15209));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_15211 (.out1(out_bit_and_expr_FU_16_0_16_78_i0_fu___float64_divSRT4if_15199_15211), .in1(out_UIdata_converter_FU_4_i0_fu___float64_divSRT4if_15199_15210), .in2(out_const_11));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_15212 (.out1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_divSRT4if_15199_15212), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_divSRT4if_15199_15204), .in2(out_const_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_divSRT4if_15199_15213 (.out1(out_ui_bit_and_expr_FU_64_0_64_118_i1_fu___float64_divSRT4if_15199_15213), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_divSRT4if_15199_15205), .in2(out_const_30));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_divSRT4if_15199_15214 (.out1(out_ui_rshift_expr_FU_64_0_64_175_i1_fu___float64_divSRT4if_15199_15214), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_divSRT4if_15199_15205), .in2(out_const_6));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_15215 (.out1(out_UIdata_converter_FU_6_i0_fu___float64_divSRT4if_15199_15215), .in1(out_ui_rshift_expr_FU_64_0_64_175_i1_fu___float64_divSRT4if_15199_15214));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_15216 (.out1(out_bit_and_expr_FU_16_0_16_78_i1_fu___float64_divSRT4if_15199_15216), .in1(out_UIdata_converter_FU_6_i0_fu___float64_divSRT4if_15199_15215), .in2(out_const_11));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_15217 (.out1(out_ui_rshift_expr_FU_64_0_64_176_i1_fu___float64_divSRT4if_15199_15217), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_divSRT4if_15199_15205), .in2(out_const_9));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15218 (.out1(out_ui_bit_xor_expr_FU_1_1_1_143_i0_fu___float64_divSRT4if_15199_15218), .in1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_divSRT4if_15199_15212), .in2(out_ui_rshift_expr_FU_64_0_64_176_i1_fu___float64_divSRT4if_15199_15217));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15219 (.out1(out_eq_expr_FU_16_0_16_95_i0_fu___float64_divSRT4if_15199_15219), .in1(out_bit_and_expr_FU_16_0_16_78_i0_fu___float64_divSRT4if_15199_15211), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15220 (.out1(out_eq_expr_FU_16_0_16_95_i1_fu___float64_divSRT4if_15199_15220), .in1(out_bit_and_expr_FU_16_0_16_78_i1_fu___float64_divSRT4if_15199_15216), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15221 (.out1(out_eq_expr_FU_16_0_16_96_i0_fu___float64_divSRT4if_15199_15221), .in1(out_bit_and_expr_FU_16_0_16_78_i0_fu___float64_divSRT4if_15199_15211), .in2(out_const_11));
  ui_eq_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15222 (.out1(out_ui_eq_expr_FU_64_0_64_147_i0_fu___float64_divSRT4if_15199_15222), .in1(out_ui_bit_and_expr_FU_64_0_64_118_i0_fu___float64_divSRT4if_15199_15208), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15223 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i0_fu___float64_divSRT4if_15199_15223), .in1(out_eq_expr_FU_16_0_16_96_i0_fu___float64_divSRT4if_15199_15221), .in2(out_ui_eq_expr_FU_64_0_64_147_i0_fu___float64_divSRT4if_15199_15222));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15224 (.out1(out_ui_ne_expr_FU_64_0_64_167_i0_fu___float64_divSRT4if_15199_15224), .in1(out_ui_bit_and_expr_FU_64_0_64_118_i0_fu___float64_divSRT4if_15199_15208), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15225 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i1_fu___float64_divSRT4if_15199_15225), .in1(out_eq_expr_FU_16_0_16_96_i0_fu___float64_divSRT4if_15199_15221), .in2(out_ui_ne_expr_FU_64_0_64_167_i0_fu___float64_divSRT4if_15199_15224));
  ne_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15226 (.out1(out_ne_expr_FU_16_0_16_104_i0_fu___float64_divSRT4if_15199_15226), .in1(out_bit_and_expr_FU_16_0_16_78_i0_fu___float64_divSRT4if_15199_15211), .in2(out_const_11));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15227 (.out1(out_truth_not_expr_FU_1_1_107_i0_fu___float64_divSRT4if_15199_15227), .in1(out_eq_expr_FU_16_0_16_95_i0_fu___float64_divSRT4if_15199_15219));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15228 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i2_fu___float64_divSRT4if_15199_15228), .in1(out_truth_not_expr_FU_1_1_107_i0_fu___float64_divSRT4if_15199_15227), .in2(out_ne_expr_FU_16_0_16_104_i0_fu___float64_divSRT4if_15199_15226));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15229 (.out1(out_UIconvert_expr_FU_8_i0_fu___float64_divSRT4if_15199_15229), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i2_fu___float64_divSRT4if_15199_15228));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15230 (.out1(out_lshift_expr_FU_16_0_16_100_i0_fu___float64_divSRT4if_15199_15230), .in1(out_UIconvert_expr_FU_8_i0_fu___float64_divSRT4if_15199_15229), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15231 (.out1(out_IIconvert_expr_FU_9_i0_fu___float64_divSRT4if_15199_15231), .in1(out_lshift_expr_FU_16_0_16_100_i0_fu___float64_divSRT4if_15199_15230));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15232 (.out1(out_UIconvert_expr_FU_10_i0_fu___float64_divSRT4if_15199_15232), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i2_fu___float64_divSRT4if_15199_15228));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15233 (.out1(out_bit_ior_expr_FU_0_8_8_82_i0_fu___float64_divSRT4if_15199_15233), .in1(out_IIconvert_expr_FU_9_i0_fu___float64_divSRT4if_15199_15231), .in2(out_UIconvert_expr_FU_10_i0_fu___float64_divSRT4if_15199_15232));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15234 (.out1(out_IUdata_converter_FU_11_i0_fu___float64_divSRT4if_15199_15234), .in1(out_bit_ior_expr_FU_0_8_8_82_i0_fu___float64_divSRT4if_15199_15233));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15235 (.out1(out_ui_bit_and_expr_FU_1_0_1_111_i0_fu___float64_divSRT4if_15199_15235), .in1(out_IUdata_converter_FU_11_i0_fu___float64_divSRT4if_15199_15234), .in2(out_const_13));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15236 (.out1(out_UIconvert_expr_FU_12_i0_fu___float64_divSRT4if_15199_15236), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i0_fu___float64_divSRT4if_15199_15223));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15237 (.out1(out_lshift_expr_FU_16_0_16_100_i1_fu___float64_divSRT4if_15199_15237), .in1(out_UIconvert_expr_FU_12_i0_fu___float64_divSRT4if_15199_15236), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15238 (.out1(out_IIconvert_expr_FU_13_i0_fu___float64_divSRT4if_15199_15238), .in1(out_lshift_expr_FU_16_0_16_100_i1_fu___float64_divSRT4if_15199_15237));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15239 (.out1(out_UIconvert_expr_FU_14_i0_fu___float64_divSRT4if_15199_15239), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i0_fu___float64_divSRT4if_15199_15223));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15240 (.out1(out_bit_ior_expr_FU_0_8_8_83_i0_fu___float64_divSRT4if_15199_15240), .in1(out_IIconvert_expr_FU_13_i0_fu___float64_divSRT4if_15199_15238), .in2(out_UIconvert_expr_FU_14_i0_fu___float64_divSRT4if_15199_15239));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15241 (.out1(out_IUdata_converter_FU_15_i0_fu___float64_divSRT4if_15199_15241), .in1(out_bit_ior_expr_FU_0_8_8_83_i0_fu___float64_divSRT4if_15199_15240));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15242 (.out1(out_ui_bit_and_expr_FU_8_0_8_123_i0_fu___float64_divSRT4if_15199_15242), .in1(out_IUdata_converter_FU_15_i0_fu___float64_divSRT4if_15199_15241), .in2(out_const_14));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15243 (.out1(out_UIconvert_expr_FU_16_i0_fu___float64_divSRT4if_15199_15243), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i1_fu___float64_divSRT4if_15199_15225));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15244 (.out1(out_lshift_expr_FU_16_0_16_100_i2_fu___float64_divSRT4if_15199_15244), .in1(out_UIconvert_expr_FU_16_i0_fu___float64_divSRT4if_15199_15243), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15245 (.out1(out_IIconvert_expr_FU_17_i0_fu___float64_divSRT4if_15199_15245), .in1(out_lshift_expr_FU_16_0_16_100_i2_fu___float64_divSRT4if_15199_15244));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15246 (.out1(out_UIconvert_expr_FU_18_i0_fu___float64_divSRT4if_15199_15246), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i1_fu___float64_divSRT4if_15199_15225));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15247 (.out1(out_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_divSRT4if_15199_15247), .in1(out_IIconvert_expr_FU_17_i0_fu___float64_divSRT4if_15199_15245), .in2(out_UIconvert_expr_FU_18_i0_fu___float64_divSRT4if_15199_15246));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15248 (.out1(out_IUdata_converter_FU_19_i0_fu___float64_divSRT4if_15199_15248), .in1(out_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_divSRT4if_15199_15247));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15249 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i0_fu___float64_divSRT4if_15199_15249), .in1(out_ui_bit_and_expr_FU_8_0_8_123_i0_fu___float64_divSRT4if_15199_15242), .in2(out_IUdata_converter_FU_19_i0_fu___float64_divSRT4if_15199_15248));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15250 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i1_fu___float64_divSRT4if_15199_15250), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i0_fu___float64_divSRT4if_15199_15249), .in2(out_ui_bit_and_expr_FU_1_0_1_111_i0_fu___float64_divSRT4if_15199_15235));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15251 (.out1(out_eq_expr_FU_16_0_16_96_i1_fu___float64_divSRT4if_15199_15251), .in1(out_bit_and_expr_FU_16_0_16_78_i1_fu___float64_divSRT4if_15199_15216), .in2(out_const_11));
  ui_eq_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15252 (.out1(out_ui_eq_expr_FU_64_0_64_147_i1_fu___float64_divSRT4if_15199_15252), .in1(out_ui_bit_and_expr_FU_64_0_64_118_i1_fu___float64_divSRT4if_15199_15213), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15253 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i3_fu___float64_divSRT4if_15199_15253), .in1(out_eq_expr_FU_16_0_16_96_i1_fu___float64_divSRT4if_15199_15251), .in2(out_ui_eq_expr_FU_64_0_64_147_i1_fu___float64_divSRT4if_15199_15252));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15254 (.out1(out_ui_ne_expr_FU_64_0_64_167_i1_fu___float64_divSRT4if_15199_15254), .in1(out_ui_bit_and_expr_FU_64_0_64_118_i1_fu___float64_divSRT4if_15199_15213), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15255 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i4_fu___float64_divSRT4if_15199_15255), .in1(out_eq_expr_FU_16_0_16_96_i1_fu___float64_divSRT4if_15199_15251), .in2(out_ui_ne_expr_FU_64_0_64_167_i1_fu___float64_divSRT4if_15199_15254));
  ne_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15256 (.out1(out_ne_expr_FU_16_0_16_104_i1_fu___float64_divSRT4if_15199_15256), .in1(out_bit_and_expr_FU_16_0_16_78_i1_fu___float64_divSRT4if_15199_15216), .in2(out_const_11));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15257 (.out1(out_truth_not_expr_FU_1_1_107_i1_fu___float64_divSRT4if_15199_15257), .in1(out_eq_expr_FU_16_0_16_95_i1_fu___float64_divSRT4if_15199_15220));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15258 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i5_fu___float64_divSRT4if_15199_15258), .in1(out_truth_not_expr_FU_1_1_107_i1_fu___float64_divSRT4if_15199_15257), .in2(out_ne_expr_FU_16_0_16_104_i1_fu___float64_divSRT4if_15199_15256));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15259 (.out1(out_UIconvert_expr_FU_20_i0_fu___float64_divSRT4if_15199_15259), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i5_fu___float64_divSRT4if_15199_15258));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15260 (.out1(out_lshift_expr_FU_16_0_16_100_i3_fu___float64_divSRT4if_15199_15260), .in1(out_UIconvert_expr_FU_20_i0_fu___float64_divSRT4if_15199_15259), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15261 (.out1(out_IIconvert_expr_FU_21_i0_fu___float64_divSRT4if_15199_15261), .in1(out_lshift_expr_FU_16_0_16_100_i3_fu___float64_divSRT4if_15199_15260));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15262 (.out1(out_UIconvert_expr_FU_22_i0_fu___float64_divSRT4if_15199_15262), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i5_fu___float64_divSRT4if_15199_15258));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15263 (.out1(out_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_divSRT4if_15199_15263), .in1(out_IIconvert_expr_FU_21_i0_fu___float64_divSRT4if_15199_15261), .in2(out_UIconvert_expr_FU_22_i0_fu___float64_divSRT4if_15199_15262));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15264 (.out1(out_IUdata_converter_FU_23_i0_fu___float64_divSRT4if_15199_15264), .in1(out_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_divSRT4if_15199_15263));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15265 (.out1(out_ui_bit_and_expr_FU_1_0_1_111_i1_fu___float64_divSRT4if_15199_15265), .in1(out_IUdata_converter_FU_23_i0_fu___float64_divSRT4if_15199_15264), .in2(out_const_13));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15266 (.out1(out_UIconvert_expr_FU_24_i0_fu___float64_divSRT4if_15199_15266), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i3_fu___float64_divSRT4if_15199_15253));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15267 (.out1(out_lshift_expr_FU_16_0_16_100_i4_fu___float64_divSRT4if_15199_15267), .in1(out_UIconvert_expr_FU_24_i0_fu___float64_divSRT4if_15199_15266), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15268 (.out1(out_IIconvert_expr_FU_25_i0_fu___float64_divSRT4if_15199_15268), .in1(out_lshift_expr_FU_16_0_16_100_i4_fu___float64_divSRT4if_15199_15267));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15269 (.out1(out_UIconvert_expr_FU_26_i0_fu___float64_divSRT4if_15199_15269), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i3_fu___float64_divSRT4if_15199_15253));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15270 (.out1(out_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_divSRT4if_15199_15270), .in1(out_IIconvert_expr_FU_25_i0_fu___float64_divSRT4if_15199_15268), .in2(out_UIconvert_expr_FU_26_i0_fu___float64_divSRT4if_15199_15269));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15271 (.out1(out_IUdata_converter_FU_27_i0_fu___float64_divSRT4if_15199_15271), .in1(out_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_divSRT4if_15199_15270));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15272 (.out1(out_ui_bit_and_expr_FU_8_0_8_123_i1_fu___float64_divSRT4if_15199_15272), .in1(out_IUdata_converter_FU_27_i0_fu___float64_divSRT4if_15199_15271), .in2(out_const_14));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15273 (.out1(out_UIconvert_expr_FU_28_i0_fu___float64_divSRT4if_15199_15273), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i4_fu___float64_divSRT4if_15199_15255));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15274 (.out1(out_lshift_expr_FU_16_0_16_100_i5_fu___float64_divSRT4if_15199_15274), .in1(out_UIconvert_expr_FU_28_i0_fu___float64_divSRT4if_15199_15273), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15275 (.out1(out_IIconvert_expr_FU_29_i0_fu___float64_divSRT4if_15199_15275), .in1(out_lshift_expr_FU_16_0_16_100_i5_fu___float64_divSRT4if_15199_15274));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15276 (.out1(out_UIconvert_expr_FU_30_i0_fu___float64_divSRT4if_15199_15276), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i4_fu___float64_divSRT4if_15199_15255));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15277 (.out1(out_bit_ior_expr_FU_0_8_8_87_i0_fu___float64_divSRT4if_15199_15277), .in1(out_IIconvert_expr_FU_29_i0_fu___float64_divSRT4if_15199_15275), .in2(out_UIconvert_expr_FU_30_i0_fu___float64_divSRT4if_15199_15276));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15278 (.out1(out_IUdata_converter_FU_31_i0_fu___float64_divSRT4if_15199_15278), .in1(out_bit_ior_expr_FU_0_8_8_87_i0_fu___float64_divSRT4if_15199_15277));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15279 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i2_fu___float64_divSRT4if_15199_15279), .in1(out_ui_bit_and_expr_FU_8_0_8_123_i1_fu___float64_divSRT4if_15199_15272), .in2(out_IUdata_converter_FU_31_i0_fu___float64_divSRT4if_15199_15278));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15280 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i3_fu___float64_divSRT4if_15199_15280), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i2_fu___float64_divSRT4if_15199_15279), .in2(out_ui_bit_and_expr_FU_1_0_1_111_i1_fu___float64_divSRT4if_15199_15265));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(8)) fu___float64_divSRT4if_15199_15281 (.out1(out_ui_rshift_expr_FU_8_0_8_185_i0_fu___float64_divSRT4if_15199_15281), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i1_fu___float64_divSRT4if_15199_15250), .in2(out_const_1));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(8)) fu___float64_divSRT4if_15199_15282 (.out1(out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i3_fu___float64_divSRT4if_15199_15280), .in2(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15283 (.out1(out_ui_bit_xor_expr_FU_1_0_1_142_i0_fu___float64_divSRT4if_15199_15283), .in1(out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282), .in2(out_const_13));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15284 (.out1(out_UIdata_converter_FU_32_i0_fu___float64_divSRT4if_15199_15284), .in1(out_ui_bit_xor_expr_FU_1_0_1_142_i0_fu___float64_divSRT4if_15199_15283));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15285 (.out1(out_ui_bit_and_expr_FU_1_0_1_111_i2_fu___float64_divSRT4if_15199_15285), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i3_fu___float64_divSRT4if_15199_15280), .in2(out_const_13));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15286 (.out1(out_UIdata_converter_FU_33_i0_fu___float64_divSRT4if_15199_15286), .in1(out_ui_bit_and_expr_FU_1_0_1_111_i2_fu___float64_divSRT4if_15199_15285));
  bit_not_expr_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15287 (.out1(out_bit_not_expr_FU_8_8_94_i0_fu___float64_divSRT4if_15199_15287), .in1(out_UIdata_converter_FU_33_i0_fu___float64_divSRT4if_15199_15286));
  bit_and_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15288 (.out1(out_bit_and_expr_FU_8_8_8_81_i0_fu___float64_divSRT4if_15199_15288), .in1(out_UIdata_converter_FU_32_i0_fu___float64_divSRT4if_15199_15284), .in2(out_bit_not_expr_FU_8_8_94_i0_fu___float64_divSRT4if_15199_15287));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15289 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i6_fu___float64_divSRT4if_15199_15289), .in1(out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282), .in2(out_ui_bit_ior_expr_FU_8_8_8_140_i3_fu___float64_divSRT4if_15199_15280));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15290 (.out1(out_ui_bit_ior_expr_FU_1_1_1_135_i0_fu___float64_divSRT4if_15199_15290), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i6_fu___float64_divSRT4if_15199_15289), .in2(out_ui_rshift_expr_FU_8_0_8_185_i0_fu___float64_divSRT4if_15199_15281));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15291 (.out1(out_UIdata_converter_FU_34_i0_fu___float64_divSRT4if_15199_15291), .in1(out_ui_bit_ior_expr_FU_1_1_1_135_i0_fu___float64_divSRT4if_15199_15290));
  bit_ior_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15292 (.out1(out_bit_ior_expr_FU_8_8_8_93_i0_fu___float64_divSRT4if_15199_15292), .in1(out_reg_1_reg_1), .in2(out_reg_2_reg_2));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15293 (.out1(out_lshift_expr_FU_16_0_16_100_i6_fu___float64_divSRT4if_15199_15293), .in1(out_bit_ior_expr_FU_8_8_8_93_i0_fu___float64_divSRT4if_15199_15292), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15294 (.out1(out_IIconvert_expr_FU_35_i0_fu___float64_divSRT4if_15199_15294), .in1(out_lshift_expr_FU_16_0_16_100_i6_fu___float64_divSRT4if_15199_15293));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15295 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i7_fu___float64_divSRT4if_15199_15295), .in1(out_ui_rshift_expr_FU_8_0_8_185_i0_fu___float64_divSRT4if_15199_15281), .in2(out_ui_bit_ior_expr_FU_8_8_8_140_i1_fu___float64_divSRT4if_15199_15250));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15296 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i8_fu___float64_divSRT4if_15199_15296), .in1(out_ui_rshift_expr_FU_8_0_8_185_i0_fu___float64_divSRT4if_15199_15281), .in2(out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15297 (.out1(out_ui_bit_ior_expr_FU_1_1_1_135_i1_fu___float64_divSRT4if_15199_15297), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i8_fu___float64_divSRT4if_15199_15296), .in2(out_ui_bit_and_expr_FU_1_1_1_117_i7_fu___float64_divSRT4if_15199_15295));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15298 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i4_fu___float64_divSRT4if_15199_15298), .in1(out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282), .in2(out_ui_bit_ior_expr_FU_8_8_8_140_i1_fu___float64_divSRT4if_15199_15250));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15299 (.out1(out_ui_bit_and_expr_FU_8_8_8_125_i0_fu___float64_divSRT4if_15199_15299), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i4_fu___float64_divSRT4if_15199_15298), .in2(out_ui_bit_ior_expr_FU_8_8_8_140_i3_fu___float64_divSRT4if_15199_15280));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15300 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i5_fu___float64_divSRT4if_15199_15300), .in1(out_ui_bit_ior_expr_FU_1_1_1_135_i1_fu___float64_divSRT4if_15199_15297), .in2(out_ui_bit_and_expr_FU_8_8_8_125_i0_fu___float64_divSRT4if_15199_15299));
  UIdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15301 (.out1(out_UIdata_converter_FU_36_i0_fu___float64_divSRT4if_15199_15301), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i5_fu___float64_divSRT4if_15199_15300));
  bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15302 (.out1(out_bit_and_expr_FU_8_0_8_80_i0_fu___float64_divSRT4if_15199_15302), .in1(out_UIdata_converter_FU_36_i0_fu___float64_divSRT4if_15199_15301), .in2(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15303 (.out1(out_ui_bit_xor_expr_FU_1_0_1_142_i1_fu___float64_divSRT4if_15199_15303), .in1(out_ui_rshift_expr_FU_8_0_8_185_i0_fu___float64_divSRT4if_15199_15281), .in2(out_const_13));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15305 (.out1(out_UIdata_converter_FU_37_i0_fu___float64_divSRT4if_15199_15305), .in1(out_ui_bit_xor_expr_FU_1_0_1_142_i1_fu___float64_divSRT4if_15199_15303));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15306 (.out1(out_ui_bit_and_expr_FU_1_0_1_112_i0_fu___float64_divSRT4if_15199_15306), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i1_fu___float64_divSRT4if_15199_15250), .in2(out_const_13));
  ui_bit_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15307 (.out1(out_ui_bit_not_expr_FU_1_1_141_i0_fu___float64_divSRT4if_15199_15307), .in1(out_ui_bit_and_expr_FU_1_0_1_112_i0_fu___float64_divSRT4if_15199_15306));
  UIdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15308 (.out1(out_UIdata_converter_FU_38_i0_fu___float64_divSRT4if_15199_15308), .in1(out_ui_bit_not_expr_FU_1_1_141_i0_fu___float64_divSRT4if_15199_15307));
  bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15309 (.out1(out_bit_and_expr_FU_8_8_8_81_i1_fu___float64_divSRT4if_15199_15309), .in1(out_UIdata_converter_FU_37_i0_fu___float64_divSRT4if_15199_15305), .in2(out_UIdata_converter_FU_38_i0_fu___float64_divSRT4if_15199_15308));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15310 (.out1(out_UIdata_converter_FU_39_i0_fu___float64_divSRT4if_15199_15310), .in1(out_ui_rshift_expr_FU_8_0_8_185_i1_fu___float64_divSRT4if_15199_15282));
  bit_not_expr_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15311 (.out1(out_bit_not_expr_FU_8_8_94_i1_fu___float64_divSRT4if_15199_15311), .in1(out_UIdata_converter_FU_39_i0_fu___float64_divSRT4if_15199_15310));
  ui_bit_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15312 (.out1(out_ui_bit_not_expr_FU_1_1_141_i1_fu___float64_divSRT4if_15199_15312), .in1(out_ui_bit_and_expr_FU_1_0_1_111_i2_fu___float64_divSRT4if_15199_15285));
  UIdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15313 (.out1(out_UIdata_converter_FU_40_i0_fu___float64_divSRT4if_15199_15313), .in1(out_ui_bit_not_expr_FU_1_1_141_i1_fu___float64_divSRT4if_15199_15312));
  bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15314 (.out1(out_bit_and_expr_FU_8_8_8_81_i2_fu___float64_divSRT4if_15199_15314), .in1(out_UIdata_converter_FU_40_i0_fu___float64_divSRT4if_15199_15313), .in2(out_bit_not_expr_FU_8_8_94_i1_fu___float64_divSRT4if_15199_15311));
  bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15315 (.out1(out_bit_and_expr_FU_8_8_8_81_i3_fu___float64_divSRT4if_15199_15315), .in1(out_reg_5_reg_5), .in2(out_reg_4_reg_4));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15316 (.out1(out_bit_ior_expr_FU_8_8_8_93_i1_fu___float64_divSRT4if_15199_15316), .in1(out_bit_and_expr_FU_8_8_8_81_i3_fu___float64_divSRT4if_15199_15315), .in2(out_reg_3_reg_3));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(3), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15317 (.out1(out_bit_ior_expr_FU_0_8_8_88_i0_fu___float64_divSRT4if_15199_15317), .in1(out_bit_ior_expr_FU_8_8_8_93_i1_fu___float64_divSRT4if_15199_15316), .in2(out_IIconvert_expr_FU_35_i0_fu___float64_divSRT4if_15199_15294));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_divSRT4if_15199_15318 (.out1(out_ui_bit_ior_expr_FU_64_0_64_136_i0_fu___float64_divSRT4if_15199_15318), .in1(out_ui_bit_and_expr_FU_64_0_64_118_i0_fu___float64_divSRT4if_15199_15208), .in2(out_const_15));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_divSRT4if_15199_15319 (.out1(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319), .in1(out_ui_bit_and_expr_FU_64_0_64_118_i1_fu___float64_divSRT4if_15199_15213), .in2(out_const_15));
  ui_negate_expr_FU #(.BITSIZE_in1(53), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_15320 (.out1(out_ui_negate_expr_FU_64_64_170_i0_fu___float64_divSRT4if_15199_15320), .in1(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(1), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_divSRT4if_15199_15321 (.out1(out_ui_lshift_expr_FU_64_0_64_154_i0_fu___float64_divSRT4if_15199_15321), .in1(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319), .in2(out_const_13));
  ui_negate_expr_FU #(.BITSIZE_in1(54), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_15322 (.out1(out_ui_negate_expr_FU_64_64_170_i1_fu___float64_divSRT4if_15199_15322), .in1(out_ui_lshift_expr_FU_64_0_64_154_i0_fu___float64_divSRT4if_15199_15321));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(55), .OFFSET_PARAMETER(1)) fu___float64_divSRT4if_15199_15323 (.out1(out_ui_bit_ior_concat_expr_FU_126_i0_fu___float64_divSRT4if_15199_15323), .in1(out_ui_lshift_expr_FU_64_0_64_154_i1_fu___float64_divSRT4if_15199_30140), .in2(out_ui_bit_and_expr_FU_1_0_1_116_i0_fu___float64_divSRT4if_15199_30144), .in3(out_const_13));
  ui_negate_expr_FU #(.BITSIZE_in1(55), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_15324 (.out1(out_ui_negate_expr_FU_64_64_170_i2_fu___float64_divSRT4if_15199_15324), .in1(out_reg_10_reg_10));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15325 (.out1(out_UUdata_converter_FU_41_i0_fu___float64_divSRT4if_15199_15325), .in1(out_ui_bit_and_expr_FU_1_0_1_110_i0_fu___float64_divSRT4if_15199_15207));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_divSRT4if_15199_15330 (.out1(out_ui_rshift_expr_FU_64_0_64_174_i1_fu___float64_divSRT4if_15199_15330), .in1(out_reg_26_reg_26), .in2(out_const_5));
  UUconvert_expr_FU #(.BITSIZE_in1(4), .BITSIZE_out1(4)) fu___float64_divSRT4if_15199_15331 (.out1(out_UUconvert_expr_FU_54_i0_fu___float64_divSRT4if_15199_15331), .in1(out_ui_rshift_expr_FU_64_0_64_174_i1_fu___float64_divSRT4if_15199_15330));
  ui_lshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(5), .PRECISION(8)) fu___float64_divSRT4if_15199_15332 (.out1(out_ui_lshift_expr_FU_8_0_8_162_i0_fu___float64_divSRT4if_15199_15332), .in1(out_UUconvert_expr_FU_54_i0_fu___float64_divSRT4if_15199_15331), .in2(out_const_13));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(1), .BITSIZE_out1(5)) fu___float64_divSRT4if_15199_15333 (.out1(out_ui_bit_ior_expr_FU_0_8_8_134_i0_fu___float64_divSRT4if_15199_15333), .in1(out_ui_lshift_expr_FU_8_0_8_162_i0_fu___float64_divSRT4if_15199_15332), .in2(out_reg_11_reg_11));
  UIdata_converter_FU #(.BITSIZE_in1(5), .BITSIZE_out1(6)) fu___float64_divSRT4if_15199_15334 (.out1(out_UIdata_converter_FU_55_i0_fu___float64_divSRT4if_15199_15334), .in1(out_ui_bit_ior_expr_FU_0_8_8_134_i0_fu___float64_divSRT4if_15199_15333));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(2), .PRECISION(32)) fu___float64_divSRT4if_15199_15335 (.out1(out_ui_rshift_expr_FU_0_32_32_172_i0_fu___float64_divSRT4if_15199_15335), .in1(out_const_25), .in2(out_UIdata_converter_FU_55_i0_fu___float64_divSRT4if_15199_15334));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15336 (.out1(out_ui_bit_and_expr_FU_1_0_1_113_i0_fu___float64_divSRT4if_15199_15336), .in1(out_ui_rshift_expr_FU_0_32_32_172_i0_fu___float64_divSRT4if_15199_15335), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(2), .PRECISION(32)) fu___float64_divSRT4if_15199_15337 (.out1(out_ui_rshift_expr_FU_0_32_32_173_i0_fu___float64_divSRT4if_15199_15337), .in1(out_const_27), .in2(out_UIdata_converter_FU_55_i0_fu___float64_divSRT4if_15199_15334));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15338 (.out1(out_ui_bit_and_expr_FU_1_0_1_113_i1_fu___float64_divSRT4if_15199_15338), .in1(out_ui_rshift_expr_FU_0_32_32_173_i0_fu___float64_divSRT4if_15199_15337), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(1), .PRECISION(8)) fu___float64_divSRT4if_15199_15339 (.out1(out_ui_rshift_expr_FU_8_0_8_186_i0_fu___float64_divSRT4if_15199_15339), .in1(out_ui_bit_ior_expr_FU_0_8_8_134_i0_fu___float64_divSRT4if_15199_15333), .in2(out_const_3));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15340 (.out1(out_UIconvert_expr_FU_56_i0_fu___float64_divSRT4if_15199_15340), .in1(out_ui_rshift_expr_FU_8_0_8_186_i0_fu___float64_divSRT4if_15199_15339));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(3), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_divSRT4if_15199_15341 (.out1(out_lshift_expr_FU_16_0_16_101_i0_fu___float64_divSRT4if_15199_15341), .in1(out_UIconvert_expr_FU_56_i0_fu___float64_divSRT4if_15199_15340), .in2(out_const_2));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(4)) fu___float64_divSRT4if_15199_15342 (.out1(out_IIconvert_expr_FU_57_i0_fu___float64_divSRT4if_15199_15342), .in1(out_lshift_expr_FU_16_0_16_101_i0_fu___float64_divSRT4if_15199_15341));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15343 (.out1(out_UIconvert_expr_FU_58_i0_fu___float64_divSRT4if_15199_15343), .in1(out_ui_bit_and_expr_FU_1_0_1_113_i1_fu___float64_divSRT4if_15199_15338));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(3), .PRECISION(32)) fu___float64_divSRT4if_15199_15344 (.out1(out_lshift_expr_FU_8_0_8_102_i0_fu___float64_divSRT4if_15199_15344), .in1(out_UIconvert_expr_FU_58_i0_fu___float64_divSRT4if_15199_15343), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(3), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15345 (.out1(out_IIconvert_expr_FU_59_i0_fu___float64_divSRT4if_15199_15345), .in1(out_lshift_expr_FU_8_0_8_102_i0_fu___float64_divSRT4if_15199_15344));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15346 (.out1(out_UIconvert_expr_FU_60_i0_fu___float64_divSRT4if_15199_15346), .in1(out_ui_bit_and_expr_FU_1_0_1_113_i0_fu___float64_divSRT4if_15199_15336));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_divSRT4if_15199_15347 (.out1(out_bit_ior_expr_FU_0_8_8_89_i0_fu___float64_divSRT4if_15199_15347), .in1(out_UIconvert_expr_FU_60_i0_fu___float64_divSRT4if_15199_15346), .in2(out_IIconvert_expr_FU_57_i0_fu___float64_divSRT4if_15199_15342));
  bit_ior_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(3), .BITSIZE_out1(4)) fu___float64_divSRT4if_15199_15348 (.out1(out_bit_ior_expr_FU_0_8_8_90_i0_fu___float64_divSRT4if_15199_15348), .in1(out_bit_ior_expr_FU_0_8_8_89_i0_fu___float64_divSRT4if_15199_15347), .in2(out_IIconvert_expr_FU_59_i0_fu___float64_divSRT4if_15199_15345));
  IUdata_converter_FU #(.BITSIZE_in1(4), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15349 (.out1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in1(out_bit_ior_expr_FU_0_8_8_90_i0_fu___float64_divSRT4if_15199_15348));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15350 (.out1(out_UIconvert_expr_FU_62_i0_fu___float64_divSRT4if_15199_15350), .in1(out_ui_bit_and_expr_FU_1_0_1_113_i0_fu___float64_divSRT4if_15199_15336));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_divSRT4if_15199_15351 (.out1(out_bit_ior_expr_FU_0_8_8_91_i0_fu___float64_divSRT4if_15199_15351), .in1(out_lshift_expr_FU_8_0_8_102_i0_fu___float64_divSRT4if_15199_15344), .in2(out_UIconvert_expr_FU_62_i0_fu___float64_divSRT4if_15199_15350));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15352 (.out1(out_IUdata_converter_FU_63_i0_fu___float64_divSRT4if_15199_15352), .in1(out_bit_ior_expr_FU_0_8_8_91_i0_fu___float64_divSRT4if_15199_15351));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(62)) fu___float64_divSRT4if_15199_15353 (.out1(out_ui_bit_ior_expr_FU_0_64_64_129_i0_fu___float64_divSRT4if_15199_15353), .in1(out_reg_28_reg_28), .in2(out_IUdata_converter_FU_63_i0_fu___float64_divSRT4if_15199_15352));
  ui_lshift_expr_FU #(.BITSIZE_in1(62), .BITSIZE_in2(3), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_15354 (.out1(out_ui_lshift_expr_FU_64_0_64_155_i0_fu___float64_divSRT4if_15199_15354), .in1(out_ui_bit_ior_expr_FU_0_64_64_129_i0_fu___float64_divSRT4if_15199_15353), .in2(out_const_2));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(3), .PRECISION(32)) fu___float64_divSRT4if_15199_15355 (.out1(out_lshift_expr_FU_8_0_8_102_i1_fu___float64_divSRT4if_15199_15355), .in1(out_UIconvert_expr_FU_56_i0_fu___float64_divSRT4if_15199_15340), .in2(out_const_1));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15356 (.out1(out_IUdata_converter_FU_64_i0_fu___float64_divSRT4if_15199_15356), .in1(out_lshift_expr_FU_8_0_8_102_i1_fu___float64_divSRT4if_15199_15355));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(62)) fu___float64_divSRT4if_15199_15357 (.out1(out_ui_bit_ior_expr_FU_0_64_64_130_i0_fu___float64_divSRT4if_15199_15357), .in1(out_reg_29_reg_29), .in2(out_IUdata_converter_FU_64_i0_fu___float64_divSRT4if_15199_15356));
  ui_lshift_expr_FU #(.BITSIZE_in1(62), .BITSIZE_in2(3), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_15358 (.out1(out_ui_lshift_expr_FU_64_0_64_155_i1_fu___float64_divSRT4if_15199_15358), .in1(out_ui_bit_ior_expr_FU_0_64_64_130_i0_fu___float64_divSRT4if_15199_15357), .in2(out_const_2));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(2), .BITSIZE_out1(56), .PRECISION(64)) fu___float64_divSRT4if_15199_15368 (.out1(out_ui_lshift_expr_FU_64_0_64_156_i0_fu___float64_divSRT4if_15199_15368), .in1(out_reg_26_reg_26), .in2(out_const_1));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(55), .OFFSET_PARAMETER(1)) fu___float64_divSRT4if_15199_15369 (.out1(out_ui_bit_ior_concat_expr_FU_126_i1_fu___float64_divSRT4if_15199_15369), .in1(out_ui_lshift_expr_FU_64_0_64_154_i2_fu___float64_divSRT4if_15199_30158), .in2(out_ui_bit_and_expr_FU_1_0_1_116_i1_fu___float64_divSRT4if_15199_30161), .in3(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(54), .BITSIZE_out1(54)) fu___float64_divSRT4if_15199_15370 (.out1(out_ui_bit_and_expr_FU_64_0_64_119_i0_fu___float64_divSRT4if_15199_15370), .in1(out_ui_bit_ior_concat_expr_FU_126_i1_fu___float64_divSRT4if_15199_15369), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(2), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_divSRT4if_15199_15371 (.out1(out_ui_lshift_expr_FU_64_0_64_156_i1_fu___float64_divSRT4if_15199_15371), .in1(out_reg_36_reg_36), .in2(out_const_1));
  ui_minus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(8)) fu___float64_divSRT4if_15199_15372 (.out1(out_ui_minus_expr_FU_8_0_8_165_i0_fu___float64_divSRT4if_15199_15372), .in1(out_reg_30_reg_30), .in2(out_const_13));
  read_cond_FU #(.BITSIZE_in1(1)) fu___float64_divSRT4if_15199_15373 (.out1(out_read_cond_FU_65_i0_fu___float64_divSRT4if_15199_15373), .in1(out_reg_33_reg_33));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(60)) fu___float64_divSRT4if_15199_15380 (.out1(out_ui_bit_ior_expr_FU_64_0_64_137_i0_fu___float64_divSRT4if_15199_15380), .in1(out_reg_28_reg_28), .in2(out_const_14));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_15381 (.out1(out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_divSRT4if_15199_15381), .in1(out_reg_37_reg_37), .in2(out_const_7));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_divSRT4if_15199_15382 (.out1(out_ui_lshift_expr_FU_8_0_8_163_i0_fu___float64_divSRT4if_15199_15382), .in1(out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_divSRT4if_15199_15381), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(64), .BITSIZE_out1(58)) fu___float64_divSRT4if_15199_15383 (.out1(out_ui_bit_ior_expr_FU_0_64_64_131_i0_fu___float64_divSRT4if_15199_15383), .in1(out_ui_lshift_expr_FU_8_0_8_163_i0_fu___float64_divSRT4if_15199_15382), .in2(out_reg_29_reg_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(58), .BITSIZE_in2(2), .BITSIZE_out1(59), .PRECISION(64)) fu___float64_divSRT4if_15199_15386 (.out1(out_ui_lshift_expr_FU_64_0_64_156_i2_fu___float64_divSRT4if_15199_15386), .in1(out_ui_lshift_expr_FU_64_0_64_154_i3_fu___float64_divSRT4if_15199_31442), .in2(out_const_1));
  ui_bit_and_expr_FU #(.BITSIZE_in1(59), .BITSIZE_in2(58), .BITSIZE_out1(57)) fu___float64_divSRT4if_15199_15387 (.out1(out_ui_bit_and_expr_FU_64_0_64_120_i0_fu___float64_divSRT4if_15199_15387), .in1(out_ui_lshift_expr_FU_64_0_64_156_i2_fu___float64_divSRT4if_15199_15386), .in2(out_const_34));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(59), .BITSIZE_in2(2), .BITSIZE_in3(2), .BITSIZE_out1(59), .OFFSET_PARAMETER(2)) fu___float64_divSRT4if_15199_15388 (.out1(out_ui_bit_ior_concat_expr_FU_127_i0_fu___float64_divSRT4if_15199_15388), .in1(out_ui_lshift_expr_FU_64_0_64_159_i0_fu___float64_divSRT4if_15199_30179), .in2(out_reg_40_reg_40), .in3(out_const_14));
  ui_rshift_expr_FU #(.BITSIZE_in1(59), .BITSIZE_in2(2), .BITSIZE_out1(58), .PRECISION(64)) fu___float64_divSRT4if_15199_15389 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_divSRT4if_15199_15389), .in1(out_ui_bit_ior_concat_expr_FU_127_i0_fu___float64_divSRT4if_15199_15388), .in2(out_const_1));
  ui_bit_and_expr_FU #(.BITSIZE_in1(58), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15390 (.out1(out_ui_bit_and_expr_FU_1_0_1_114_i0_fu___float64_divSRT4if_15199_15390), .in1(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_divSRT4if_15199_15389), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(58), .BITSIZE_in2(2), .BITSIZE_out1(57), .PRECISION(64)) fu___float64_divSRT4if_15199_15391 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i1_fu___float64_divSRT4if_15199_15391), .in1(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_divSRT4if_15199_15389), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(1), .BITSIZE_out1(57)) fu___float64_divSRT4if_15199_15392 (.out1(out_ui_bit_ior_expr_FU_64_64_64_139_i0_fu___float64_divSRT4if_15199_15392), .in1(out_ui_rshift_expr_FU_64_0_64_178_i1_fu___float64_divSRT4if_15199_15391), .in2(out_ui_bit_and_expr_FU_1_0_1_114_i0_fu___float64_divSRT4if_15199_15390));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_divSRT4if_15199_15393 (.out1(out_ui_bit_and_expr_FU_64_0_64_121_i0_fu___float64_divSRT4if_15199_15393), .in1(out_ui_bit_ior_expr_FU_64_64_64_139_i0_fu___float64_divSRT4if_15199_15392), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_15394 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_divSRT4if_15199_15394), .in1(out_ui_bit_and_expr_FU_64_0_64_121_i0_fu___float64_divSRT4if_15199_15393), .in2(out_const_8));
  ui_rshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(3), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_divSRT4if_15199_15396 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_divSRT4if_15199_15396), .in1(out_ui_bit_and_expr_FU_64_0_64_121_i0_fu___float64_divSRT4if_15199_15393), .in2(out_const_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_divSRT4if_15199_15397 (.out1(out_ui_bit_and_expr_FU_64_0_64_122_i0_fu___float64_divSRT4if_15199_15397), .in1(out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_divSRT4if_15199_15396), .in2(out_const_31));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(2), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_divSRT4if_15199_15398 (.out1(out_ui_lshift_expr_FU_64_0_64_156_i3_fu___float64_divSRT4if_15199_15398), .in1(out_ui_bit_and_expr_FU_64_0_64_122_i0_fu___float64_divSRT4if_15199_15397), .in2(out_const_1));
  ui_rshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_divSRT4if_15199_15399 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i2_fu___float64_divSRT4if_15199_15399), .in1(out_ui_bit_and_expr_FU_64_0_64_121_i0_fu___float64_divSRT4if_15199_15393), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(57), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15400 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i6_fu___float64_divSRT4if_15199_15400), .in1(out_ui_rshift_expr_FU_64_0_64_178_i2_fu___float64_divSRT4if_15199_15399), .in2(out_ui_bit_ior_expr_FU_64_64_64_139_i0_fu___float64_divSRT4if_15199_15392));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15401 (.out1(out_ui_bit_and_expr_FU_1_0_1_115_i0_fu___float64_divSRT4if_15199_15401), .in1(out_ui_bit_ior_expr_FU_8_8_8_140_i6_fu___float64_divSRT4if_15199_15400), .in2(out_const_13));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(54), .BITSIZE_out1(54)) fu___float64_divSRT4if_15199_15402 (.out1(out_ui_bit_ior_expr_FU_0_64_64_132_i0_fu___float64_divSRT4if_15199_15402), .in1(out_ui_bit_and_expr_FU_1_0_1_115_i0_fu___float64_divSRT4if_15199_15401), .in2(out_ui_lshift_expr_FU_64_0_64_156_i3_fu___float64_divSRT4if_15199_15398));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(54), .BITSIZE_out1(54)) fu___float64_divSRT4if_15199_15403 (.out1(out_ui_bit_and_expr_FU_64_0_64_119_i1_fu___float64_divSRT4if_15199_15403), .in1(out_ui_bit_ior_expr_FU_64_64_64_139_i0_fu___float64_divSRT4if_15199_15392), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(3), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_divSRT4if_15199_15406 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_divSRT4if_15199_15406), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i9_fu___float64_divSRT4if_15199_31392), .in2(out_const_2));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15407 (.out1(out_UIconvert_expr_FU_67_i0_fu___float64_divSRT4if_15199_15407), .in1(out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_divSRT4if_15199_15394));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_divSRT4if_15199_15408 (.out1(out_bit_ior_expr_FU_16_0_16_92_i0_fu___float64_divSRT4if_15199_15408), .in1(out_UIconvert_expr_FU_67_i0_fu___float64_divSRT4if_15199_15407), .in2(out_const_10));
  ternary_mp_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_in3(11), .BITSIZE_out1(14)) fu___float64_divSRT4if_15199_15410 (.out1(out_ternary_mp_expr_FU_16_16_16_16_105_i0_fu___float64_divSRT4if_15199_15410), .in1(out_reg_18_reg_18), .in2(out_reg_19_reg_19), .in3(out_reg_43_reg_43));
  bit_and_expr_FU #(.BITSIZE_in1(14), .BITSIZE_in2(13), .BITSIZE_out1(13)) fu___float64_divSRT4if_15199_15411 (.out1(out_bit_and_expr_FU_16_0_16_79_i0_fu___float64_divSRT4if_15199_15411), .in1(out_ternary_mp_expr_FU_16_16_16_16_105_i0_fu___float64_divSRT4if_15199_15410), .in2(out_const_12));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(54), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15412 (.out1(out_ui_bit_ior_expr_FU_8_8_8_140_i7_fu___float64_divSRT4if_15199_15412), .in1(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_divSRT4if_15199_15406), .in2(out_ui_cond_expr_FU_64_64_64_64_146_i9_fu___float64_divSRT4if_15199_31392));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_divSRT4if_15199_15413 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i3_fu___float64_divSRT4if_15199_15413), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i9_fu___float64_divSRT4if_15199_31392), .in2(out_const_1));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15414 (.out1(out_ui_bit_and_expr_FU_1_0_1_115_i1_fu___float64_divSRT4if_15199_15414), .in1(out_ui_rshift_expr_FU_64_0_64_178_i3_fu___float64_divSRT4if_15199_15413), .in2(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15415 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i9_fu___float64_divSRT4if_15199_15415), .in1(out_ui_bit_and_expr_FU_1_0_1_115_i1_fu___float64_divSRT4if_15199_15414), .in2(out_ui_bit_ior_expr_FU_8_8_8_140_i7_fu___float64_divSRT4if_15199_15412));
  IUdata_converter_FU #(.BITSIZE_in1(13), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_15416 (.out1(out_IUdata_converter_FU_68_i0_fu___float64_divSRT4if_15199_15416), .in1(out_bit_and_expr_FU_16_0_16_79_i0_fu___float64_divSRT4if_15199_15411));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_15417 (.out1(out_ui_lshift_expr_FU_64_0_64_157_i0_fu___float64_divSRT4if_15199_15417), .in1(out_IUdata_converter_FU_68_i0_fu___float64_divSRT4if_15199_15416), .in2(out_const_6));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15418 (.out1(out_ui_bit_ior_expr_FU_0_64_64_133_i0_fu___float64_divSRT4if_15199_15418), .in1(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_divSRT4if_15199_15406), .in2(out_ui_lshift_expr_FU_64_0_64_157_i0_fu___float64_divSRT4if_15199_15417));
  ui_plus_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15419 (.out1(out_ui_plus_expr_FU_64_64_64_171_i0_fu___float64_divSRT4if_15199_15419), .in1(out_reg_45_reg_45), .in2(out_reg_46_reg_46));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15425 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i10_fu___float64_divSRT4if_15199_15425), .in1(out_truth_xor_expr_FU_1_0_1_109_i0_fu___float64_divSRT4if_15199_30194), .in2(out_reg_48_reg_48));
  read_cond_FU #(.BITSIZE_in1(1)) fu___float64_divSRT4if_15199_15428 (.out1(out_read_cond_FU_75_i0_fu___float64_divSRT4if_15199_15428), .in1(out_reg_52_reg_52));
  UIdata_converter_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15431 (.out1(out_UIdata_converter_FU_74_i0_fu___float64_divSRT4if_15199_15431), .in1(out_ui_plus_expr_FU_64_64_64_171_i0_fu___float64_divSRT4if_15199_15419));
  lt_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15432 (.out1(out_lt_expr_FU_64_0_64_103_i0_fu___float64_divSRT4if_15199_15432), .in1(out_reg_50_reg_50), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15433 (.out1(out_eq_expr_FU_16_0_16_96_i2_fu___float64_divSRT4if_15199_15433), .in1(out_bit_and_expr_FU_16_0_16_79_i0_fu___float64_divSRT4if_15199_15411), .in2(out_const_11));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15434 (.out1(out_ui_bit_ior_expr_FU_1_1_1_135_i2_fu___float64_divSRT4if_15199_15434), .in1(out_lt_expr_FU_64_0_64_103_i0_fu___float64_divSRT4if_15199_15432), .in2(out_reg_47_reg_47));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15441 (.out1(out_ui_bit_ior_expr_FU_64_64_64_139_i1_fu___float64_divSRT4if_15199_15441), .in1(out_ui_plus_expr_FU_64_64_64_171_i0_fu___float64_divSRT4if_15199_15419), .in2(out_reg_53_reg_53));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15447 (.out1(out_UIconvert_expr_FU_46_i0_fu___float64_divSRT4if_15199_15447), .in1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_divSRT4if_15199_15212));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15448 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i11_fu___float64_divSRT4if_15199_15448), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i0_fu___float64_divSRT4if_15199_15223), .in2(out_ui_bit_and_expr_FU_1_1_1_117_i3_fu___float64_divSRT4if_15199_15253));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15449 (.out1(out_UIdata_converter_FU_47_i0_fu___float64_divSRT4if_15199_15449), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i11_fu___float64_divSRT4if_15199_15448));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15450 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i12_fu___float64_divSRT4if_15199_15450), .in1(out_eq_expr_FU_16_0_16_95_i0_fu___float64_divSRT4if_15199_15219), .in2(out_eq_expr_FU_16_0_16_95_i1_fu___float64_divSRT4if_15199_15220));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15451 (.out1(out_UIdata_converter_FU_48_i0_fu___float64_divSRT4if_15199_15451), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i12_fu___float64_divSRT4if_15199_15450));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15452 (.out1(out_bit_ior_expr_FU_8_8_8_93_i2_fu___float64_divSRT4if_15199_15452), .in1(out_UIdata_converter_FU_48_i0_fu___float64_divSRT4if_15199_15451), .in2(out_UIconvert_expr_FU_46_i0_fu___float64_divSRT4if_15199_15447));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15453 (.out1(out_bit_ior_expr_FU_8_8_8_93_i3_fu___float64_divSRT4if_15199_15453), .in1(out_bit_ior_expr_FU_8_8_8_93_i2_fu___float64_divSRT4if_15199_15452), .in2(out_UIdata_converter_FU_47_i0_fu___float64_divSRT4if_15199_15449));
  IUdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15454 (.out1(out_IUdata_converter_FU_49_i0_fu___float64_divSRT4if_15199_15454), .in1(out_bit_ior_expr_FU_8_8_8_93_i3_fu___float64_divSRT4if_15199_15453));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_15455 (.out1(out_ui_lshift_expr_FU_64_0_64_158_i0_fu___float64_divSRT4if_15199_15455), .in1(out_IUdata_converter_FU_49_i0_fu___float64_divSRT4if_15199_15454), .in2(out_const_9));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15456 (.out1(out_UIconvert_expr_FU_42_i0_fu___float64_divSRT4if_15199_15456), .in1(out_ui_rshift_expr_FU_64_0_64_176_i1_fu___float64_divSRT4if_15199_15217));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15457 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i13_fu___float64_divSRT4if_15199_15457), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i0_fu___float64_divSRT4if_15199_15223), .in2(out_ui_bit_and_expr_FU_1_1_1_117_i3_fu___float64_divSRT4if_15199_15253));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15458 (.out1(out_UIdata_converter_FU_43_i0_fu___float64_divSRT4if_15199_15458), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i13_fu___float64_divSRT4if_15199_15457));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15459 (.out1(out_ui_bit_and_expr_FU_1_1_1_117_i14_fu___float64_divSRT4if_15199_15459), .in1(out_eq_expr_FU_16_0_16_95_i0_fu___float64_divSRT4if_15199_15219), .in2(out_eq_expr_FU_16_0_16_95_i1_fu___float64_divSRT4if_15199_15220));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15460 (.out1(out_UIdata_converter_FU_44_i0_fu___float64_divSRT4if_15199_15460), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i14_fu___float64_divSRT4if_15199_15459));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15461 (.out1(out_bit_ior_expr_FU_8_8_8_93_i4_fu___float64_divSRT4if_15199_15461), .in1(out_UIdata_converter_FU_44_i0_fu___float64_divSRT4if_15199_15460), .in2(out_UIconvert_expr_FU_42_i0_fu___float64_divSRT4if_15199_15456));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_15462 (.out1(out_bit_ior_expr_FU_8_8_8_93_i5_fu___float64_divSRT4if_15199_15462), .in1(out_bit_ior_expr_FU_8_8_8_93_i4_fu___float64_divSRT4if_15199_15461), .in2(out_UIdata_converter_FU_43_i0_fu___float64_divSRT4if_15199_15458));
  IUdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_15463 (.out1(out_IUdata_converter_FU_45_i0_fu___float64_divSRT4if_15199_15463), .in1(out_bit_ior_expr_FU_8_8_8_93_i5_fu___float64_divSRT4if_15199_15462));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_15464 (.out1(out_ui_lshift_expr_FU_64_0_64_158_i1_fu___float64_divSRT4if_15199_15464), .in1(out_IUdata_converter_FU_45_i0_fu___float64_divSRT4if_15199_15463), .in2(out_const_9));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15468 (.out1(out_ui_bit_ior_expr_FU_64_64_64_139_i2_fu___float64_divSRT4if_15199_15468), .in1(out_reg_21_reg_21), .in2(out_reg_22_reg_22));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15469 (.out1(out_ui_bit_ior_expr_FU_64_0_64_138_i0_fu___float64_divSRT4if_15199_15469), .in1(out_ui_bit_ior_expr_FU_64_64_64_139_i2_fu___float64_divSRT4if_15199_15468), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_15471 (.out1(out_ui_lshift_expr_FU_64_0_64_158_i2_fu___float64_divSRT4if_15199_15471), .in1(out_ui_bit_xor_expr_FU_1_1_1_143_i0_fu___float64_divSRT4if_15199_15218), .in2(out_const_9));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_in3(6), .BITSIZE_out1(64), .OFFSET_PARAMETER(63)) fu___float64_divSRT4if_15199_15472 (.out1(out_ui_bit_ior_concat_expr_FU_128_i0_fu___float64_divSRT4if_15199_15472), .in1(out_ui_lshift_expr_FU_64_0_64_160_i0_fu___float64_divSRT4if_15199_30225), .in2(out_const_28), .in3(out_const_26));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_15474 (.out1(out_ui_view_convert_expr_FU_76_i0_fu___float64_divSRT4if_15199_15474), .in1(out_reg_53_reg_53));
  ui_eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29722 (.out1(out_ui_eq_expr_FU_8_0_8_148_i0_fu___float64_divSRT4if_15199_29722), .in1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in2(out_const_13));
  ui_eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29725 (.out1(out_ui_eq_expr_FU_8_0_8_149_i0_fu___float64_divSRT4if_15199_29725), .in1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in2(out_const_14));
  ui_eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29728 (.out1(out_ui_eq_expr_FU_8_0_8_150_i0_fu___float64_divSRT4if_15199_29728), .in1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in2(out_const_18));
  ui_eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(3), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29731 (.out1(out_ui_eq_expr_FU_8_0_8_151_i0_fu___float64_divSRT4if_15199_29731), .in1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in2(out_const_16));
  ui_eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(3), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29734 (.out1(out_ui_eq_expr_FU_8_0_8_152_i0_fu___float64_divSRT4if_15199_29734), .in1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in2(out_const_19));
  ui_eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(3), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29737 (.out1(out_ui_eq_expr_FU_8_0_8_153_i0_fu___float64_divSRT4if_15199_29737), .in1(out_IUdata_converter_FU_61_i0_fu___float64_divSRT4if_15199_15349), .in2(out_const_23));
  ui_ne_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29798 (.out1(out_ui_ne_expr_FU_8_0_8_169_i0_fu___float64_divSRT4if_15199_29798), .in1(out_ui_minus_expr_FU_8_0_8_165_i0_fu___float64_divSRT4if_15199_15372), .in2(out_const_0));
  ui_ne_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29800 (.out1(out_ui_ne_expr_FU_64_0_64_168_i0_fu___float64_divSRT4if_15199_29800), .in1(out_ui_rshift_expr_FU_64_0_64_181_i4_fu___float64_divSRT4if_15199_30165), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29804 (.out1(out_eq_expr_FU_8_0_8_97_i0_fu___float64_divSRT4if_15199_29804), .in1(out_bit_ior_expr_FU_0_8_8_88_i0_fu___float64_divSRT4if_15199_15317), .in2(out_const_1));
  ui_ne_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29806 (.out1(out_ui_ne_expr_FU_1_1_1_166_i0_fu___float64_divSRT4if_15199_29806), .in1(out_reg_49_reg_49), .in2(out_ui_bit_and_expr_FU_1_1_1_117_i10_fu___float64_divSRT4if_15199_15425));
  eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29810 (.out1(out_eq_expr_FU_8_0_8_98_i0_fu___float64_divSRT4if_15199_29810), .in1(out_bit_ior_expr_FU_0_8_8_88_i0_fu___float64_divSRT4if_15199_15317), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(3), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_29812 (.out1(out_eq_expr_FU_8_0_8_99_i0_fu___float64_divSRT4if_15199_29812), .in1(out_bit_ior_expr_FU_0_8_8_88_i0_fu___float64_divSRT4if_15199_15317), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(1), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_divSRT4if_15199_30129 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_divSRT4if_15199_30129), .in1(out_ui_lshift_expr_FU_64_0_64_154_i0_fu___float64_divSRT4if_15199_15321), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(1), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_divSRT4if_15199_30133 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_divSRT4if_15199_30133), .in1(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319), .in2(out_const_13));
  ui_plus_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(54)) fu___float64_divSRT4if_15199_30136 (.out1(out_ui_plus_expr_FU_64_64_64_171_i1_fu___float64_divSRT4if_15199_30136), .in1(out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_divSRT4if_15199_30129), .in2(out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_divSRT4if_15199_30133));
  ui_lshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(1), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_divSRT4if_15199_30140 (.out1(out_ui_lshift_expr_FU_64_0_64_154_i1_fu___float64_divSRT4if_15199_30140), .in1(out_ui_plus_expr_FU_64_64_64_171_i1_fu___float64_divSRT4if_15199_30136), .in2(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_30144 (.out1(out_ui_bit_and_expr_FU_1_0_1_116_i0_fu___float64_divSRT4if_15199_30144), .in1(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_divSRT4if_15199_30148 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i2_fu___float64_divSRT4if_15199_30148), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i6_fu___float64_divSRT4if_15199_31367), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(1), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_divSRT4if_15199_30151 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i3_fu___float64_divSRT4if_15199_30151), .in1(out_ui_lshift_expr_FU_64_0_64_156_i0_fu___float64_divSRT4if_15199_15368), .in2(out_const_13));
  ui_plus_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(55), .BITSIZE_out1(54)) fu___float64_divSRT4if_15199_30154 (.out1(out_ui_plus_expr_FU_64_64_64_171_i2_fu___float64_divSRT4if_15199_30154), .in1(out_ui_rshift_expr_FU_64_0_64_181_i2_fu___float64_divSRT4if_15199_30148), .in2(out_reg_34_reg_34));
  ui_lshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(1), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_divSRT4if_15199_30158 (.out1(out_ui_lshift_expr_FU_64_0_64_154_i2_fu___float64_divSRT4if_15199_30158), .in1(out_ui_plus_expr_FU_64_64_64_171_i2_fu___float64_divSRT4if_15199_30154), .in2(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_30161 (.out1(out_ui_bit_and_expr_FU_1_0_1_116_i1_fu___float64_divSRT4if_15199_30161), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i6_fu___float64_divSRT4if_15199_31367), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_divSRT4if_15199_30165 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i4_fu___float64_divSRT4if_15199_30165), .in1(out_reg_37_reg_37), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(60), .BITSIZE_in2(2), .BITSIZE_out1(58), .PRECISION(64)) fu___float64_divSRT4if_15199_30169 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_divSRT4if_15199_30169), .in1(out_ui_lshift_expr_FU_64_0_64_154_i4_fu___float64_divSRT4if_15199_31452), .in2(out_const_14));
  ui_rshift_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(2), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_divSRT4if_15199_30173 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_divSRT4if_15199_30173), .in1(out_ui_bit_and_expr_FU_64_0_64_120_i0_fu___float64_divSRT4if_15199_15387), .in2(out_const_14));
  ui_minus_expr_FU #(.BITSIZE_in1(58), .BITSIZE_in2(55), .BITSIZE_out1(57)) fu___float64_divSRT4if_15199_30175 (.out1(out_ui_minus_expr_FU_64_64_64_164_i0_fu___float64_divSRT4if_15199_30175), .in1(out_reg_38_reg_38), .in2(out_reg_39_reg_39));
  ui_lshift_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(2), .BITSIZE_out1(59), .PRECISION(64)) fu___float64_divSRT4if_15199_30179 (.out1(out_ui_lshift_expr_FU_64_0_64_159_i0_fu___float64_divSRT4if_15199_30179), .in1(out_ui_minus_expr_FU_64_64_64_164_i0_fu___float64_divSRT4if_15199_30175), .in2(out_const_14));
  ui_bit_and_expr_FU #(.BITSIZE_in1(60), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_divSRT4if_15199_30183 (.out1(out_ui_bit_and_expr_FU_8_0_8_124_i0_fu___float64_divSRT4if_15199_30183), .in1(out_ui_lshift_expr_FU_64_0_64_154_i4_fu___float64_divSRT4if_15199_31452), .in2(out_const_18));
  truth_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_30194 (.out1(out_truth_xor_expr_FU_1_0_1_109_i0_fu___float64_divSRT4if_15199_30194), .in1(out_ui_extract_bit_expr_FU_73_i0_fu___float64_divSRT4if_15199_30254), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_30220 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_divSRT4if_15199_30220), .in1(out_ui_lshift_expr_FU_64_0_64_158_i2_fu___float64_divSRT4if_15199_15471), .in2(out_const_26));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_30225 (.out1(out_ui_lshift_expr_FU_64_0_64_160_i0_fu___float64_divSRT4if_15199_30225), .in1(out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_divSRT4if_15199_30220), .in2(out_const_26));
  extract_bit_expr_FU #(.BITSIZE_in1(14), .BITSIZE_in2(4)) fu___float64_divSRT4if_15199_30241 (.out1(out_extract_bit_expr_FU_69_i0_fu___float64_divSRT4if_15199_30241), .in1(out_ternary_mp_expr_FU_16_16_16_16_105_i0_fu___float64_divSRT4if_15199_15410), .in2(out_const_17));
  extract_bit_expr_FU #(.BITSIZE_in1(14), .BITSIZE_in2(4)) fu___float64_divSRT4if_15199_30246 (.out1(out_extract_bit_expr_FU_70_i0_fu___float64_divSRT4if_15199_30246), .in1(out_ternary_mp_expr_FU_16_16_16_16_105_i0_fu___float64_divSRT4if_15199_15410), .in2(out_const_20));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_divSRT4if_15199_30254 (.out1(out_ui_extract_bit_expr_FU_73_i0_fu___float64_divSRT4if_15199_30254), .in1(out_ui_plus_expr_FU_64_64_64_171_i0_fu___float64_divSRT4if_15199_15419), .in2(out_const_26));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(6)) fu___float64_divSRT4if_15199_30288 (.out1(out_ui_extract_bit_expr_FU_66_i0_fu___float64_divSRT4if_15199_30288), .in1(out_ui_minus_expr_FU_64_64_64_164_i0_fu___float64_divSRT4if_15199_30175), .in2(out_const_22));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31341 (.out1(out_truth_not_expr_FU_1_1_107_i2_fu___float64_divSRT4if_15199_31341), .in1(out_eq_expr_FU_8_0_8_99_i0_fu___float64_divSRT4if_15199_29812));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31344 (.out1(out_truth_and_expr_FU_1_1_1_106_i0_fu___float64_divSRT4if_15199_31344), .in1(out_eq_expr_FU_8_0_8_99_i0_fu___float64_divSRT4if_15199_29812), .in2(out_reg_0_reg_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(53), .BITSIZE_in3(1), .BITSIZE_out1(53)) fu___float64_divSRT4if_15199_31345 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i0_fu___float64_divSRT4if_15199_31345), .in1(out_ui_eq_expr_FU_8_0_8_153_i0_fu___float64_divSRT4if_15199_29737), .in2(out_reg_6_reg_6), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(53), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_31348 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i1_fu___float64_divSRT4if_15199_31348), .in1(out_ui_eq_expr_FU_8_0_8_149_i0_fu___float64_divSRT4if_15199_29725), .in2(out_reg_9_reg_9), .in3(out_ui_cond_expr_FU_64_64_64_64_146_i0_fu___float64_divSRT4if_15199_31345));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(54), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_31351 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i2_fu___float64_divSRT4if_15199_31351), .in1(out_ui_eq_expr_FU_8_0_8_152_i0_fu___float64_divSRT4if_15199_29734), .in2(out_reg_8_reg_8), .in3(out_ui_cond_expr_FU_64_64_64_64_146_i1_fu___float64_divSRT4if_15199_31348));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_31354 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i3_fu___float64_divSRT4if_15199_31354), .in1(out_ui_eq_expr_FU_8_0_8_150_i0_fu___float64_divSRT4if_15199_29728), .in2(out_reg_20_reg_20), .in3(out_ui_cond_expr_FU_64_64_64_64_146_i2_fu___float64_divSRT4if_15199_31351));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_31357 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i4_fu___float64_divSRT4if_15199_31357), .in1(out_reg_32_reg_32), .in2(out_reg_10_reg_10), .in3(out_reg_35_reg_35));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(53), .BITSIZE_in3(1), .BITSIZE_out1(52)) fu___float64_divSRT4if_15199_31360 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i5_fu___float64_divSRT4if_15199_31360), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i4_fu___float64_divSRT4if_15199_15255), .in2(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_divSRT4if_15199_31367 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i6_fu___float64_divSRT4if_15199_31367), .in1(out_reg_31_reg_31), .in2(out_reg_7_reg_7), .in3(out_ui_cond_expr_FU_64_64_64_64_146_i4_fu___float64_divSRT4if_15199_31357));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31371 (.out1(out_truth_not_expr_FU_1_1_107_i3_fu___float64_divSRT4if_15199_31371), .in1(out_eq_expr_FU_8_0_8_97_i0_fu___float64_divSRT4if_15199_29804));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31374 (.out1(out_truth_and_expr_FU_1_1_1_106_i1_fu___float64_divSRT4if_15199_31374), .in1(out_eq_expr_FU_8_0_8_98_i0_fu___float64_divSRT4if_15199_29810), .in2(out_truth_not_expr_FU_1_1_107_i3_fu___float64_divSRT4if_15199_31371));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31375 (.out1(out_multi_read_cond_FU_71_i0_fu___float64_divSRT4if_15199_31375), .in1({out_reg_23_reg_23}));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31378 (.out1(out_truth_not_expr_FU_1_1_107_i4_fu___float64_divSRT4if_15199_31378), .in1(out_truth_and_expr_FU_1_1_1_106_i1_fu___float64_divSRT4if_15199_31374));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31381 (.out1(out_truth_and_expr_FU_1_1_1_106_i2_fu___float64_divSRT4if_15199_31381), .in1(out_truth_not_expr_FU_1_1_107_i3_fu___float64_divSRT4if_15199_31371), .in2(out_truth_not_expr_FU_1_1_107_i4_fu___float64_divSRT4if_15199_31378));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31384 (.out1(out_truth_and_expr_FU_1_1_1_106_i3_fu___float64_divSRT4if_15199_31384), .in1(out_truth_and_expr_FU_1_1_1_106_i2_fu___float64_divSRT4if_15199_31381), .in2(out_truth_not_expr_FU_1_1_107_i2_fu___float64_divSRT4if_15199_31341));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31387 (.out1(out_truth_and_expr_FU_1_1_1_106_i4_fu___float64_divSRT4if_15199_31387), .in1(out_truth_and_expr_FU_1_1_1_106_i2_fu___float64_divSRT4if_15199_31381), .in2(out_truth_and_expr_FU_1_1_1_106_i0_fu___float64_divSRT4if_15199_31344));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(59), .BITSIZE_in3(59), .BITSIZE_out1(59)) fu___float64_divSRT4if_15199_31388 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i7_fu___float64_divSRT4if_15199_31388), .in1(out_ui_ne_expr_FU_64_0_64_168_i0_fu___float64_divSRT4if_15199_29800), .in2(out_ui_rshift_expr_FU_64_0_64_181_i7_fu___float64_divSRT4if_15199_31445), .in3(out_ui_rshift_expr_FU_64_0_64_181_i8_fu___float64_divSRT4if_15199_31448));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(57), .BITSIZE_in3(57), .BITSIZE_out1(57)) fu___float64_divSRT4if_15199_31390 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i8_fu___float64_divSRT4if_15199_31390), .in1(out_ui_ne_expr_FU_64_0_64_168_i0_fu___float64_divSRT4if_15199_29800), .in2(out_ui_rshift_expr_FU_64_0_64_181_i5_fu___float64_divSRT4if_15199_31434), .in3(out_ui_rshift_expr_FU_64_0_64_181_i6_fu___float64_divSRT4if_15199_31437));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(54), .BITSIZE_in3(54), .BITSIZE_out1(54)) fu___float64_divSRT4if_15199_31392 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i9_fu___float64_divSRT4if_15199_31392), .in1(out_reg_44_reg_44), .in2(out_reg_41_reg_41), .in3(out_reg_42_reg_42));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_31394 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i10_fu___float64_divSRT4if_15199_31394), .in1(out_ui_bit_ior_expr_FU_1_1_1_135_i2_fu___float64_divSRT4if_15199_15434), .in2(out_reg_12_reg_12), .in3(out_reg_51_reg_51));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(53), .BITSIZE_in3(52), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_31398 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i11_fu___float64_divSRT4if_15199_31398), .in1(out_truth_and_expr_FU_1_1_1_106_i4_fu___float64_divSRT4if_15199_31387), .in2(out_conv_out_reg_26_reg_26_55_53), .in3(out_reg_13_reg_13));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31400 (.out1(out_ui_cond_expr_FU_1_1_1_1_145_i0_fu___float64_divSRT4if_15199_31400), .in1(out_truth_and_expr_FU_1_1_1_106_i4_fu___float64_divSRT4if_15199_31387), .in2(out_reg_16_reg_16), .in3(out_reg_17_reg_17));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_divSRT4if_15199_31403 (.out1(out_truth_or_expr_FU_1_1_1_108_i0_fu___float64_divSRT4if_15199_31403), .in1(out_truth_and_expr_FU_1_1_1_106_i3_fu___float64_divSRT4if_15199_31384), .in2(out_truth_and_expr_FU_1_1_1_106_i1_fu___float64_divSRT4if_15199_31374));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(12), .BITSIZE_in3(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_31404 (.out1(out_ui_cond_expr_FU_16_16_16_16_144_i0_fu___float64_divSRT4if_15199_31404), .in1(out_truth_and_expr_FU_1_1_1_106_i3_fu___float64_divSRT4if_15199_31384), .in2(out_reg_14_reg_14), .in3(out_reg_15_reg_15));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_divSRT4if_15199_31407 (.out1(out_ui_cond_expr_FU_64_64_64_64_146_i12_fu___float64_divSRT4if_15199_31407), .in1(out_reg_24_reg_24), .in2(out_reg_25_reg_25), .in3(out_ui_bit_ior_expr_FU_64_0_64_138_i0_fu___float64_divSRT4if_15199_15469));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_divSRT4if_15199_31412 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_divSRT4if_15199_31412), .in1(out_ui_bit_ior_concat_expr_FU_128_i0_fu___float64_divSRT4if_15199_15472), .in2(out_const_21));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_divSRT4if_15199_31415 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_divSRT4if_15199_31415), .in1(out_ui_lshift_expr_FU_64_0_64_158_i2_fu___float64_divSRT4if_15199_15471), .in2(out_const_21));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_31421 (.out1(out_ui_lshift_expr_FU_64_0_64_161_i0_fu___float64_divSRT4if_15199_31421), .in1(out_ui_cond_expr_FU_16_16_16_16_144_i0_fu___float64_divSRT4if_15199_31404), .in2(out_const_21));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_31424 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_divSRT4if_15199_31424), .in1(out_ui_lshift_expr_FU_64_0_64_158_i0_fu___float64_divSRT4if_15199_15455), .in2(out_const_26));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_divSRT4if_15199_31427 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i2_fu___float64_divSRT4if_15199_31427), .in1(out_ui_lshift_expr_FU_64_0_64_158_i1_fu___float64_divSRT4if_15199_15464), .in2(out_const_26));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_divSRT4if_15199_31431 (.out1(out_ui_lshift_expr_FU_64_0_64_160_i1_fu___float64_divSRT4if_15199_31431), .in1(out_ui_cond_expr_FU_1_1_1_1_145_i0_fu___float64_divSRT4if_15199_31400), .in2(out_const_26));
  ui_rshift_expr_FU #(.BITSIZE_in1(58), .BITSIZE_in2(1), .BITSIZE_out1(57), .PRECISION(64)) fu___float64_divSRT4if_15199_31434 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i5_fu___float64_divSRT4if_15199_31434), .in1(out_ui_bit_ior_expr_FU_0_64_64_131_i0_fu___float64_divSRT4if_15199_15383), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(57), .PRECISION(64)) fu___float64_divSRT4if_15199_31437 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i6_fu___float64_divSRT4if_15199_31437), .in1(out_reg_29_reg_29), .in2(out_const_13));
  ui_lshift_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(1), .BITSIZE_out1(58), .PRECISION(64)) fu___float64_divSRT4if_15199_31442 (.out1(out_ui_lshift_expr_FU_64_0_64_154_i3_fu___float64_divSRT4if_15199_31442), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i8_fu___float64_divSRT4if_15199_31390), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(60), .BITSIZE_in2(1), .BITSIZE_out1(59), .PRECISION(64)) fu___float64_divSRT4if_15199_31445 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i7_fu___float64_divSRT4if_15199_31445), .in1(out_ui_bit_ior_expr_FU_64_0_64_137_i0_fu___float64_divSRT4if_15199_15380), .in2(out_const_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(59), .PRECISION(64)) fu___float64_divSRT4if_15199_31448 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i8_fu___float64_divSRT4if_15199_31448), .in1(out_reg_28_reg_28), .in2(out_const_13));
  ui_lshift_expr_FU #(.BITSIZE_in1(59), .BITSIZE_in2(1), .BITSIZE_out1(60), .PRECISION(64)) fu___float64_divSRT4if_15199_31452 (.out1(out_ui_lshift_expr_FU_64_0_64_154_i4_fu___float64_divSRT4if_15199_31452), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i7_fu___float64_divSRT4if_15199_31388), .in2(out_const_13));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_31454 (.out1(out_ASSIGN_SIGNED_FU_5_i0_fu___float64_divSRT4if_15199_31454), .in1(out_bit_and_expr_FU_16_0_16_78_i0_fu___float64_divSRT4if_15199_15211));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_divSRT4if_15199_31456 (.out1(out_ASSIGN_SIGNED_FU_7_i0_fu___float64_divSRT4if_15199_31456), .in1(out_bit_and_expr_FU_16_0_16_78_i1_fu___float64_divSRT4if_15199_15216));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i1_fu___float64_divSRT4if_15199_15225), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_bit_and_expr_FU_8_8_8_81_i0_fu___float64_divSRT4if_15199_15288), .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_concat_expr_FU_126_i0_fu___float64_divSRT4if_15199_15323), .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_41_i0_fu___float64_divSRT4if_15199_15325), .wenable(wrenable_reg_11));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_concat_expr_FU_128_i0_fu___float64_divSRT4if_15199_15472), .wenable(wrenable_reg_12));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i5_fu___float64_divSRT4if_15199_31360), .wenable(wrenable_reg_13));
  register_STD #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_divSRT4if_15199_31412), .wenable(wrenable_reg_14));
  register_STD #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_divSRT4if_15199_31415), .wenable(wrenable_reg_15));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_divSRT4if_15199_31424), .wenable(wrenable_reg_16));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_183_i2_fu___float64_divSRT4if_15199_31427), .wenable(wrenable_reg_17));
  register_SE #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_ASSIGN_SIGNED_FU_5_i0_fu___float64_divSRT4if_15199_31454), .wenable(wrenable_reg_18));
  register_SE #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_19 (.out1(out_reg_19_reg_19), .clock(clock), .reset(reset), .in1(out_ASSIGN_SIGNED_FU_7_i0_fu___float64_divSRT4if_15199_31456), .wenable(wrenable_reg_19));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_UIdata_converter_FU_34_i0_fu___float64_divSRT4if_15199_15291), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_20 (.out1(out_reg_20_reg_20), .clock(clock), .reset(reset), .in1(out_ui_negate_expr_FU_64_64_170_i2_fu___float64_divSRT4if_15199_15324), .wenable(wrenable_reg_20));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_21 (.out1(out_reg_21_reg_21), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i11_fu___float64_divSRT4if_15199_31398), .wenable(wrenable_reg_21));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_22 (.out1(out_reg_22_reg_22), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_160_i1_fu___float64_divSRT4if_15199_31431), .wenable(wrenable_reg_22));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_23 (.out1(out_reg_23_reg_23), .clock(clock), .reset(reset), .in1(out_eq_expr_FU_8_0_8_97_i0_fu___float64_divSRT4if_15199_29804), .wenable(wrenable_reg_23));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_24 (.out1(out_reg_24_reg_24), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_108_i0_fu___float64_divSRT4if_15199_31403), .wenable(wrenable_reg_24));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_25 (.out1(out_reg_25_reg_25), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_161_i0_fu___float64_divSRT4if_15199_31421), .wenable(wrenable_reg_25));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_26 (.out1(out_reg_26_reg_26), .clock(clock), .reset(reset), .in1(out_MUX_186_reg_26_0_0_1), .wenable(wrenable_reg_26));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_27 (.out1(out_reg_27_reg_27), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i12_fu___float64_divSRT4if_15199_31407), .wenable(wrenable_reg_27));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_28 (.out1(out_reg_28_reg_28), .clock(clock), .reset(reset), .in1(out_MUX_188_reg_28_0_0_0), .wenable(wrenable_reg_28));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_29 (.out1(out_reg_29_reg_29), .clock(clock), .reset(reset), .in1(out_MUX_189_reg_29_0_0_0), .wenable(wrenable_reg_29));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_bit_and_expr_FU_8_0_8_80_i0_fu___float64_divSRT4if_15199_15302), .wenable(wrenable_reg_3));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_30 (.out1(out_reg_30_reg_30), .clock(clock), .reset(reset), .in1(out_MUX_191_reg_30_0_0_0), .wenable(wrenable_reg_30));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_31 (.out1(out_reg_31_reg_31), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_148_i0_fu___float64_divSRT4if_15199_29722), .wenable(wrenable_reg_31));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_32 (.out1(out_reg_32_reg_32), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_151_i0_fu___float64_divSRT4if_15199_29731), .wenable(wrenable_reg_32));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_33 (.out1(out_reg_33_reg_33), .clock(clock), .reset(reset), .in1(out_ui_ne_expr_FU_8_0_8_169_i0_fu___float64_divSRT4if_15199_29798), .wenable(wrenable_reg_33));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_34 (.out1(out_reg_34_reg_34), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_181_i3_fu___float64_divSRT4if_15199_30151), .wenable(wrenable_reg_34));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_35 (.out1(out_reg_35_reg_35), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_64_64_64_64_146_i3_fu___float64_divSRT4if_15199_31354), .wenable(wrenable_reg_35));
  register_STD #(.BITSIZE_in1(54), .BITSIZE_out1(54)) reg_36 (.out1(out_reg_36_reg_36), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_119_i0_fu___float64_divSRT4if_15199_15370), .wenable(wrenable_reg_36));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_37 (.out1(out_reg_37_reg_37), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_156_i1_fu___float64_divSRT4if_15199_15371), .wenable(wrenable_reg_37));
  register_STD #(.BITSIZE_in1(58), .BITSIZE_out1(58)) reg_38 (.out1(out_reg_38_reg_38), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_divSRT4if_15199_30169), .wenable(wrenable_reg_38));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_39 (.out1(out_reg_39_reg_39), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_divSRT4if_15199_30173), .wenable(wrenable_reg_39));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_bit_and_expr_FU_8_8_8_81_i1_fu___float64_divSRT4if_15199_15309), .wenable(wrenable_reg_4));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_40 (.out1(out_reg_40_reg_40), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_8_0_8_124_i0_fu___float64_divSRT4if_15199_30183), .wenable(wrenable_reg_40));
  register_STD #(.BITSIZE_in1(54), .BITSIZE_out1(54)) reg_41 (.out1(out_reg_41_reg_41), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_132_i0_fu___float64_divSRT4if_15199_15402), .wenable(wrenable_reg_41));
  register_STD #(.BITSIZE_in1(54), .BITSIZE_out1(54)) reg_42 (.out1(out_reg_42_reg_42), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_119_i1_fu___float64_divSRT4if_15199_15403), .wenable(wrenable_reg_42));
  register_STD #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_43 (.out1(out_reg_43_reg_43), .clock(clock), .reset(reset), .in1(out_bit_ior_expr_FU_16_0_16_92_i0_fu___float64_divSRT4if_15199_15408), .wenable(wrenable_reg_43));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_44 (.out1(out_reg_44_reg_44), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_66_i0_fu___float64_divSRT4if_15199_30288), .wenable(wrenable_reg_44));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_45 (.out1(out_reg_45_reg_45), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_117_i9_fu___float64_divSRT4if_15199_15415), .wenable(wrenable_reg_45));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_46 (.out1(out_reg_46_reg_46), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_133_i0_fu___float64_divSRT4if_15199_15418), .wenable(wrenable_reg_46));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_47 (.out1(out_reg_47_reg_47), .clock(clock), .reset(reset), .in1(out_eq_expr_FU_16_0_16_96_i2_fu___float64_divSRT4if_15199_15433), .wenable(wrenable_reg_47));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_48 (.out1(out_reg_48_reg_48), .clock(clock), .reset(reset), .in1(out_extract_bit_expr_FU_69_i0_fu___float64_divSRT4if_15199_30241), .wenable(wrenable_reg_48));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_49 (.out1(out_reg_49_reg_49), .clock(clock), .reset(reset), .in1(out_extract_bit_expr_FU_70_i0_fu___float64_divSRT4if_15199_30246), .wenable(wrenable_reg_49));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_bit_and_expr_FU_8_8_8_81_i2_fu___float64_divSRT4if_15199_15314), .wenable(wrenable_reg_5));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_50 (.out1(out_reg_50_reg_50), .clock(clock), .reset(reset), .in1(out_UIdata_converter_FU_74_i0_fu___float64_divSRT4if_15199_15431), .wenable(wrenable_reg_50));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_51 (.out1(out_reg_51_reg_51), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_64_64_139_i1_fu___float64_divSRT4if_15199_15441), .wenable(wrenable_reg_51));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_52 (.out1(out_reg_52_reg_52), .clock(clock), .reset(reset), .in1(out_ui_ne_expr_FU_1_1_1_166_i0_fu___float64_divSRT4if_15199_29806), .wenable(wrenable_reg_52));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_53 (.out1(out_reg_53_reg_53), .clock(clock), .reset(reset), .in1(out_MUX_216_reg_53_0_0_1), .wenable(wrenable_reg_53));
  register_SE #(.BITSIZE_in1(53), .BITSIZE_out1(53)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_0_64_136_i1_fu___float64_divSRT4if_15199_15319), .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_negate_expr_FU_64_64_170_i0_fu___float64_divSRT4if_15199_15320), .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(54), .BITSIZE_out1(54)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_154_i0_fu___float64_divSRT4if_15199_15321), .wenable(wrenable_reg_8));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_ui_negate_expr_FU_64_64_170_i1_fu___float64_divSRT4if_15199_15322), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_ui_view_convert_expr_FU_76_i0_fu___float64_divSRT4if_15199_15474;
  assign OUT_CONDITION___float64_divSRT4if_15199_15373 = out_read_cond_FU_65_i0_fu___float64_divSRT4if_15199_15373;
  assign OUT_CONDITION___float64_divSRT4if_15199_15428 = out_read_cond_FU_75_i0_fu___float64_divSRT4if_15199_15428;
  assign OUT_MULTIIF___float64_divSRT4if_15199_31375 = out_multi_read_cond_FU_71_i0_fu___float64_divSRT4if_15199_31375;

endmodule

// FSM based controller description for __float64_divSRT4if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_divSRT4if(done_port, selector_MUX_186_reg_26_0_0_0, selector_MUX_186_reg_26_0_0_1, selector_MUX_188_reg_28_0_0_0, selector_MUX_189_reg_29_0_0_0, selector_MUX_191_reg_30_0_0_0, selector_MUX_216_reg_53_0_0_0, selector_MUX_216_reg_53_0_0_1, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION___float64_divSRT4if_15199_15373, OUT_CONDITION___float64_divSRT4if_15199_15428, OUT_MULTIIF___float64_divSRT4if_15199_31375, clock, reset, start_port);
  // IN
  input OUT_CONDITION___float64_divSRT4if_15199_15373;
  input OUT_CONDITION___float64_divSRT4if_15199_15428;
  input OUT_MULTIIF___float64_divSRT4if_15199_31375;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_MUX_186_reg_26_0_0_0;
  output selector_MUX_186_reg_26_0_0_1;
  output selector_MUX_188_reg_28_0_0_0;
  output selector_MUX_189_reg_29_0_0_0;
  output selector_MUX_191_reg_30_0_0_0;
  output selector_MUX_216_reg_53_0_0_0;
  output selector_MUX_216_reg_53_0_0_1;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_24;
  output wrenable_reg_25;
  output wrenable_reg_26;
  output wrenable_reg_27;
  output wrenable_reg_28;
  output wrenable_reg_29;
  output wrenable_reg_3;
  output wrenable_reg_30;
  output wrenable_reg_31;
  output wrenable_reg_32;
  output wrenable_reg_33;
  output wrenable_reg_34;
  output wrenable_reg_35;
  output wrenable_reg_36;
  output wrenable_reg_37;
  output wrenable_reg_38;
  output wrenable_reg_39;
  output wrenable_reg_4;
  output wrenable_reg_40;
  output wrenable_reg_41;
  output wrenable_reg_42;
  output wrenable_reg_43;
  output wrenable_reg_44;
  output wrenable_reg_45;
  output wrenable_reg_46;
  output wrenable_reg_47;
  output wrenable_reg_48;
  output wrenable_reg_49;
  output wrenable_reg_5;
  output wrenable_reg_50;
  output wrenable_reg_51;
  output wrenable_reg_52;
  output wrenable_reg_53;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [13:0] S_0 = 14'b00000000000001,
    S_1 = 14'b00000000000010,
    S_2 = 14'b00000000000100,
    S_3 = 14'b00000000001000,
    S_4 = 14'b00000000010000,
    S_5 = 14'b00000000100000,
    S_6 = 14'b00000001000000,
    S_7 = 14'b00000010000000,
    S_8 = 14'b00000100000000,
    S_9 = 14'b00001000000000,
    S_10 = 14'b00010000000000,
    S_11 = 14'b00100000000000,
    S_12 = 14'b01000000000000,
    S_13 = 14'b10000000000000;
  reg [13:0] _present_state, _next_state;
  reg done_port;
  reg selector_MUX_186_reg_26_0_0_0;
  reg selector_MUX_186_reg_26_0_0_1;
  reg selector_MUX_188_reg_28_0_0_0;
  reg selector_MUX_189_reg_29_0_0_0;
  reg selector_MUX_191_reg_30_0_0_0;
  reg selector_MUX_216_reg_53_0_0_0;
  reg selector_MUX_216_reg_53_0_0_1;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_24;
  reg wrenable_reg_25;
  reg wrenable_reg_26;
  reg wrenable_reg_27;
  reg wrenable_reg_28;
  reg wrenable_reg_29;
  reg wrenable_reg_3;
  reg wrenable_reg_30;
  reg wrenable_reg_31;
  reg wrenable_reg_32;
  reg wrenable_reg_33;
  reg wrenable_reg_34;
  reg wrenable_reg_35;
  reg wrenable_reg_36;
  reg wrenable_reg_37;
  reg wrenable_reg_38;
  reg wrenable_reg_39;
  reg wrenable_reg_4;
  reg wrenable_reg_40;
  reg wrenable_reg_41;
  reg wrenable_reg_42;
  reg wrenable_reg_43;
  reg wrenable_reg_44;
  reg wrenable_reg_45;
  reg wrenable_reg_46;
  reg wrenable_reg_47;
  reg wrenable_reg_48;
  reg wrenable_reg_49;
  reg wrenable_reg_5;
  reg wrenable_reg_50;
  reg wrenable_reg_51;
  reg wrenable_reg_52;
  reg wrenable_reg_53;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_MUX_186_reg_26_0_0_0 = 1'b0;
    selector_MUX_186_reg_26_0_0_1 = 1'b0;
    selector_MUX_188_reg_28_0_0_0 = 1'b0;
    selector_MUX_189_reg_29_0_0_0 = 1'b0;
    selector_MUX_191_reg_30_0_0_0 = 1'b0;
    selector_MUX_216_reg_53_0_0_0 = 1'b0;
    selector_MUX_216_reg_53_0_0_1 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_24 = 1'b0;
    wrenable_reg_25 = 1'b0;
    wrenable_reg_26 = 1'b0;
    wrenable_reg_27 = 1'b0;
    wrenable_reg_28 = 1'b0;
    wrenable_reg_29 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_30 = 1'b0;
    wrenable_reg_31 = 1'b0;
    wrenable_reg_32 = 1'b0;
    wrenable_reg_33 = 1'b0;
    wrenable_reg_34 = 1'b0;
    wrenable_reg_35 = 1'b0;
    wrenable_reg_36 = 1'b0;
    wrenable_reg_37 = 1'b0;
    wrenable_reg_38 = 1'b0;
    wrenable_reg_39 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_40 = 1'b0;
    wrenable_reg_41 = 1'b0;
    wrenable_reg_42 = 1'b0;
    wrenable_reg_43 = 1'b0;
    wrenable_reg_44 = 1'b0;
    wrenable_reg_45 = 1'b0;
    wrenable_reg_46 = 1'b0;
    wrenable_reg_47 = 1'b0;
    wrenable_reg_48 = 1'b0;
    wrenable_reg_49 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_50 = 1'b0;
    wrenable_reg_51 = 1'b0;
    wrenable_reg_52 = 1'b0;
    wrenable_reg_53 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          _next_state = S_1;
        end
        else
        begin
          selector_MUX_186_reg_26_0_0_0 = 1'bX;
          selector_MUX_186_reg_26_0_0_1 = 1'bX;
          selector_MUX_188_reg_28_0_0_0 = 1'bX;
          selector_MUX_189_reg_29_0_0_0 = 1'bX;
          selector_MUX_191_reg_30_0_0_0 = 1'bX;
          selector_MUX_216_reg_53_0_0_0 = 1'bX;
          selector_MUX_216_reg_53_0_0_1 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          selector_MUX_216_reg_53_0_0_1 = 1'b1;
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_15 = 1'b1;
          wrenable_reg_16 = 1'b1;
          wrenable_reg_17 = 1'b1;
          wrenable_reg_18 = 1'b1;
          wrenable_reg_19 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_53 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          wrenable_reg_20 = 1'b1;
          wrenable_reg_21 = 1'b1;
          wrenable_reg_22 = 1'b1;
          wrenable_reg_23 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_25 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          selector_MUX_186_reg_26_0_0_0 = 1'b1;
          selector_MUX_188_reg_28_0_0_0 = 1'b1;
          selector_MUX_189_reg_29_0_0_0 = 1'b1;
          selector_MUX_191_reg_30_0_0_0 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_27 = 1'b1;
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          _next_state = S_4;
        end
      S_4 :
        begin
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          wrenable_reg_31 = 1'b1;
          wrenable_reg_32 = 1'b1;
          wrenable_reg_33 = 1'b1;
          wrenable_reg_34 = 1'b1;
          wrenable_reg_35 = 1'b1;
          _next_state = S_5;
        end
      S_5 :
        begin
          wrenable_reg_36 = 1'b1;
          _next_state = S_6;
        end
      S_6 :
        begin
          selector_MUX_186_reg_26_0_0_1 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_37 = 1'b1;
          if (OUT_CONDITION___float64_divSRT4if_15199_15373 == 1'b1)
            begin
              _next_state = S_4;
              wrenable_reg_37 = 1'b0;
            end
          else
            begin
              _next_state = S_7;
              selector_MUX_186_reg_26_0_0_1 = 1'b0;
              wrenable_reg_26 = 1'b0;
            end
        end
      S_7 :
        begin
          wrenable_reg_38 = 1'b1;
          wrenable_reg_39 = 1'b1;
          wrenable_reg_40 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          wrenable_reg_41 = 1'b1;
          wrenable_reg_42 = 1'b1;
          wrenable_reg_43 = 1'b1;
          wrenable_reg_44 = 1'b1;
          _next_state = S_9;
        end
      S_9 :
        begin
          selector_MUX_216_reg_53_0_0_0 = 1'b1;
          wrenable_reg_45 = 1'b1;
          wrenable_reg_46 = 1'b1;
          wrenable_reg_47 = 1'b1;
          wrenable_reg_48 = 1'b1;
          wrenable_reg_49 = 1'b1;
          wrenable_reg_53 = 1'b1;
          if (OUT_MULTIIF___float64_divSRT4if_15199_31375 == 1'b1)
            begin
              _next_state = S_10;
              selector_MUX_216_reg_53_0_0_0 = 1'b0;
              wrenable_reg_53 = 1'b0;
            end
          else
            begin
              _next_state = S_13;
              done_port = 1'b1;
              wrenable_reg_45 = 1'b0;
              wrenable_reg_46 = 1'b0;
              wrenable_reg_47 = 1'b0;
              wrenable_reg_48 = 1'b0;
              wrenable_reg_49 = 1'b0;
            end
        end
      S_10 :
        begin
          wrenable_reg_50 = 1'b1;
          wrenable_reg_51 = 1'b1;
          wrenable_reg_52 = 1'b1;
          _next_state = S_11;
        end
      S_11 :
        begin
          if (OUT_CONDITION___float64_divSRT4if_15199_15428 == 1'b1)
            begin
              _next_state = S_13;
              done_port = 1'b1;
            end
          else
            begin
              _next_state = S_12;
            end
        end
      S_12 :
        begin
          wrenable_reg_53 = 1'b1;
          _next_state = S_13;
          done_port = 1'b1;
        end
      S_13 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_186_reg_26_0_0_0 = 1'bX;
          selector_MUX_186_reg_26_0_0_1 = 1'bX;
          selector_MUX_188_reg_28_0_0_0 = 1'bX;
          selector_MUX_189_reg_29_0_0_0 = 1'bX;
          selector_MUX_191_reg_30_0_0_0 = 1'bX;
          selector_MUX_216_reg_53_0_0_0 = 1'bX;
          selector_MUX_216_reg_53_0_0_1 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Marco Lattuada <marco.lattuada@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module flipflop_AR(clock, reset, in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input in1;
  // OUT
  output out1;
  
  reg reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock )
    if (reset == 1'b0)
      reg_out1 <= {BITSIZE_out1{1'b0}};
    else
      reg_out1 <= in1;
endmodule

// Top component for __float64_divSRT4if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_divSRT4if(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output [63:0] return_port;
  // Component and signal declarations
  wire OUT_CONDITION___float64_divSRT4if_15199_15373;
  wire OUT_CONDITION___float64_divSRT4if_15199_15428;
  wire OUT_MULTIIF___float64_divSRT4if_15199_31375;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire [63:0] in_port_a_SIGI1;
  wire [63:0] in_port_a_SIGI2;
  wire [63:0] in_port_b_SIGI1;
  wire [63:0] in_port_b_SIGI2;
  wire selector_MUX_186_reg_26_0_0_0;
  wire selector_MUX_186_reg_26_0_0_1;
  wire selector_MUX_188_reg_28_0_0_0;
  wire selector_MUX_189_reg_29_0_0_0;
  wire selector_MUX_191_reg_30_0_0_0;
  wire selector_MUX_216_reg_53_0_0_0;
  wire selector_MUX_216_reg_53_0_0_1;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_24;
  wire wrenable_reg_25;
  wire wrenable_reg_26;
  wire wrenable_reg_27;
  wire wrenable_reg_28;
  wire wrenable_reg_29;
  wire wrenable_reg_3;
  wire wrenable_reg_30;
  wire wrenable_reg_31;
  wire wrenable_reg_32;
  wire wrenable_reg_33;
  wire wrenable_reg_34;
  wire wrenable_reg_35;
  wire wrenable_reg_36;
  wire wrenable_reg_37;
  wire wrenable_reg_38;
  wire wrenable_reg_39;
  wire wrenable_reg_4;
  wire wrenable_reg_40;
  wire wrenable_reg_41;
  wire wrenable_reg_42;
  wire wrenable_reg_43;
  wire wrenable_reg_44;
  wire wrenable_reg_45;
  wire wrenable_reg_46;
  wire wrenable_reg_47;
  wire wrenable_reg_48;
  wire wrenable_reg_49;
  wire wrenable_reg_5;
  wire wrenable_reg_50;
  wire wrenable_reg_51;
  wire wrenable_reg_52;
  wire wrenable_reg_53;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller___float64_divSRT4if Controller_i (.done_port(done_delayed_REG_signal_in), .selector_MUX_186_reg_26_0_0_0(selector_MUX_186_reg_26_0_0_0), .selector_MUX_186_reg_26_0_0_1(selector_MUX_186_reg_26_0_0_1), .selector_MUX_188_reg_28_0_0_0(selector_MUX_188_reg_28_0_0_0), .selector_MUX_189_reg_29_0_0_0(selector_MUX_189_reg_29_0_0_0), .selector_MUX_191_reg_30_0_0_0(selector_MUX_191_reg_30_0_0_0), .selector_MUX_216_reg_53_0_0_0(selector_MUX_216_reg_53_0_0_0), .selector_MUX_216_reg_53_0_0_1(selector_MUX_216_reg_53_0_0_1), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_CONDITION___float64_divSRT4if_15199_15373(OUT_CONDITION___float64_divSRT4if_15199_15373), .OUT_CONDITION___float64_divSRT4if_15199_15428(OUT_CONDITION___float64_divSRT4if_15199_15428), .OUT_MULTIIF___float64_divSRT4if_15199_31375(OUT_MULTIIF___float64_divSRT4if_15199_31375), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_divSRT4if Datapath_i (.return_port(return_port), .OUT_CONDITION___float64_divSRT4if_15199_15373(OUT_CONDITION___float64_divSRT4if_15199_15373), .OUT_CONDITION___float64_divSRT4if_15199_15428(OUT_CONDITION___float64_divSRT4if_15199_15428), .OUT_MULTIIF___float64_divSRT4if_15199_31375(OUT_MULTIIF___float64_divSRT4if_15199_31375), .clock(clock), .reset(reset), .in_port_a(in_port_a_SIGI2), .in_port_b(in_port_b_SIGI2), .selector_MUX_186_reg_26_0_0_0(selector_MUX_186_reg_26_0_0_0), .selector_MUX_186_reg_26_0_0_1(selector_MUX_186_reg_26_0_0_1), .selector_MUX_188_reg_28_0_0_0(selector_MUX_188_reg_28_0_0_0), .selector_MUX_189_reg_29_0_0_0(selector_MUX_189_reg_29_0_0_0), .selector_MUX_191_reg_30_0_0_0(selector_MUX_191_reg_30_0_0_0), .selector_MUX_216_reg_53_0_0_0(selector_MUX_216_reg_53_0_0_0), .selector_MUX_216_reg_53_0_0_1(selector_MUX_216_reg_53_0_0_1), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_a_REG (.out1(in_port_a_SIGI2), .clock(clock), .reset(reset), .in1(in_port_a_SIGI1));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_b_REG (.out1(in_port_b_SIGI2), .clock(clock), .reset(reset), .in1(in_port_b_SIGI1));
  // io-signal post fix
  assign in_port_a_SIGI1 = a;
  assign in_port_b_SIGI1 = b;
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Proxy wrapper for function: WRAPPED_PROXY_PREF___float64_divSRT4if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module WRAPPED_PROXY_PREF___float64_divSRT4if(clock, reset, start_port, a, b, PROXY_PREF_start_port, PROXY_PREF_a, PROXY_PREF_b, done_port, return_port, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___float64_divSRT4if);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  input PROXY_PREF_start_port;
  input [63:0] PROXY_PREF_a;
  input [63:0] PROXY_PREF_b;
  input sel___float64_divSRT4if;
  // OUT
  output done_port;
  output [63:0] return_port;
  output PROXY_PREF_done_port;
  output [63:0] PROXY_PREF_return_port;
  // Component and signal declarations
  wire [63:0] muxed_in_a;
  wire [63:0] muxed_in_b;
  wire muxed_in_start_port;
  wire proxy_selector____out_sel;
  wire tmp_out_done_port;
  wire [63:0] tmp_out_return_port;
  
  __float64_divSRT4if __float64_divSRT4if_i (.done_port(tmp_out_done_port), .return_port(tmp_out_return_port), .clock(clock), .reset(reset), .start_port(muxed_in_start_port), .a(muxed_in_a), .b(muxed_in_b));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) proxy_mux_____a (.out1(muxed_in_a), .sel(proxy_selector____out_sel), .in1(a), .in2(PROXY_PREF_a));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) proxy_mux_____b (.out1(muxed_in_b), .sel(proxy_selector____out_sel), .in1(b), .in2(PROXY_PREF_b));
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) proxy_mux_____start_port (.out1(muxed_in_start_port), .sel(proxy_selector____out_sel), .in1(start_port), .in2(PROXY_PREF_start_port));
  or or_proxy_selector____or_gate( proxy_selector____out_sel, sel___float64_divSRT4if);
  // io-signal post fix
  assign done_port = tmp_out_done_port;
  assign return_port = tmp_out_return_port;
  assign PROXY_PREF_done_port = tmp_out_done_port;
  assign PROXY_PREF_return_port = tmp_out_return_port;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module fp_cond_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 != 0 ? in2 : in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module plus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_ternary_plus_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2 + in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_ternary_pm_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2 - in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_mult_expr_FU(clock, in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PIPE_PARAMETER=0;
  // IN
  input clock;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
    if(PIPE_PARAMETER==1)
    begin
      reg signed [BITSIZE_out1-1:0] out1_reg;
      assign out1 = out1_reg;
      always @(posedge clock)
      begin
        out1_reg <= in1 * in2;
      end
    end
    else if(PIPE_PARAMETER>1)
    begin
      reg [BITSIZE_in1-1:0] in1_in;
      reg [BITSIZE_in2-1:0] in2_in;
      wire [BITSIZE_out1-1:0] mult_res;
      reg [BITSIZE_out1-1:0] mul [PIPE_PARAMETER-2:0];
      integer i;
      assign mult_res = in1_in * in2_in;
      always @(posedge clock)
      begin
        in1_in <= in1;
        in2_in <= in2;
        mul[PIPE_PARAMETER-2] <= mult_res;
        for (i=0; i<PIPE_PARAMETER-2; i=i+1)
          mul[i] <= mul[i+1];
      end
      assign out1 = mul[0];
    end
    else
    begin
      assign out1 = in1 * in2;
    end
  endgenerate

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_widen_mult_expr_FU(clock, in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PIPE_PARAMETER=0;
  // IN
  input clock;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  ui_mult_expr_FU #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_out1(BITSIZE_out1), .PIPE_PARAMETER(PIPE_PARAMETER)) m1 (.out1(out1), .clock(clock), .in1(in1), .in2(in2));
endmodule

// Datapath RTL description for __float64_mulif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_mulif(clock, reset, in_port_a, in_port_b, return_port, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_24;
  input wrenable_reg_25;
  input wrenable_reg_26;
  input wrenable_reg_27;
  input wrenable_reg_28;
  input wrenable_reg_29;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output [63:0] return_port;
  // Component and signal declarations
  wire signed [2:0] out_IIconvert_expr_FU_11_i0_fu___float64_mulif_14503_14538;
  wire signed [2:0] out_IIconvert_expr_FU_15_i0_fu___float64_mulif_14503_14546;
  wire signed [2:0] out_IIconvert_expr_FU_19_i0_fu___float64_mulif_14503_14561;
  wire signed [2:0] out_IIconvert_expr_FU_23_i0_fu___float64_mulif_14503_14568;
  wire signed [2:0] out_IIconvert_expr_FU_27_i0_fu___float64_mulif_14503_14576;
  wire signed [2:0] out_IIconvert_expr_FU_31_i0_fu___float64_mulif_14503_14587;
  wire signed [2:0] out_IIconvert_expr_FU_7_i0_fu___float64_mulif_14503_14531;
  wire [1:0] out_IUdata_converter_FU_13_i0_fu___float64_mulif_14503_14541;
  wire [1:0] out_IUdata_converter_FU_17_i0_fu___float64_mulif_14503_14549;
  wire [1:0] out_IUdata_converter_FU_21_i0_fu___float64_mulif_14503_14564;
  wire [1:0] out_IUdata_converter_FU_25_i0_fu___float64_mulif_14503_14571;
  wire [1:0] out_IUdata_converter_FU_29_i0_fu___float64_mulif_14503_14579;
  wire [11:0] out_IUdata_converter_FU_37_i0_fu___float64_mulif_14503_14614;
  wire [1:0] out_IUdata_converter_FU_41_i0_fu___float64_mulif_14503_14693;
  wire [1:0] out_IUdata_converter_FU_9_i0_fu___float64_mulif_14503_14534;
  wire signed [7:0] out_UIconvert_expr_FU_10_i0_fu___float64_mulif_14503_14536;
  wire signed [1:0] out_UIconvert_expr_FU_12_i0_fu___float64_mulif_14503_14539;
  wire signed [7:0] out_UIconvert_expr_FU_14_i0_fu___float64_mulif_14503_14544;
  wire signed [1:0] out_UIconvert_expr_FU_16_i0_fu___float64_mulif_14503_14547;
  wire signed [7:0] out_UIconvert_expr_FU_18_i0_fu___float64_mulif_14503_14559;
  wire signed [1:0] out_UIconvert_expr_FU_20_i0_fu___float64_mulif_14503_14562;
  wire signed [7:0] out_UIconvert_expr_FU_22_i0_fu___float64_mulif_14503_14566;
  wire signed [1:0] out_UIconvert_expr_FU_24_i0_fu___float64_mulif_14503_14569;
  wire signed [7:0] out_UIconvert_expr_FU_26_i0_fu___float64_mulif_14503_14574;
  wire signed [1:0] out_UIconvert_expr_FU_28_i0_fu___float64_mulif_14503_14577;
  wire signed [7:0] out_UIconvert_expr_FU_6_i0_fu___float64_mulif_14503_14529;
  wire signed [1:0] out_UIconvert_expr_FU_8_i0_fu___float64_mulif_14503_14532;
  wire signed [7:0] out_UIdata_converter_FU_30_i0_fu___float64_mulif_14503_14585;
  wire signed [1:0] out_UIdata_converter_FU_32_i0_fu___float64_mulif_14503_14589;
  wire signed [1:0] out_UIdata_converter_FU_33_i0_fu___float64_mulif_14503_14591;
  wire signed [2:0] out_UIdata_converter_FU_34_i0_fu___float64_mulif_14503_14593;
  wire signed [1:0] out_UIdata_converter_FU_35_i0_fu___float64_mulif_14503_14603;
  wire signed [1:0] out_UIdata_converter_FU_36_i0_fu___float64_mulif_14503_14610;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_mulif_14503_14512;
  wire signed [11:0] out_UIdata_converter_FU_5_i0_fu___float64_mulif_14503_14517;
  wire out_UUconvert_expr_FU_49_i0_fu___float64_mulif_14503_14680;
  wire out_UUdata_converter_FU_38_i0_fu___float64_mulif_14503_14643;
  wire [11:0] out_UUdata_converter_FU_40_i0_fu___float64_mulif_14503_14660;
  wire out_UUdata_converter_FU_47_i0_fu___float64_mulif_14503_14670;
  wire out_UUdata_converter_FU_51_i0_fu___float64_mulif_14503_14687;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_53_i0_fu___float64_mulif_14503_14513;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_53_i1_fu___float64_mulif_14503_14518;
  wire signed [1:0] out_bit_and_expr_FU_8_0_8_54_i0_fu___float64_mulif_14503_14596;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_55_i0_fu___float64_mulif_14503_14533;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_56_i0_fu___float64_mulif_14503_14540;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_57_i0_fu___float64_mulif_14503_14548;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_58_i0_fu___float64_mulif_14503_14563;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_59_i0_fu___float64_mulif_14503_14570;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_60_i0_fu___float64_mulif_14503_14578;
  wire signed [2:0] out_bit_ior_expr_FU_0_8_8_61_i0_fu___float64_mulif_14503_14597;
  wire signed [2:0] out_bit_ior_expr_FU_8_8_8_62_i0_fu___float64_mulif_14503_14594;
  wire signed [2:0] out_bit_ior_expr_FU_8_8_8_62_i1_fu___float64_mulif_14503_14595;
  wire signed [1:0] out_bit_ior_expr_FU_8_8_8_62_i2_fu___float64_mulif_14503_14611;
  wire signed [2:0] out_bit_ior_expr_FU_8_8_8_62_i3_fu___float64_mulif_14503_14612;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [11:0] out_const_10;
  wire [63:0] out_const_11;
  wire out_const_12;
  wire [1:0] out_const_13;
  wire [52:0] out_const_14;
  wire [1:0] out_const_15;
  wire [2:0] out_const_16;
  wire [3:0] out_const_17;
  wire [2:0] out_const_18;
  wire [5:0] out_const_19;
  wire [2:0] out_const_2;
  wire [5:0] out_const_20;
  wire [15:0] out_const_21;
  wire [7:0] out_const_22;
  wire [62:0] out_const_23;
  wire [22:0] out_const_24;
  wire [51:0] out_const_25;
  wire [52:0] out_const_26;
  wire [53:0] out_const_27;
  wire [62:0] out_const_28;
  wire [63:0] out_const_29;
  wire [4:0] out_const_3;
  wire [5:0] out_const_4;
  wire [6:0] out_const_5;
  wire [6:0] out_const_6;
  wire [6:0] out_const_7;
  wire [6:0] out_const_8;
  wire [6:0] out_const_9;
  wire out_eq_expr_FU_16_0_16_63_i0_fu___float64_mulif_14503_14521;
  wire out_eq_expr_FU_16_0_16_63_i1_fu___float64_mulif_14503_14551;
  wire out_eq_expr_FU_8_0_8_64_i0_fu___float64_mulif_14503_29862;
  wire [63:0] out_fp_cond_expr_FU_64_64_64_64_65_i0_fu___float64_mulif_14503_31648;
  wire [63:0] out_fp_cond_expr_FU_64_64_64_64_65_i1_fu___float64_mulif_14503_31654;
  wire [63:0] out_fp_cond_expr_FU_64_64_64_64_65_i2_fu___float64_mulif_14503_31660;
  wire [63:0] out_fp_cond_expr_FU_64_64_64_64_65_i3_fu___float64_mulif_14503_31666;
  wire [63:0] out_fp_cond_expr_FU_64_64_64_64_65_i4_fu___float64_mulif_14503_31669;
  wire [63:0] out_fp_cond_expr_FU_64_64_64_64_65_i5_fu___float64_mulif_14503_31673;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_mulif_14503_14508;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_mulif_14503_14509;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i0_fu___float64_mulif_14503_14530;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i1_fu___float64_mulif_14503_14537;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i2_fu___float64_mulif_14503_14545;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i3_fu___float64_mulif_14503_14560;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i4_fu___float64_mulif_14503_14567;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i5_fu___float64_mulif_14503_14575;
  wire signed [8:0] out_lshift_expr_FU_16_0_16_66_i6_fu___float64_mulif_14503_14586;
  wire out_ne_expr_FU_16_0_16_67_i0_fu___float64_mulif_14503_14526;
  wire out_ne_expr_FU_16_0_16_67_i1_fu___float64_mulif_14503_14556;
  wire out_ne_expr_FU_16_0_16_68_i0_fu___float64_mulif_14503_14527;
  wire out_ne_expr_FU_16_0_16_68_i1_fu___float64_mulif_14503_14557;
  wire signed [12:0] out_plus_expr_FU_16_16_16_69_i0_fu___float64_mulif_14503_14613;
  wire [2:0] out_reg_0_reg_0;
  wire [45:0] out_reg_10_reg_10;
  wire [60:0] out_reg_11_reg_11;
  wire [22:0] out_reg_12_reg_12;
  wire [22:0] out_reg_13_reg_13;
  wire [63:0] out_reg_14_reg_14;
  wire [45:0] out_reg_15_reg_15;
  wire [40:0] out_reg_16_reg_16;
  wire out_reg_17_reg_17;
  wire [51:0] out_reg_18_reg_18;
  wire out_reg_19_reg_19;
  wire [11:0] out_reg_1_reg_1;
  wire out_reg_20_reg_20;
  wire [51:0] out_reg_21_reg_21;
  wire out_reg_22_reg_22;
  wire [63:0] out_reg_23_reg_23;
  wire out_reg_24_reg_24;
  wire out_reg_25_reg_25;
  wire out_reg_26_reg_26;
  wire out_reg_27_reg_27;
  wire [1:0] out_reg_28_reg_28;
  wire [63:0] out_reg_29_reg_29;
  wire [63:0] out_reg_2_reg_2;
  wire [63:0] out_reg_3_reg_3;
  wire [63:0] out_reg_4_reg_4;
  wire out_reg_5_reg_5;
  wire out_reg_6_reg_6;
  wire out_reg_7_reg_7;
  wire out_reg_8_reg_8;
  wire [59:0] out_reg_9_reg_9;
  wire out_truth_and_expr_FU_1_1_1_70_i0_fu___float64_mulif_14503_31600;
  wire out_truth_and_expr_FU_1_1_1_70_i1_fu___float64_mulif_14503_31607;
  wire out_truth_and_expr_FU_1_1_1_70_i2_fu___float64_mulif_14503_31610;
  wire out_truth_and_expr_FU_1_1_1_70_i3_fu___float64_mulif_14503_31617;
  wire out_truth_and_expr_FU_1_1_1_70_i4_fu___float64_mulif_14503_31620;
  wire out_truth_and_expr_FU_1_1_1_70_i5_fu___float64_mulif_14503_31624;
  wire out_truth_and_expr_FU_1_1_1_70_i6_fu___float64_mulif_14503_31630;
  wire out_truth_and_expr_FU_1_1_1_70_i7_fu___float64_mulif_14503_31634;
  wire out_truth_and_expr_FU_1_1_1_70_i8_fu___float64_mulif_14503_31640;
  wire out_truth_not_expr_FU_1_1_71_i0_fu___float64_mulif_14503_31597;
  wire out_truth_not_expr_FU_1_1_71_i1_fu___float64_mulif_14503_31604;
  wire out_truth_not_expr_FU_1_1_71_i2_fu___float64_mulif_14503_31614;
  wire out_truth_not_expr_FU_1_1_71_i3_fu___float64_mulif_14503_31627;
  wire out_truth_not_expr_FU_1_1_71_i4_fu___float64_mulif_14503_31637;
  wire out_truth_or_expr_FU_1_1_1_72_i0_fu___float64_mulif_14503_31647;
  wire out_truth_or_expr_FU_1_1_1_72_i1_fu___float64_mulif_14503_31653;
  wire out_truth_or_expr_FU_1_1_1_72_i2_fu___float64_mulif_14503_31659;
  wire out_truth_or_expr_FU_1_1_1_72_i3_fu___float64_mulif_14503_31665;
  wire out_truth_xor_expr_FU_1_0_1_73_i0_fu___float64_mulif_14503_30352;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_74_i0_fu___float64_mulif_14503_14535;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_74_i1_fu___float64_mulif_14503_14565;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_74_i2_fu___float64_mulif_14503_14599;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_74_i3_fu___float64_mulif_14503_14606;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_75_i0_fu___float64_mulif_14503_14642;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_75_i1_fu___float64_mulif_14503_14666;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i0_fu___float64_mulif_14503_14523;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i10_fu___float64_mulif_14503_14605;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i11_fu___float64_mulif_14503_14609;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i12_fu___float64_mulif_14503_14669;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i13_fu___float64_mulif_14503_14672;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i14_fu___float64_mulif_14503_14683;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i1_fu___float64_mulif_14503_14525;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i2_fu___float64_mulif_14503_14528;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i3_fu___float64_mulif_14503_14553;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i4_fu___float64_mulif_14503_14555;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i5_fu___float64_mulif_14503_14558;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i6_fu___float64_mulif_14503_14588;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i7_fu___float64_mulif_14503_14590;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i8_fu___float64_mulif_14503_14601;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_76_i9_fu___float64_mulif_14503_14602;
  wire [22:0] out_ui_bit_and_expr_FU_32_0_32_77_i0_fu___float64_mulif_14503_14618;
  wire [22:0] out_ui_bit_and_expr_FU_32_0_32_77_i1_fu___float64_mulif_14503_14620;
  wire [22:0] out_ui_bit_and_expr_FU_32_0_32_77_i2_fu___float64_mulif_14503_14631;
  wire [22:0] out_ui_bit_and_expr_FU_32_0_32_77_i3_fu___float64_mulif_14503_14632;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_78_i0_fu___float64_mulif_14503_14510;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_78_i1_fu___float64_mulif_14503_14515;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_79_i0_fu___float64_mulif_14503_14649;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_79_i1_fu___float64_mulif_14503_14655;
  wire [53:0] out_ui_bit_and_expr_FU_64_0_64_80_i0_fu___float64_mulif_14503_14651;
  wire [53:0] out_ui_bit_and_expr_FU_64_0_64_80_i1_fu___float64_mulif_14503_14657;
  wire [52:0] out_ui_bit_and_expr_FU_64_0_64_81_i0_fu___float64_mulif_14503_14664;
  wire [62:0] out_ui_bit_and_expr_FU_64_0_64_82_i0_fu___float64_mulif_14503_14676;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_83_i0_fu___float64_mulif_14503_14542;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_83_i1_fu___float64_mulif_14503_14572;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_84_i0_fu___float64_mulif_14503_14637;
  wire [2:0] out_ui_bit_and_expr_FU_8_8_8_85_i0_fu___float64_mulif_14503_14592;
  wire [63:0] out_ui_bit_ior_concat_expr_FU_86_i0_fu___float64_mulif_14503_14700;
  wire [45:0] out_ui_bit_ior_expr_FU_0_64_64_87_i0_fu___float64_mulif_14503_14634;
  wire [53:0] out_ui_bit_ior_expr_FU_0_64_64_88_i0_fu___float64_mulif_14503_14639;
  wire [52:0] out_ui_bit_ior_expr_FU_0_64_64_89_i0_fu___float64_mulif_14503_14648;
  wire [52:0] out_ui_bit_ior_expr_FU_0_64_64_90_i0_fu___float64_mulif_14503_14654;
  wire [63:0] out_ui_bit_ior_expr_FU_0_64_64_91_i0_fu___float64_mulif_14503_14662;
  wire [63:0] out_ui_bit_ior_expr_FU_0_64_64_92_i0_fu___float64_mulif_14503_14677;
  wire [1:0] out_ui_bit_ior_expr_FU_0_8_8_93_i0_fu___float64_mulif_14503_14543;
  wire [1:0] out_ui_bit_ior_expr_FU_0_8_8_94_i0_fu___float64_mulif_14503_14573;
  wire [1:0] out_ui_bit_ior_expr_FU_0_8_8_95_i0_fu___float64_mulif_14503_14689;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_96_i0_fu___float64_mulif_14503_14584;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_96_i1_fu___float64_mulif_14503_14671;
  wire [52:0] out_ui_bit_ior_expr_FU_64_0_64_97_i0_fu___float64_mulif_14503_14616;
  wire [52:0] out_ui_bit_ior_expr_FU_64_0_64_97_i1_fu___float64_mulif_14503_14617;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_98_i0_fu___float64_mulif_14503_14550;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_98_i1_fu___float64_mulif_14503_14580;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_100_i0_fu___float64_mulif_14503_14600;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_100_i1_fu___float64_mulif_14503_14607;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_99_i0_fu___float64_mulif_14503_14598;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_99_i1_fu___float64_mulif_14503_14604;
  wire [0:0] out_ui_bit_xor_expr_FU_1_1_1_101_i0_fu___float64_mulif_14503_14520;
  wire [0:0] out_ui_bit_xor_expr_FU_1_1_1_101_i1_fu___float64_mulif_14503_14686;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_102_i0_fu___float64_mulif_14503_30398;
  wire [52:0] out_ui_cond_expr_FU_64_64_64_64_103_i0_fu___float64_mulif_14503_31641;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_103_i1_fu___float64_mulif_14503_31643;
  wire [1:0] out_ui_cond_expr_FU_8_8_8_8_104_i0_fu___float64_mulif_14503_31592;
  wire out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_mulif_14503_29874;
  wire out_ui_eq_expr_FU_64_0_64_106_i0_fu___float64_mulif_14503_14522;
  wire out_ui_eq_expr_FU_64_0_64_106_i1_fu___float64_mulif_14503_14552;
  wire out_ui_eq_expr_FU_64_0_64_107_i0_fu___float64_mulif_14503_14681;
  wire out_ui_eq_expr_FU_8_0_8_108_i0_fu___float64_mulif_14503_29866;
  wire out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_mulif_14503_29870;
  wire out_ui_eq_expr_FU_8_0_8_110_i0_fu___float64_mulif_14503_29872;
  wire out_ui_extract_bit_expr_FU_39_i0_fu___float64_mulif_14503_30412;
  wire out_ui_extract_bit_expr_FU_42_i0_fu___float64_mulif_14503_30390;
  wire out_ui_extract_bit_expr_FU_45_i0_fu___float64_mulif_14503_32644;
  wire out_ui_extract_bit_expr_FU_46_i0_fu___float64_mulif_14503_32648;
  wire out_ui_extract_bit_expr_FU_50_i0_fu___float64_mulif_14503_30356;
  wire [45:0] out_ui_lshift_expr_FU_64_0_64_111_i0_fu___float64_mulif_14503_14633;
  wire [53:0] out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_mulif_14503_14638;
  wire [52:0] out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_mulif_14503_14646;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_mulif_14503_14650;
  wire [52:0] out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_mulif_14503_14652;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_mulif_14503_14656;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_mulif_14503_14661;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_mulif_14503_14675;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_mulif_14503_30369;
  wire [53:0] out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_mulif_14503_31699;
  wire [1:0] out_ui_lshift_expr_FU_8_0_8_119_i0_fu___float64_mulif_14503_14688;
  wire [63:0] out_ui_minus_expr_FU_64_64_64_120_i0_fu___float64_mulif_14503_14629;
  wire out_ui_ne_expr_FU_64_0_64_121_i0_fu___float64_mulif_14503_14524;
  wire out_ui_ne_expr_FU_64_0_64_121_i1_fu___float64_mulif_14503_14554;
  wire out_ui_ne_expr_FU_64_0_64_122_i0_fu___float64_mulif_14503_14665;
  wire out_ui_ne_expr_FU_8_0_8_123_i0_fu___float64_mulif_14503_29864;
  wire [30:0] out_ui_plus_expr_FU_32_32_32_124_i0_fu___float64_mulif_14503_14624;
  wire [30:0] out_ui_plus_expr_FU_32_32_32_124_i1_fu___float64_mulif_14503_14625;
  wire [60:0] out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636;
  wire [63:0] out_ui_plus_expr_FU_64_64_64_125_i1_fu___float64_mulif_14503_14673;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_126_i0_fu___float64_mulif_14503_14511;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_126_i1_fu___float64_mulif_14503_14516;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_126_i2_fu___float64_mulif_14503_14653;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_127_i0_fu___float64_mulif_14503_14514;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_127_i1_fu___float64_mulif_14503_14519;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_127_i2_fu___float64_mulif_14503_14679;
  wire [29:0] out_ui_rshift_expr_FU_64_0_64_128_i0_fu___float64_mulif_14503_14619;
  wire [29:0] out_ui_rshift_expr_FU_64_0_64_128_i1_fu___float64_mulif_14503_14621;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_128_i2_fu___float64_mulif_14503_14628;
  wire [40:0] out_ui_rshift_expr_FU_64_0_64_128_i3_fu___float64_mulif_14503_14635;
  wire [52:0] out_ui_rshift_expr_FU_64_0_64_129_i0_fu___float64_mulif_14503_14640;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_130_i0_fu___float64_mulif_14503_14641;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_131_i0_fu___float64_mulif_14503_14647;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_131_i1_fu___float64_mulif_14503_14663;
  wire [51:0] out_ui_rshift_expr_FU_64_0_64_132_i0_fu___float64_mulif_14503_30348;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_133_i0_fu___float64_mulif_14503_30364;
  wire [52:0] out_ui_rshift_expr_FU_64_0_64_134_i0_fu___float64_mulif_14503_31692;
  wire [52:0] out_ui_rshift_expr_FU_64_0_64_134_i1_fu___float64_mulif_14503_31695;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_135_i0_fu___float64_mulif_14503_14581;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_135_i1_fu___float64_mulif_14503_14582;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_136_i0_fu___float64_mulif_14503_30374;
  wire [12:0] out_ui_ternary_plus_expr_FU_16_0_16_16_137_i0_fu___float64_mulif_14503_14644;
  wire [63:0] out_ui_ternary_pm_expr_FU_64_64_64_64_138_i0_fu___float64_mulif_14503_14630;
  wire [63:0] out_ui_view_convert_expr_FU_43_i0_fu___float64_mulif_14503_14701;
  wire [63:0] out_ui_view_convert_expr_FU_44_i0_fu___float64_mulif_14503_14698;
  wire [63:0] out_ui_view_convert_expr_FU_48_i0_fu___float64_mulif_14503_14695;
  wire [59:0] out_ui_widen_mult_expr_FU_32_32_64_6_139_i0_fu___float64_mulif_14503_14622;
  wire [45:0] out_ui_widen_mult_expr_FU_32_32_64_6_139_i1_fu___float64_mulif_14503_14623;
  wire [60:0] out_ui_widen_mult_expr_FU_32_32_64_6_139_i2_fu___float64_mulif_14503_14626;
  
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(64), .value(64'b0111111111111000000000000000000000000000000000000000000000000000)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_12 (.out1(out_const_12));
  constant_value #(.BITSIZE_out1(2), .value(2'b10)) const_13 (.out1(out_const_13));
  constant_value #(.BITSIZE_out1(53), .value(53'b10000000000000000000000000000000000000000000000000000)) const_14 (.out1(out_const_14));
  constant_value #(.BITSIZE_out1(2), .value(2'b11)) const_15 (.out1(out_const_15));
  constant_value #(.BITSIZE_out1(3), .value(3'b110)) const_16 (.out1(out_const_16));
  constant_value #(.BITSIZE_out1(4), .value(4'b1100)) const_17 (.out1(out_const_17));
  constant_value #(.BITSIZE_out1(3), .value(3'b111)) const_18 (.out1(out_const_18));
  constant_value #(.BITSIZE_out1(6), .value(6'b111011)) const_19 (.out1(out_const_19));
  constant_value #(.BITSIZE_out1(3), .value(3'b010)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_20 (.out1(out_const_20));
  constant_value #(.BITSIZE_out1(16), .value(16'b1111110000000001)) const_21 (.out1(out_const_21));
  constant_value #(.BITSIZE_out1(8), .value(8'b11111111)) const_22 (.out1(out_const_22));
  constant_value #(.BITSIZE_out1(63), .value(63'b111111111110000000000000000000000000000000000000000000000000000)) const_23 (.out1(out_const_23));
  constant_value #(.BITSIZE_out1(23), .value(23'b11111111111111111111111)) const_24 (.out1(out_const_24));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_25 (.out1(out_const_25));
  constant_value #(.BITSIZE_out1(53), .value(53'b11111111111111111111111111111111111111111111111111111)) const_26 (.out1(out_const_26));
  constant_value #(.BITSIZE_out1(54), .value(54'b111111111111111111111111111111111111111111111111111111)) const_27 (.out1(out_const_27));
  constant_value #(.BITSIZE_out1(63), .value(63'b111111111111111111111111111111111111111111111111111111111111111)) const_28 (.out1(out_const_28));
  constant_value #(.BITSIZE_out1(64), .value(64'b1111111111111111111111111111111111111111111111111111111111111111)) const_29 (.out1(out_const_29));
  constant_value #(.BITSIZE_out1(5), .value(5'b01000)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(6), .value(6'b010111)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(7), .value(7'b0101110)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110011)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110101)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111111)) const_9 (.out1(out_const_9));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14508 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_mulif_14503_14508), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14509 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_mulif_14503_14509), .in1(in_port_b));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_mulif_14503_14510 (.out1(out_ui_bit_and_expr_FU_64_0_64_78_i0_fu___float64_mulif_14503_14510), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_mulif_14503_14508), .in2(out_const_25));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_mulif_14503_14511 (.out1(out_ui_rshift_expr_FU_64_0_64_126_i0_fu___float64_mulif_14503_14511), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_mulif_14503_14508), .in2(out_const_7));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_mulif_14503_14512 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_mulif_14503_14512), .in1(out_ui_rshift_expr_FU_64_0_64_126_i0_fu___float64_mulif_14503_14511));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_mulif_14503_14513 (.out1(out_bit_and_expr_FU_16_0_16_53_i0_fu___float64_mulif_14503_14513), .in1(out_UIdata_converter_FU_4_i0_fu___float64_mulif_14503_14512), .in2(out_const_10));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_mulif_14503_14514 (.out1(out_ui_rshift_expr_FU_64_0_64_127_i0_fu___float64_mulif_14503_14514), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_mulif_14503_14508), .in2(out_const_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_mulif_14503_14515 (.out1(out_ui_bit_and_expr_FU_64_0_64_78_i1_fu___float64_mulif_14503_14515), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_mulif_14503_14509), .in2(out_const_25));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_mulif_14503_14516 (.out1(out_ui_rshift_expr_FU_64_0_64_126_i1_fu___float64_mulif_14503_14516), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_mulif_14503_14509), .in2(out_const_7));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_mulif_14503_14517 (.out1(out_UIdata_converter_FU_5_i0_fu___float64_mulif_14503_14517), .in1(out_ui_rshift_expr_FU_64_0_64_126_i1_fu___float64_mulif_14503_14516));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_mulif_14503_14518 (.out1(out_bit_and_expr_FU_16_0_16_53_i1_fu___float64_mulif_14503_14518), .in1(out_UIdata_converter_FU_5_i0_fu___float64_mulif_14503_14517), .in2(out_const_10));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_mulif_14503_14519 (.out1(out_ui_rshift_expr_FU_64_0_64_127_i1_fu___float64_mulif_14503_14519), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_mulif_14503_14509), .in2(out_const_9));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14520 (.out1(out_ui_bit_xor_expr_FU_1_1_1_101_i0_fu___float64_mulif_14503_14520), .in1(out_ui_rshift_expr_FU_64_0_64_127_i0_fu___float64_mulif_14503_14514), .in2(out_ui_rshift_expr_FU_64_0_64_127_i1_fu___float64_mulif_14503_14519));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_mulif_14503_14521 (.out1(out_eq_expr_FU_16_0_16_63_i0_fu___float64_mulif_14503_14521), .in1(out_bit_and_expr_FU_16_0_16_53_i0_fu___float64_mulif_14503_14513), .in2(out_const_10));
  ui_eq_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14522 (.out1(out_ui_eq_expr_FU_64_0_64_106_i0_fu___float64_mulif_14503_14522), .in1(out_ui_bit_and_expr_FU_64_0_64_78_i0_fu___float64_mulif_14503_14510), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14523 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i0_fu___float64_mulif_14503_14523), .in1(out_eq_expr_FU_16_0_16_63_i0_fu___float64_mulif_14503_14521), .in2(out_ui_eq_expr_FU_64_0_64_106_i0_fu___float64_mulif_14503_14522));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14524 (.out1(out_ui_ne_expr_FU_64_0_64_121_i0_fu___float64_mulif_14503_14524), .in1(out_ui_bit_and_expr_FU_64_0_64_78_i0_fu___float64_mulif_14503_14510), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14525 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i1_fu___float64_mulif_14503_14525), .in1(out_eq_expr_FU_16_0_16_63_i0_fu___float64_mulif_14503_14521), .in2(out_ui_ne_expr_FU_64_0_64_121_i0_fu___float64_mulif_14503_14524));
  ne_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14526 (.out1(out_ne_expr_FU_16_0_16_67_i0_fu___float64_mulif_14503_14526), .in1(out_bit_and_expr_FU_16_0_16_53_i0_fu___float64_mulif_14503_14513), .in2(out_const_0));
  ne_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_mulif_14503_14527 (.out1(out_ne_expr_FU_16_0_16_68_i0_fu___float64_mulif_14503_14527), .in1(out_bit_and_expr_FU_16_0_16_53_i0_fu___float64_mulif_14503_14513), .in2(out_const_10));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14528 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i2_fu___float64_mulif_14503_14528), .in1(out_ne_expr_FU_16_0_16_68_i0_fu___float64_mulif_14503_14527), .in2(out_ne_expr_FU_16_0_16_67_i0_fu___float64_mulif_14503_14526));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14529 (.out1(out_UIconvert_expr_FU_6_i0_fu___float64_mulif_14503_14529), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i2_fu___float64_mulif_14503_14528));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14530 (.out1(out_lshift_expr_FU_16_0_16_66_i0_fu___float64_mulif_14503_14530), .in1(out_UIconvert_expr_FU_6_i0_fu___float64_mulif_14503_14529), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14531 (.out1(out_IIconvert_expr_FU_7_i0_fu___float64_mulif_14503_14531), .in1(out_lshift_expr_FU_16_0_16_66_i0_fu___float64_mulif_14503_14530));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14532 (.out1(out_UIconvert_expr_FU_8_i0_fu___float64_mulif_14503_14532), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i2_fu___float64_mulif_14503_14528));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14533 (.out1(out_bit_ior_expr_FU_0_8_8_55_i0_fu___float64_mulif_14503_14533), .in1(out_IIconvert_expr_FU_7_i0_fu___float64_mulif_14503_14531), .in2(out_UIconvert_expr_FU_8_i0_fu___float64_mulif_14503_14532));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14534 (.out1(out_IUdata_converter_FU_9_i0_fu___float64_mulif_14503_14534), .in1(out_bit_ior_expr_FU_0_8_8_55_i0_fu___float64_mulif_14503_14533));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14535 (.out1(out_ui_bit_and_expr_FU_1_0_1_74_i0_fu___float64_mulif_14503_14535), .in1(out_IUdata_converter_FU_9_i0_fu___float64_mulif_14503_14534), .in2(out_const_12));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14536 (.out1(out_UIconvert_expr_FU_10_i0_fu___float64_mulif_14503_14536), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i0_fu___float64_mulif_14503_14523));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14537 (.out1(out_lshift_expr_FU_16_0_16_66_i1_fu___float64_mulif_14503_14537), .in1(out_UIconvert_expr_FU_10_i0_fu___float64_mulif_14503_14536), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14538 (.out1(out_IIconvert_expr_FU_11_i0_fu___float64_mulif_14503_14538), .in1(out_lshift_expr_FU_16_0_16_66_i1_fu___float64_mulif_14503_14537));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14539 (.out1(out_UIconvert_expr_FU_12_i0_fu___float64_mulif_14503_14539), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i0_fu___float64_mulif_14503_14523));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14540 (.out1(out_bit_ior_expr_FU_0_8_8_56_i0_fu___float64_mulif_14503_14540), .in1(out_IIconvert_expr_FU_11_i0_fu___float64_mulif_14503_14538), .in2(out_UIconvert_expr_FU_12_i0_fu___float64_mulif_14503_14539));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14541 (.out1(out_IUdata_converter_FU_13_i0_fu___float64_mulif_14503_14541), .in1(out_bit_ior_expr_FU_0_8_8_56_i0_fu___float64_mulif_14503_14540));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14542 (.out1(out_ui_bit_and_expr_FU_8_0_8_83_i0_fu___float64_mulif_14503_14542), .in1(out_IUdata_converter_FU_13_i0_fu___float64_mulif_14503_14541), .in2(out_const_13));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14543 (.out1(out_ui_bit_ior_expr_FU_0_8_8_93_i0_fu___float64_mulif_14503_14543), .in1(out_ui_bit_and_expr_FU_1_0_1_74_i0_fu___float64_mulif_14503_14535), .in2(out_ui_bit_and_expr_FU_8_0_8_83_i0_fu___float64_mulif_14503_14542));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14544 (.out1(out_UIconvert_expr_FU_14_i0_fu___float64_mulif_14503_14544), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i1_fu___float64_mulif_14503_14525));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14545 (.out1(out_lshift_expr_FU_16_0_16_66_i2_fu___float64_mulif_14503_14545), .in1(out_UIconvert_expr_FU_14_i0_fu___float64_mulif_14503_14544), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14546 (.out1(out_IIconvert_expr_FU_15_i0_fu___float64_mulif_14503_14546), .in1(out_lshift_expr_FU_16_0_16_66_i2_fu___float64_mulif_14503_14545));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14547 (.out1(out_UIconvert_expr_FU_16_i0_fu___float64_mulif_14503_14547), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i1_fu___float64_mulif_14503_14525));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14548 (.out1(out_bit_ior_expr_FU_0_8_8_57_i0_fu___float64_mulif_14503_14548), .in1(out_IIconvert_expr_FU_15_i0_fu___float64_mulif_14503_14546), .in2(out_UIconvert_expr_FU_16_i0_fu___float64_mulif_14503_14547));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14549 (.out1(out_IUdata_converter_FU_17_i0_fu___float64_mulif_14503_14549), .in1(out_bit_ior_expr_FU_0_8_8_57_i0_fu___float64_mulif_14503_14548));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14550 (.out1(out_ui_bit_ior_expr_FU_8_8_8_98_i0_fu___float64_mulif_14503_14550), .in1(out_ui_bit_ior_expr_FU_0_8_8_93_i0_fu___float64_mulif_14503_14543), .in2(out_IUdata_converter_FU_17_i0_fu___float64_mulif_14503_14549));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_mulif_14503_14551 (.out1(out_eq_expr_FU_16_0_16_63_i1_fu___float64_mulif_14503_14551), .in1(out_bit_and_expr_FU_16_0_16_53_i1_fu___float64_mulif_14503_14518), .in2(out_const_10));
  ui_eq_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14552 (.out1(out_ui_eq_expr_FU_64_0_64_106_i1_fu___float64_mulif_14503_14552), .in1(out_ui_bit_and_expr_FU_64_0_64_78_i1_fu___float64_mulif_14503_14515), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14553 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i3_fu___float64_mulif_14503_14553), .in1(out_eq_expr_FU_16_0_16_63_i1_fu___float64_mulif_14503_14551), .in2(out_ui_eq_expr_FU_64_0_64_106_i1_fu___float64_mulif_14503_14552));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14554 (.out1(out_ui_ne_expr_FU_64_0_64_121_i1_fu___float64_mulif_14503_14554), .in1(out_ui_bit_and_expr_FU_64_0_64_78_i1_fu___float64_mulif_14503_14515), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14555 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i4_fu___float64_mulif_14503_14555), .in1(out_eq_expr_FU_16_0_16_63_i1_fu___float64_mulif_14503_14551), .in2(out_ui_ne_expr_FU_64_0_64_121_i1_fu___float64_mulif_14503_14554));
  ne_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14556 (.out1(out_ne_expr_FU_16_0_16_67_i1_fu___float64_mulif_14503_14556), .in1(out_bit_and_expr_FU_16_0_16_53_i1_fu___float64_mulif_14503_14518), .in2(out_const_0));
  ne_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_mulif_14503_14557 (.out1(out_ne_expr_FU_16_0_16_68_i1_fu___float64_mulif_14503_14557), .in1(out_bit_and_expr_FU_16_0_16_53_i1_fu___float64_mulif_14503_14518), .in2(out_const_10));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14558 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i5_fu___float64_mulif_14503_14558), .in1(out_ne_expr_FU_16_0_16_68_i1_fu___float64_mulif_14503_14557), .in2(out_ne_expr_FU_16_0_16_67_i1_fu___float64_mulif_14503_14556));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14559 (.out1(out_UIconvert_expr_FU_18_i0_fu___float64_mulif_14503_14559), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i5_fu___float64_mulif_14503_14558));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14560 (.out1(out_lshift_expr_FU_16_0_16_66_i3_fu___float64_mulif_14503_14560), .in1(out_UIconvert_expr_FU_18_i0_fu___float64_mulif_14503_14559), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14561 (.out1(out_IIconvert_expr_FU_19_i0_fu___float64_mulif_14503_14561), .in1(out_lshift_expr_FU_16_0_16_66_i3_fu___float64_mulif_14503_14560));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14562 (.out1(out_UIconvert_expr_FU_20_i0_fu___float64_mulif_14503_14562), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i5_fu___float64_mulif_14503_14558));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14563 (.out1(out_bit_ior_expr_FU_0_8_8_58_i0_fu___float64_mulif_14503_14563), .in1(out_IIconvert_expr_FU_19_i0_fu___float64_mulif_14503_14561), .in2(out_UIconvert_expr_FU_20_i0_fu___float64_mulif_14503_14562));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14564 (.out1(out_IUdata_converter_FU_21_i0_fu___float64_mulif_14503_14564), .in1(out_bit_ior_expr_FU_0_8_8_58_i0_fu___float64_mulif_14503_14563));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14565 (.out1(out_ui_bit_and_expr_FU_1_0_1_74_i1_fu___float64_mulif_14503_14565), .in1(out_IUdata_converter_FU_21_i0_fu___float64_mulif_14503_14564), .in2(out_const_12));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14566 (.out1(out_UIconvert_expr_FU_22_i0_fu___float64_mulif_14503_14566), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i3_fu___float64_mulif_14503_14553));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14567 (.out1(out_lshift_expr_FU_16_0_16_66_i4_fu___float64_mulif_14503_14567), .in1(out_UIconvert_expr_FU_22_i0_fu___float64_mulif_14503_14566), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14568 (.out1(out_IIconvert_expr_FU_23_i0_fu___float64_mulif_14503_14568), .in1(out_lshift_expr_FU_16_0_16_66_i4_fu___float64_mulif_14503_14567));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14569 (.out1(out_UIconvert_expr_FU_24_i0_fu___float64_mulif_14503_14569), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i3_fu___float64_mulif_14503_14553));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14570 (.out1(out_bit_ior_expr_FU_0_8_8_59_i0_fu___float64_mulif_14503_14570), .in1(out_IIconvert_expr_FU_23_i0_fu___float64_mulif_14503_14568), .in2(out_UIconvert_expr_FU_24_i0_fu___float64_mulif_14503_14569));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14571 (.out1(out_IUdata_converter_FU_25_i0_fu___float64_mulif_14503_14571), .in1(out_bit_ior_expr_FU_0_8_8_59_i0_fu___float64_mulif_14503_14570));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14572 (.out1(out_ui_bit_and_expr_FU_8_0_8_83_i1_fu___float64_mulif_14503_14572), .in1(out_IUdata_converter_FU_25_i0_fu___float64_mulif_14503_14571), .in2(out_const_13));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14573 (.out1(out_ui_bit_ior_expr_FU_0_8_8_94_i0_fu___float64_mulif_14503_14573), .in1(out_ui_bit_and_expr_FU_1_0_1_74_i1_fu___float64_mulif_14503_14565), .in2(out_ui_bit_and_expr_FU_8_0_8_83_i1_fu___float64_mulif_14503_14572));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14574 (.out1(out_UIconvert_expr_FU_26_i0_fu___float64_mulif_14503_14574), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i4_fu___float64_mulif_14503_14555));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14575 (.out1(out_lshift_expr_FU_16_0_16_66_i5_fu___float64_mulif_14503_14575), .in1(out_UIconvert_expr_FU_26_i0_fu___float64_mulif_14503_14574), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14576 (.out1(out_IIconvert_expr_FU_27_i0_fu___float64_mulif_14503_14576), .in1(out_lshift_expr_FU_16_0_16_66_i5_fu___float64_mulif_14503_14575));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14577 (.out1(out_UIconvert_expr_FU_28_i0_fu___float64_mulif_14503_14577), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i4_fu___float64_mulif_14503_14555));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14578 (.out1(out_bit_ior_expr_FU_0_8_8_60_i0_fu___float64_mulif_14503_14578), .in1(out_IIconvert_expr_FU_27_i0_fu___float64_mulif_14503_14576), .in2(out_UIconvert_expr_FU_28_i0_fu___float64_mulif_14503_14577));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14579 (.out1(out_IUdata_converter_FU_29_i0_fu___float64_mulif_14503_14579), .in1(out_bit_ior_expr_FU_0_8_8_60_i0_fu___float64_mulif_14503_14578));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14580 (.out1(out_ui_bit_ior_expr_FU_8_8_8_98_i1_fu___float64_mulif_14503_14580), .in1(out_ui_bit_ior_expr_FU_0_8_8_94_i0_fu___float64_mulif_14503_14573), .in2(out_IUdata_converter_FU_29_i0_fu___float64_mulif_14503_14579));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(8)) fu___float64_mulif_14503_14581 (.out1(out_ui_rshift_expr_FU_8_0_8_135_i0_fu___float64_mulif_14503_14581), .in1(out_ui_bit_ior_expr_FU_8_8_8_98_i0_fu___float64_mulif_14503_14550), .in2(out_const_1));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(8)) fu___float64_mulif_14503_14582 (.out1(out_ui_rshift_expr_FU_8_0_8_135_i1_fu___float64_mulif_14503_14582), .in1(out_ui_bit_ior_expr_FU_8_8_8_98_i1_fu___float64_mulif_14503_14580), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14584 (.out1(out_ui_bit_ior_expr_FU_1_1_1_96_i0_fu___float64_mulif_14503_14584), .in1(out_ui_rshift_expr_FU_8_0_8_135_i0_fu___float64_mulif_14503_14581), .in2(out_ui_rshift_expr_FU_8_0_8_135_i1_fu___float64_mulif_14503_14582));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) fu___float64_mulif_14503_14585 (.out1(out_UIdata_converter_FU_30_i0_fu___float64_mulif_14503_14585), .in1(out_ui_bit_ior_expr_FU_1_1_1_96_i0_fu___float64_mulif_14503_14584));
  lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(9), .PRECISION(32)) fu___float64_mulif_14503_14586 (.out1(out_lshift_expr_FU_16_0_16_66_i6_fu___float64_mulif_14503_14586), .in1(out_UIdata_converter_FU_30_i0_fu___float64_mulif_14503_14585), .in2(out_const_1));
  IIconvert_expr_FU #(.BITSIZE_in1(9), .BITSIZE_out1(3)) fu___float64_mulif_14503_14587 (.out1(out_IIconvert_expr_FU_31_i0_fu___float64_mulif_14503_14587), .in1(out_lshift_expr_FU_16_0_16_66_i6_fu___float64_mulif_14503_14586));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_mulif_14503_14588 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i6_fu___float64_mulif_14503_14588), .in1(out_ui_rshift_expr_FU_8_0_8_135_i0_fu___float64_mulif_14503_14581), .in2(out_ui_bit_ior_expr_FU_8_8_8_98_i0_fu___float64_mulif_14503_14550));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14589 (.out1(out_UIdata_converter_FU_32_i0_fu___float64_mulif_14503_14589), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i6_fu___float64_mulif_14503_14588));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_mulif_14503_14590 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i7_fu___float64_mulif_14503_14590), .in1(out_ui_rshift_expr_FU_8_0_8_135_i1_fu___float64_mulif_14503_14582), .in2(out_ui_bit_ior_expr_FU_8_8_8_98_i1_fu___float64_mulif_14503_14580));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14591 (.out1(out_UIdata_converter_FU_33_i0_fu___float64_mulif_14503_14591), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i7_fu___float64_mulif_14503_14590));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14592 (.out1(out_ui_bit_and_expr_FU_8_8_8_85_i0_fu___float64_mulif_14503_14592), .in1(out_ui_bit_ior_expr_FU_8_8_8_98_i0_fu___float64_mulif_14503_14550), .in2(out_ui_bit_ior_expr_FU_8_8_8_98_i1_fu___float64_mulif_14503_14580));
  UIdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(3)) fu___float64_mulif_14503_14593 (.out1(out_UIdata_converter_FU_34_i0_fu___float64_mulif_14503_14593), .in1(out_ui_bit_and_expr_FU_8_8_8_85_i0_fu___float64_mulif_14503_14592));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14594 (.out1(out_bit_ior_expr_FU_8_8_8_62_i0_fu___float64_mulif_14503_14594), .in1(out_UIdata_converter_FU_34_i0_fu___float64_mulif_14503_14593), .in2(out_UIdata_converter_FU_33_i0_fu___float64_mulif_14503_14591));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14595 (.out1(out_bit_ior_expr_FU_8_8_8_62_i1_fu___float64_mulif_14503_14595), .in1(out_bit_ior_expr_FU_8_8_8_62_i0_fu___float64_mulif_14503_14594), .in2(out_UIdata_converter_FU_32_i0_fu___float64_mulif_14503_14589));
  bit_and_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14596 (.out1(out_bit_and_expr_FU_8_0_8_54_i0_fu___float64_mulif_14503_14596), .in1(out_bit_ior_expr_FU_8_8_8_62_i1_fu___float64_mulif_14503_14595), .in2(out_const_1));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(3), .BITSIZE_out1(3)) fu___float64_mulif_14503_14597 (.out1(out_bit_ior_expr_FU_0_8_8_61_i0_fu___float64_mulif_14503_14597), .in1(out_bit_and_expr_FU_8_0_8_54_i0_fu___float64_mulif_14503_14596), .in2(out_IIconvert_expr_FU_31_i0_fu___float64_mulif_14503_14587));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14598 (.out1(out_ui_bit_xor_expr_FU_1_0_1_99_i0_fu___float64_mulif_14503_14598), .in1(out_ui_rshift_expr_FU_8_0_8_135_i0_fu___float64_mulif_14503_14581), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14599 (.out1(out_ui_bit_and_expr_FU_1_0_1_74_i2_fu___float64_mulif_14503_14599), .in1(out_ui_bit_ior_expr_FU_8_8_8_98_i0_fu___float64_mulif_14503_14550), .in2(out_const_12));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14600 (.out1(out_ui_bit_xor_expr_FU_1_0_1_100_i0_fu___float64_mulif_14503_14600), .in1(out_ui_bit_and_expr_FU_1_0_1_74_i2_fu___float64_mulif_14503_14599), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14601 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i8_fu___float64_mulif_14503_14601), .in1(out_ui_bit_xor_expr_FU_1_0_1_100_i0_fu___float64_mulif_14503_14600), .in2(out_ui_bit_xor_expr_FU_1_0_1_99_i0_fu___float64_mulif_14503_14598));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14602 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i9_fu___float64_mulif_14503_14602), .in1(out_ui_rshift_expr_FU_8_0_8_135_i1_fu___float64_mulif_14503_14582), .in2(out_ui_bit_and_expr_FU_1_1_1_76_i8_fu___float64_mulif_14503_14601));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14603 (.out1(out_UIdata_converter_FU_35_i0_fu___float64_mulif_14503_14603), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i9_fu___float64_mulif_14503_14602));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14604 (.out1(out_ui_bit_xor_expr_FU_1_0_1_99_i1_fu___float64_mulif_14503_14604), .in1(out_ui_rshift_expr_FU_8_0_8_135_i1_fu___float64_mulif_14503_14582), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14605 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i10_fu___float64_mulif_14503_14605), .in1(out_ui_bit_xor_expr_FU_1_0_1_99_i1_fu___float64_mulif_14503_14604), .in2(out_ui_rshift_expr_FU_8_0_8_135_i0_fu___float64_mulif_14503_14581));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14606 (.out1(out_ui_bit_and_expr_FU_1_0_1_74_i3_fu___float64_mulif_14503_14606), .in1(out_ui_bit_ior_expr_FU_8_8_8_98_i1_fu___float64_mulif_14503_14580), .in2(out_const_12));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14607 (.out1(out_ui_bit_xor_expr_FU_1_0_1_100_i1_fu___float64_mulif_14503_14607), .in1(out_ui_bit_and_expr_FU_1_0_1_74_i3_fu___float64_mulif_14503_14606), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14609 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i11_fu___float64_mulif_14503_14609), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i10_fu___float64_mulif_14503_14605), .in2(out_ui_bit_xor_expr_FU_1_0_1_100_i1_fu___float64_mulif_14503_14607));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14610 (.out1(out_UIdata_converter_FU_36_i0_fu___float64_mulif_14503_14610), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i11_fu___float64_mulif_14503_14609));
  bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_mulif_14503_14611 (.out1(out_bit_ior_expr_FU_8_8_8_62_i2_fu___float64_mulif_14503_14611), .in1(out_UIdata_converter_FU_35_i0_fu___float64_mulif_14503_14603), .in2(out_UIdata_converter_FU_36_i0_fu___float64_mulif_14503_14610));
  bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(3)) fu___float64_mulif_14503_14612 (.out1(out_bit_ior_expr_FU_8_8_8_62_i3_fu___float64_mulif_14503_14612), .in1(out_bit_ior_expr_FU_0_8_8_61_i0_fu___float64_mulif_14503_14597), .in2(out_bit_ior_expr_FU_8_8_8_62_i2_fu___float64_mulif_14503_14611));
  plus_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(13)) fu___float64_mulif_14503_14613 (.out1(out_plus_expr_FU_16_16_16_69_i0_fu___float64_mulif_14503_14613), .in1(out_bit_and_expr_FU_16_0_16_53_i0_fu___float64_mulif_14503_14513), .in2(out_bit_and_expr_FU_16_0_16_53_i1_fu___float64_mulif_14503_14518));
  IUdata_converter_FU #(.BITSIZE_in1(13), .BITSIZE_out1(12)) fu___float64_mulif_14503_14614 (.out1(out_IUdata_converter_FU_37_i0_fu___float64_mulif_14503_14614), .in1(out_plus_expr_FU_16_16_16_69_i0_fu___float64_mulif_14503_14613));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_mulif_14503_14616 (.out1(out_ui_bit_ior_expr_FU_64_0_64_97_i0_fu___float64_mulif_14503_14616), .in1(out_ui_bit_and_expr_FU_64_0_64_78_i0_fu___float64_mulif_14503_14510), .in2(out_const_14));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_mulif_14503_14617 (.out1(out_ui_bit_ior_expr_FU_64_0_64_97_i1_fu___float64_mulif_14503_14617), .in1(out_ui_bit_and_expr_FU_64_0_64_78_i1_fu___float64_mulif_14503_14515), .in2(out_const_14));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(23), .BITSIZE_out1(23)) fu___float64_mulif_14503_14618 (.out1(out_ui_bit_and_expr_FU_32_0_32_77_i0_fu___float64_mulif_14503_14618), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_mulif_14503_14508), .in2(out_const_24));
  ui_rshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(6), .BITSIZE_out1(30), .PRECISION(64)) fu___float64_mulif_14503_14619 (.out1(out_ui_rshift_expr_FU_64_0_64_128_i0_fu___float64_mulif_14503_14619), .in1(out_ui_bit_ior_expr_FU_64_0_64_97_i0_fu___float64_mulif_14503_14616), .in2(out_const_4));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(23), .BITSIZE_out1(23)) fu___float64_mulif_14503_14620 (.out1(out_ui_bit_and_expr_FU_32_0_32_77_i1_fu___float64_mulif_14503_14620), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_mulif_14503_14509), .in2(out_const_24));
  ui_rshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(6), .BITSIZE_out1(30), .PRECISION(64)) fu___float64_mulif_14503_14621 (.out1(out_ui_rshift_expr_FU_64_0_64_128_i1_fu___float64_mulif_14503_14621), .in1(out_ui_bit_ior_expr_FU_64_0_64_97_i1_fu___float64_mulif_14503_14617), .in2(out_const_4));
  ui_widen_mult_expr_FU #(.BITSIZE_in1(30), .BITSIZE_in2(30), .BITSIZE_out1(60), .PIPE_PARAMETER(6)) fu___float64_mulif_14503_14622 (.out1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i0_fu___float64_mulif_14503_14622), .clock(clock), .in1(out_ui_rshift_expr_FU_64_0_64_128_i0_fu___float64_mulif_14503_14619), .in2(out_ui_rshift_expr_FU_64_0_64_128_i1_fu___float64_mulif_14503_14621));
  ui_widen_mult_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(23), .BITSIZE_out1(46), .PIPE_PARAMETER(6)) fu___float64_mulif_14503_14623 (.out1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i1_fu___float64_mulif_14503_14623), .clock(clock), .in1(out_ui_bit_and_expr_FU_32_0_32_77_i0_fu___float64_mulif_14503_14618), .in2(out_ui_bit_and_expr_FU_32_0_32_77_i1_fu___float64_mulif_14503_14620));
  ui_plus_expr_FU #(.BITSIZE_in1(30), .BITSIZE_in2(23), .BITSIZE_out1(31)) fu___float64_mulif_14503_14624 (.out1(out_ui_plus_expr_FU_32_32_32_124_i0_fu___float64_mulif_14503_14624), .in1(out_ui_rshift_expr_FU_64_0_64_128_i0_fu___float64_mulif_14503_14619), .in2(out_ui_bit_and_expr_FU_32_0_32_77_i0_fu___float64_mulif_14503_14618));
  ui_plus_expr_FU #(.BITSIZE_in1(30), .BITSIZE_in2(23), .BITSIZE_out1(31)) fu___float64_mulif_14503_14625 (.out1(out_ui_plus_expr_FU_32_32_32_124_i1_fu___float64_mulif_14503_14625), .in1(out_ui_rshift_expr_FU_64_0_64_128_i1_fu___float64_mulif_14503_14621), .in2(out_ui_bit_and_expr_FU_32_0_32_77_i1_fu___float64_mulif_14503_14620));
  ui_widen_mult_expr_FU #(.BITSIZE_in1(31), .BITSIZE_in2(31), .BITSIZE_out1(61), .PIPE_PARAMETER(6)) fu___float64_mulif_14503_14626 (.out1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i2_fu___float64_mulif_14503_14626), .clock(clock), .in1(out_ui_plus_expr_FU_32_32_32_124_i0_fu___float64_mulif_14503_14624), .in2(out_ui_plus_expr_FU_32_32_32_124_i1_fu___float64_mulif_14503_14625));
  ui_rshift_expr_FU #(.BITSIZE_in1(46), .BITSIZE_in2(6), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_mulif_14503_14628 (.out1(out_ui_rshift_expr_FU_64_0_64_128_i2_fu___float64_mulif_14503_14628), .in1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i1_fu___float64_mulif_14503_14623), .in2(out_const_4));
  ui_minus_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(46), .BITSIZE_out1(64)) fu___float64_mulif_14503_14629 (.out1(out_ui_minus_expr_FU_64_64_64_120_i0_fu___float64_mulif_14503_14629), .in1(out_reg_12_reg_12), .in2(out_reg_10_reg_10));
  ui_ternary_pm_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(61), .BITSIZE_in3(60), .BITSIZE_out1(64)) fu___float64_mulif_14503_14630 (.out1(out_ui_ternary_pm_expr_FU_64_64_64_64_138_i0_fu___float64_mulif_14503_14630), .in1(out_reg_14_reg_14), .in2(out_reg_11_reg_11), .in3(out_reg_9_reg_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(46), .BITSIZE_in2(23), .BITSIZE_out1(23)) fu___float64_mulif_14503_14631 (.out1(out_ui_bit_and_expr_FU_32_0_32_77_i2_fu___float64_mulif_14503_14631), .in1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i1_fu___float64_mulif_14503_14623), .in2(out_const_24));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(23), .BITSIZE_out1(23)) fu___float64_mulif_14503_14632 (.out1(out_ui_bit_and_expr_FU_32_0_32_77_i3_fu___float64_mulif_14503_14632), .in1(out_ui_ternary_pm_expr_FU_64_64_64_64_138_i0_fu___float64_mulif_14503_14630), .in2(out_const_24));
  ui_lshift_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(6), .BITSIZE_out1(46), .PRECISION(64)) fu___float64_mulif_14503_14633 (.out1(out_ui_lshift_expr_FU_64_0_64_111_i0_fu___float64_mulif_14503_14633), .in1(out_ui_bit_and_expr_FU_32_0_32_77_i3_fu___float64_mulif_14503_14632), .in2(out_const_4));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(46), .BITSIZE_in2(23), .BITSIZE_out1(46)) fu___float64_mulif_14503_14634 (.out1(out_ui_bit_ior_expr_FU_0_64_64_87_i0_fu___float64_mulif_14503_14634), .in1(out_ui_lshift_expr_FU_64_0_64_111_i0_fu___float64_mulif_14503_14633), .in2(out_reg_13_reg_13));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(41), .PRECISION(64)) fu___float64_mulif_14503_14635 (.out1(out_ui_rshift_expr_FU_64_0_64_128_i3_fu___float64_mulif_14503_14635), .in1(out_ui_ternary_pm_expr_FU_64_64_64_64_138_i0_fu___float64_mulif_14503_14630), .in2(out_const_4));
  ui_plus_expr_FU #(.BITSIZE_in1(41), .BITSIZE_in2(60), .BITSIZE_out1(61)) fu___float64_mulif_14503_14636 (.out1(out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636), .in1(out_reg_16_reg_16), .in2(out_reg_9_reg_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_mulif_14503_14637 (.out1(out_ui_bit_and_expr_FU_8_0_8_84_i0_fu___float64_mulif_14503_14637), .in1(out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636), .in2(out_const_22));
  ui_lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(7), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_mulif_14503_14638 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_mulif_14503_14638), .in1(out_ui_bit_and_expr_FU_8_0_8_84_i0_fu___float64_mulif_14503_14637), .in2(out_const_5));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(46), .BITSIZE_in2(54), .BITSIZE_out1(54)) fu___float64_mulif_14503_14639 (.out1(out_ui_bit_ior_expr_FU_0_64_64_88_i0_fu___float64_mulif_14503_14639), .in1(out_reg_15_reg_15), .in2(out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_mulif_14503_14638));
  ui_rshift_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(5), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_mulif_14503_14640 (.out1(out_ui_rshift_expr_FU_64_0_64_129_i0_fu___float64_mulif_14503_14640), .in1(out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636), .in2(out_const_3));
  ui_rshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(7), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_mulif_14503_14641 (.out1(out_ui_rshift_expr_FU_64_0_64_130_i0_fu___float64_mulif_14503_14641), .in1(out_ui_rshift_expr_FU_64_0_64_129_i0_fu___float64_mulif_14503_14640), .in2(out_const_6));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14642 (.out1(out_ui_bit_and_expr_FU_1_0_1_75_i0_fu___float64_mulif_14503_14642), .in1(out_ui_rshift_expr_FU_64_0_64_130_i0_fu___float64_mulif_14503_14641), .in2(out_const_12));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14643 (.out1(out_UUdata_converter_FU_38_i0_fu___float64_mulif_14503_14643), .in1(out_ui_bit_and_expr_FU_1_0_1_75_i0_fu___float64_mulif_14503_14642));
  ui_ternary_plus_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(16), .BITSIZE_in3(1), .BITSIZE_out1(13)) fu___float64_mulif_14503_14644 (.out1(out_ui_ternary_plus_expr_FU_16_0_16_16_137_i0_fu___float64_mulif_14503_14644), .in1(out_reg_1_reg_1), .in2(out_const_21), .in3(out_reg_17_reg_17));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(2), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_mulif_14503_14646 (.out1(out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_mulif_14503_14646), .in1(out_ui_rshift_expr_FU_64_0_64_129_i0_fu___float64_mulif_14503_14640), .in2(out_const_1));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_mulif_14503_14647 (.out1(out_ui_rshift_expr_FU_64_0_64_131_i0_fu___float64_mulif_14503_14647), .in1(out_ui_bit_ior_expr_FU_0_64_64_88_i0_fu___float64_mulif_14503_14639), .in2(out_const_8));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_mulif_14503_14648 (.out1(out_ui_bit_ior_expr_FU_0_64_64_89_i0_fu___float64_mulif_14503_14648), .in1(out_ui_rshift_expr_FU_64_0_64_131_i0_fu___float64_mulif_14503_14647), .in2(out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_mulif_14503_14646));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_mulif_14503_14649 (.out1(out_ui_bit_and_expr_FU_64_0_64_79_i0_fu___float64_mulif_14503_14649), .in1(out_ui_bit_ior_expr_FU_0_64_64_89_i0_fu___float64_mulif_14503_14648), .in2(out_const_25));
  ui_lshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(2), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_mulif_14503_14650 (.out1(out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_mulif_14503_14650), .in1(out_ui_bit_ior_expr_FU_0_64_64_88_i0_fu___float64_mulif_14503_14639), .in2(out_const_1));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(54), .BITSIZE_out1(54)) fu___float64_mulif_14503_14651 (.out1(out_ui_bit_and_expr_FU_64_0_64_80_i0_fu___float64_mulif_14503_14651), .in1(out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_mulif_14503_14650), .in2(out_const_27));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(3), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_mulif_14503_14652 (.out1(out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_mulif_14503_14652), .in1(out_ui_rshift_expr_FU_64_0_64_129_i0_fu___float64_mulif_14503_14640), .in2(out_const_2));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(7), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_mulif_14503_14653 (.out1(out_ui_rshift_expr_FU_64_0_64_126_i2_fu___float64_mulif_14503_14653), .in1(out_ui_bit_ior_expr_FU_0_64_64_88_i0_fu___float64_mulif_14503_14639), .in2(out_const_7));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_mulif_14503_14654 (.out1(out_ui_bit_ior_expr_FU_0_64_64_90_i0_fu___float64_mulif_14503_14654), .in1(out_ui_rshift_expr_FU_64_0_64_126_i2_fu___float64_mulif_14503_14653), .in2(out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_mulif_14503_14652));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_mulif_14503_14655 (.out1(out_ui_bit_and_expr_FU_64_0_64_79_i1_fu___float64_mulif_14503_14655), .in1(out_ui_bit_ior_expr_FU_0_64_64_90_i0_fu___float64_mulif_14503_14654), .in2(out_const_25));
  ui_lshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(3), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_mulif_14503_14656 (.out1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_mulif_14503_14656), .in1(out_ui_bit_ior_expr_FU_0_64_64_88_i0_fu___float64_mulif_14503_14639), .in2(out_const_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(54), .BITSIZE_out1(54)) fu___float64_mulif_14503_14657 (.out1(out_ui_bit_and_expr_FU_64_0_64_80_i1_fu___float64_mulif_14503_14657), .in1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_mulif_14503_14656), .in2(out_const_27));
  UUdata_converter_FU #(.BITSIZE_in1(13), .BITSIZE_out1(12)) fu___float64_mulif_14503_14660 (.out1(out_UUdata_converter_FU_40_i0_fu___float64_mulif_14503_14660), .in1(out_ui_ternary_plus_expr_FU_16_0_16_16_137_i0_fu___float64_mulif_14503_14644));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_mulif_14503_14661 (.out1(out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_mulif_14503_14661), .in1(out_UUdata_converter_FU_40_i0_fu___float64_mulif_14503_14660), .in2(out_const_7));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14662 (.out1(out_ui_bit_ior_expr_FU_0_64_64_91_i0_fu___float64_mulif_14503_14662), .in1(out_reg_18_reg_18), .in2(out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_mulif_14503_14661));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_mulif_14503_14663 (.out1(out_ui_rshift_expr_FU_64_0_64_131_i1_fu___float64_mulif_14503_14663), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_mulif_14503_31699), .in2(out_const_8));
  ui_bit_and_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_mulif_14503_14664 (.out1(out_ui_bit_and_expr_FU_64_0_64_81_i0_fu___float64_mulif_14503_14664), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_mulif_14503_31699), .in2(out_const_26));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14665 (.out1(out_ui_ne_expr_FU_64_0_64_122_i0_fu___float64_mulif_14503_14665), .in1(out_reg_21_reg_21), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14666 (.out1(out_ui_bit_and_expr_FU_1_0_1_75_i1_fu___float64_mulif_14503_14666), .in1(out_ui_cond_expr_FU_64_64_64_64_103_i1_fu___float64_mulif_14503_31643), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14669 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i12_fu___float64_mulif_14503_14669), .in1(out_truth_xor_expr_FU_1_0_1_73_i0_fu___float64_mulif_14503_30352), .in2(out_ui_ne_expr_FU_64_0_64_122_i0_fu___float64_mulif_14503_14665));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14670 (.out1(out_UUdata_converter_FU_47_i0_fu___float64_mulif_14503_14670), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i12_fu___float64_mulif_14503_14669));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14671 (.out1(out_ui_bit_ior_expr_FU_1_1_1_96_i1_fu___float64_mulif_14503_14671), .in1(out_UUdata_converter_FU_47_i0_fu___float64_mulif_14503_14670), .in2(out_reg_20_reg_20));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14672 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i13_fu___float64_mulif_14503_14672), .in1(out_ui_bit_ior_expr_FU_1_1_1_96_i1_fu___float64_mulif_14503_14671), .in2(out_reg_19_reg_19));
  ui_plus_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14673 (.out1(out_ui_plus_expr_FU_64_64_64_125_i1_fu___float64_mulif_14503_14673), .in1(out_reg_24_reg_24), .in2(out_reg_23_reg_23));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_mulif_14503_14675 (.out1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_mulif_14503_14675), .in1(out_ui_bit_xor_expr_FU_1_1_1_101_i0_fu___float64_mulif_14503_14520), .in2(out_const_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_mulif_14503_14676 (.out1(out_ui_bit_and_expr_FU_64_0_64_82_i0_fu___float64_mulif_14503_14676), .in1(out_ui_plus_expr_FU_64_64_64_125_i1_fu___float64_mulif_14503_14673), .in2(out_const_28));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14677 (.out1(out_ui_bit_ior_expr_FU_0_64_64_92_i0_fu___float64_mulif_14503_14677), .in1(out_ui_bit_and_expr_FU_64_0_64_82_i0_fu___float64_mulif_14503_14676), .in2(out_reg_2_reg_2));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_mulif_14503_14679 (.out1(out_ui_rshift_expr_FU_64_0_64_127_i2_fu___float64_mulif_14503_14679), .in1(out_ui_plus_expr_FU_64_64_64_125_i1_fu___float64_mulif_14503_14673), .in2(out_const_9));
  UUconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14680 (.out1(out_UUconvert_expr_FU_49_i0_fu___float64_mulif_14503_14680), .in1(out_ui_rshift_expr_FU_64_0_64_127_i2_fu___float64_mulif_14503_14679));
  ui_eq_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_mulif_14503_14681 (.out1(out_ui_eq_expr_FU_64_0_64_107_i0_fu___float64_mulif_14503_14681), .in1(out_ui_bit_ior_expr_FU_0_64_64_91_i0_fu___float64_mulif_14503_14662), .in2(out_const_29));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14683 (.out1(out_ui_bit_and_expr_FU_1_1_1_76_i14_fu___float64_mulif_14503_14683), .in1(out_reg_26_reg_26), .in2(out_reg_25_reg_25));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14686 (.out1(out_ui_bit_xor_expr_FU_1_1_1_101_i1_fu___float64_mulif_14503_14686), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i14_fu___float64_mulif_14503_14683), .in2(out_reg_27_reg_27));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_14687 (.out1(out_UUdata_converter_FU_51_i0_fu___float64_mulif_14503_14687), .in1(out_ui_bit_xor_expr_FU_1_1_1_101_i1_fu___float64_mulif_14503_14686));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(2), .PRECISION(8)) fu___float64_mulif_14503_14688 (.out1(out_ui_lshift_expr_FU_8_0_8_119_i0_fu___float64_mulif_14503_14688), .in1(out_UUdata_converter_FU_51_i0_fu___float64_mulif_14503_14687), .in2(out_const_12));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_14689 (.out1(out_ui_bit_ior_expr_FU_0_8_8_95_i0_fu___float64_mulif_14503_14689), .in1(out_ui_lshift_expr_FU_8_0_8_119_i0_fu___float64_mulif_14503_14688), .in2(out_UUconvert_expr_FU_49_i0_fu___float64_mulif_14503_14680));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(2)) fu___float64_mulif_14503_14693 (.out1(out_IUdata_converter_FU_41_i0_fu___float64_mulif_14503_14693), .in1(out_reg_0_reg_0));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14695 (.out1(out_ui_view_convert_expr_FU_48_i0_fu___float64_mulif_14503_14695), .in1(out_ui_bit_ior_expr_FU_0_64_64_92_i0_fu___float64_mulif_14503_14677));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14698 (.out1(out_ui_view_convert_expr_FU_44_i0_fu___float64_mulif_14503_14698), .in1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_mulif_14503_14675));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_in3(6), .BITSIZE_out1(64), .OFFSET_PARAMETER(63)) fu___float64_mulif_14503_14700 (.out1(out_ui_bit_ior_concat_expr_FU_86_i0_fu___float64_mulif_14503_14700), .in1(out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_mulif_14503_30369), .in2(out_const_23), .in3(out_const_20));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_14701 (.out1(out_ui_view_convert_expr_FU_43_i0_fu___float64_mulif_14503_14701), .in1(out_ui_bit_ior_concat_expr_FU_86_i0_fu___float64_mulif_14503_14700));
  eq_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_mulif_14503_29862 (.out1(out_eq_expr_FU_8_0_8_64_i0_fu___float64_mulif_14503_29862), .in1(out_reg_0_reg_0), .in2(out_const_1));
  ui_ne_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_29864 (.out1(out_ui_ne_expr_FU_8_0_8_123_i0_fu___float64_mulif_14503_29864), .in1(out_reg_28_reg_28), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_29866 (.out1(out_ui_eq_expr_FU_8_0_8_108_i0_fu___float64_mulif_14503_29866), .in1(out_reg_28_reg_28), .in2(out_const_12));
  ui_eq_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_29870 (.out1(out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_mulif_14503_29870), .in1(out_IUdata_converter_FU_41_i0_fu___float64_mulif_14503_14693), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_mulif_14503_29872 (.out1(out_ui_eq_expr_FU_8_0_8_110_i0_fu___float64_mulif_14503_29872), .in1(out_IUdata_converter_FU_41_i0_fu___float64_mulif_14503_14693), .in2(out_const_15));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_29874 (.out1(out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_mulif_14503_29874), .in1(out_ui_rshift_expr_FU_8_0_8_136_i0_fu___float64_mulif_14503_30374), .in2(out_const_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(1), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_mulif_14503_30348 (.out1(out_ui_rshift_expr_FU_64_0_64_132_i0_fu___float64_mulif_14503_30348), .in1(out_ui_bit_and_expr_FU_64_0_64_81_i0_fu___float64_mulif_14503_14664), .in2(out_const_12));
  truth_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_30352 (.out1(out_truth_xor_expr_FU_1_0_1_73_i0_fu___float64_mulif_14503_30352), .in1(out_reg_22_reg_22), .in2(out_const_12));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1)) fu___float64_mulif_14503_30356 (.out1(out_ui_extract_bit_expr_FU_50_i0_fu___float64_mulif_14503_30356), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i13_fu___float64_mulif_14503_14672), .in2(out_const_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_mulif_14503_30364 (.out1(out_ui_rshift_expr_FU_64_0_64_133_i0_fu___float64_mulif_14503_30364), .in1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_mulif_14503_14675), .in2(out_const_20));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_mulif_14503_30369 (.out1(out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_mulif_14503_30369), .in1(out_ui_rshift_expr_FU_64_0_64_133_i0_fu___float64_mulif_14503_30364), .in2(out_const_20));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1), .PRECISION(8)) fu___float64_mulif_14503_30374 (.out1(out_ui_rshift_expr_FU_8_0_8_136_i0_fu___float64_mulif_14503_30374), .in1(out_ui_cond_expr_FU_8_8_8_8_104_i0_fu___float64_mulif_14503_31592), .in2(out_const_12));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(4)) fu___float64_mulif_14503_30390 (.out1(out_ui_extract_bit_expr_FU_42_i0_fu___float64_mulif_14503_30390), .in1(out_ui_ternary_plus_expr_FU_16_0_16_16_137_i0_fu___float64_mulif_14503_14644), .in2(out_const_17));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_30398 (.out1(out_ui_cond_expr_FU_1_1_1_1_102_i0_fu___float64_mulif_14503_30398), .in1(out_ui_extract_bit_expr_FU_39_i0_fu___float64_mulif_14503_30412), .in2(out_ui_extract_bit_expr_FU_45_i0_fu___float64_mulif_14503_32644), .in3(out_ui_extract_bit_expr_FU_46_i0_fu___float64_mulif_14503_32648));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(6)) fu___float64_mulif_14503_30412 (.out1(out_ui_extract_bit_expr_FU_39_i0_fu___float64_mulif_14503_30412), .in1(out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636), .in2(out_const_19));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_in3(1), .BITSIZE_out1(2)) fu___float64_mulif_14503_31592 (.out1(out_ui_cond_expr_FU_8_8_8_8_104_i0_fu___float64_mulif_14503_31592), .in1(out_ui_eq_expr_FU_8_0_8_108_i0_fu___float64_mulif_14503_29866), .in2(out_const_13), .in3(out_const_0));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31597 (.out1(out_truth_not_expr_FU_1_1_71_i0_fu___float64_mulif_14503_31597), .in1(out_eq_expr_FU_8_0_8_64_i0_fu___float64_mulif_14503_29862));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31600 (.out1(out_truth_and_expr_FU_1_1_1_70_i0_fu___float64_mulif_14503_31600), .in1(out_eq_expr_FU_8_0_8_64_i0_fu___float64_mulif_14503_29862), .in2(out_truth_not_expr_FU_1_1_71_i0_fu___float64_mulif_14503_31597));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31604 (.out1(out_truth_not_expr_FU_1_1_71_i1_fu___float64_mulif_14503_31604), .in1(out_truth_and_expr_FU_1_1_1_70_i0_fu___float64_mulif_14503_31600));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31607 (.out1(out_truth_and_expr_FU_1_1_1_70_i1_fu___float64_mulif_14503_31607), .in1(out_truth_not_expr_FU_1_1_71_i0_fu___float64_mulif_14503_31597), .in2(out_truth_not_expr_FU_1_1_71_i1_fu___float64_mulif_14503_31604));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31610 (.out1(out_truth_and_expr_FU_1_1_1_70_i2_fu___float64_mulif_14503_31610), .in1(out_truth_and_expr_FU_1_1_1_70_i1_fu___float64_mulif_14503_31607), .in2(out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_mulif_14503_29870));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31614 (.out1(out_truth_not_expr_FU_1_1_71_i2_fu___float64_mulif_14503_31614), .in1(out_truth_and_expr_FU_1_1_1_70_i2_fu___float64_mulif_14503_31610));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31617 (.out1(out_truth_and_expr_FU_1_1_1_70_i3_fu___float64_mulif_14503_31617), .in1(out_truth_and_expr_FU_1_1_1_70_i1_fu___float64_mulif_14503_31607), .in2(out_truth_not_expr_FU_1_1_71_i2_fu___float64_mulif_14503_31614));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31620 (.out1(out_truth_and_expr_FU_1_1_1_70_i4_fu___float64_mulif_14503_31620), .in1(out_truth_and_expr_FU_1_1_1_70_i3_fu___float64_mulif_14503_31617), .in2(out_ui_eq_expr_FU_8_0_8_110_i0_fu___float64_mulif_14503_29872));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31624 (.out1(out_truth_and_expr_FU_1_1_1_70_i5_fu___float64_mulif_14503_31624), .in1(out_reg_5_reg_5), .in2(out_ui_ne_expr_FU_8_0_8_123_i0_fu___float64_mulif_14503_29864));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31627 (.out1(out_truth_not_expr_FU_1_1_71_i3_fu___float64_mulif_14503_31627), .in1(out_ui_ne_expr_FU_8_0_8_123_i0_fu___float64_mulif_14503_29864));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31630 (.out1(out_truth_and_expr_FU_1_1_1_70_i6_fu___float64_mulif_14503_31630), .in1(out_reg_5_reg_5), .in2(out_truth_not_expr_FU_1_1_71_i3_fu___float64_mulif_14503_31627));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31634 (.out1(out_truth_and_expr_FU_1_1_1_70_i7_fu___float64_mulif_14503_31634), .in1(out_truth_and_expr_FU_1_1_1_70_i5_fu___float64_mulif_14503_31624), .in2(out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_mulif_14503_29874));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31637 (.out1(out_truth_not_expr_FU_1_1_71_i4_fu___float64_mulif_14503_31637), .in1(out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_mulif_14503_29874));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31640 (.out1(out_truth_and_expr_FU_1_1_1_70_i8_fu___float64_mulif_14503_31640), .in1(out_truth_and_expr_FU_1_1_1_70_i5_fu___float64_mulif_14503_31624), .in2(out_truth_not_expr_FU_1_1_71_i4_fu___float64_mulif_14503_31637));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(53), .BITSIZE_in3(53), .BITSIZE_out1(53)) fu___float64_mulif_14503_31641 (.out1(out_ui_cond_expr_FU_64_64_64_64_103_i0_fu___float64_mulif_14503_31641), .in1(out_ui_extract_bit_expr_FU_39_i0_fu___float64_mulif_14503_30412), .in2(out_ui_rshift_expr_FU_64_0_64_134_i0_fu___float64_mulif_14503_31692), .in3(out_ui_rshift_expr_FU_64_0_64_134_i1_fu___float64_mulif_14503_31695));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(52), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_mulif_14503_31643 (.out1(out_ui_cond_expr_FU_64_64_64_64_103_i1_fu___float64_mulif_14503_31643), .in1(out_ui_extract_bit_expr_FU_39_i0_fu___float64_mulif_14503_30412), .in2(out_ui_bit_and_expr_FU_64_0_64_79_i0_fu___float64_mulif_14503_14649), .in3(out_ui_bit_and_expr_FU_64_0_64_79_i1_fu___float64_mulif_14503_14655));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31647 (.out1(out_truth_or_expr_FU_1_1_1_72_i0_fu___float64_mulif_14503_31647), .in1(out_truth_and_expr_FU_1_1_1_70_i6_fu___float64_mulif_14503_31630), .in2(out_reg_8_reg_8));
  fp_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_31648 (.out1(out_fp_cond_expr_FU_64_64_64_64_65_i0_fu___float64_mulif_14503_31648), .in1(out_truth_and_expr_FU_1_1_1_70_i6_fu___float64_mulif_14503_31630), .in2(out_reg_29_reg_29), .in3(out_const_11));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31653 (.out1(out_truth_or_expr_FU_1_1_1_72_i1_fu___float64_mulif_14503_31653), .in1(out_reg_6_reg_6), .in2(out_truth_or_expr_FU_1_1_1_72_i0_fu___float64_mulif_14503_31647));
  fp_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_31654 (.out1(out_fp_cond_expr_FU_64_64_64_64_65_i1_fu___float64_mulif_14503_31654), .in1(out_reg_6_reg_6), .in2(out_reg_29_reg_29), .in3(out_fp_cond_expr_FU_64_64_64_64_65_i0_fu___float64_mulif_14503_31648));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31659 (.out1(out_truth_or_expr_FU_1_1_1_72_i2_fu___float64_mulif_14503_31659), .in1(out_truth_or_expr_FU_1_1_1_72_i1_fu___float64_mulif_14503_31653), .in2(out_reg_7_reg_7));
  fp_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_31660 (.out1(out_fp_cond_expr_FU_64_64_64_64_65_i2_fu___float64_mulif_14503_31660), .in1(out_truth_or_expr_FU_1_1_1_72_i1_fu___float64_mulif_14503_31653), .in2(out_fp_cond_expr_FU_64_64_64_64_65_i1_fu___float64_mulif_14503_31654), .in3(out_reg_3_reg_3));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_mulif_14503_31665 (.out1(out_truth_or_expr_FU_1_1_1_72_i3_fu___float64_mulif_14503_31665), .in1(out_truth_or_expr_FU_1_1_1_72_i2_fu___float64_mulif_14503_31659), .in2(out_truth_and_expr_FU_1_1_1_70_i7_fu___float64_mulif_14503_31634));
  fp_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_31666 (.out1(out_fp_cond_expr_FU_64_64_64_64_65_i3_fu___float64_mulif_14503_31666), .in1(out_truth_or_expr_FU_1_1_1_72_i2_fu___float64_mulif_14503_31659), .in2(out_fp_cond_expr_FU_64_64_64_64_65_i2_fu___float64_mulif_14503_31660), .in3(out_reg_3_reg_3));
  fp_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_31669 (.out1(out_fp_cond_expr_FU_64_64_64_64_65_i4_fu___float64_mulif_14503_31669), .in1(out_truth_or_expr_FU_1_1_1_72_i3_fu___float64_mulif_14503_31665), .in2(out_fp_cond_expr_FU_64_64_64_64_65_i3_fu___float64_mulif_14503_31666), .in3(out_reg_4_reg_4));
  fp_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(64), .BITSIZE_out1(64)) fu___float64_mulif_14503_31673 (.out1(out_fp_cond_expr_FU_64_64_64_64_65_i5_fu___float64_mulif_14503_31673), .in1(out_truth_and_expr_FU_1_1_1_70_i8_fu___float64_mulif_14503_31640), .in2(out_reg_4_reg_4), .in3(out_fp_cond_expr_FU_64_64_64_64_65_i4_fu___float64_mulif_14503_31669));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(1), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_mulif_14503_31692 (.out1(out_ui_rshift_expr_FU_64_0_64_134_i0_fu___float64_mulif_14503_31692), .in1(out_ui_bit_and_expr_FU_64_0_64_80_i0_fu___float64_mulif_14503_14651), .in2(out_const_12));
  ui_rshift_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(1), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_mulif_14503_31695 (.out1(out_ui_rshift_expr_FU_64_0_64_134_i1_fu___float64_mulif_14503_31695), .in1(out_ui_bit_and_expr_FU_64_0_64_80_i1_fu___float64_mulif_14503_14657), .in2(out_const_12));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(1), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_mulif_14503_31699 (.out1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_mulif_14503_31699), .in1(out_ui_cond_expr_FU_64_64_64_64_103_i0_fu___float64_mulif_14503_31641), .in2(out_const_12));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(3)) fu___float64_mulif_14503_32644 (.out1(out_ui_extract_bit_expr_FU_45_i0_fu___float64_mulif_14503_32644), .in1(out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636), .in2(out_const_18));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(3)) fu___float64_mulif_14503_32648 (.out1(out_ui_extract_bit_expr_FU_46_i0_fu___float64_mulif_14503_32648), .in1(out_ui_plus_expr_FU_64_64_64_125_i0_fu___float64_mulif_14503_14636), .in2(out_const_16));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_bit_ior_expr_FU_8_8_8_62_i3_fu___float64_mulif_14503_14612), .wenable(wrenable_reg_0));
  register_SE #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_37_i0_fu___float64_mulif_14503_14614), .wenable(wrenable_reg_1));
  register_STD #(.BITSIZE_in1(46), .BITSIZE_out1(46)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i1_fu___float64_mulif_14503_14623), .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(61), .BITSIZE_out1(61)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i2_fu___float64_mulif_14503_14626), .wenable(wrenable_reg_11));
  register_STD #(.BITSIZE_in1(23), .BITSIZE_out1(23)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_128_i2_fu___float64_mulif_14503_14628), .wenable(wrenable_reg_12));
  register_SE #(.BITSIZE_in1(23), .BITSIZE_out1(23)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_32_0_32_77_i2_fu___float64_mulif_14503_14631), .wenable(wrenable_reg_13));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_ui_minus_expr_FU_64_64_64_120_i0_fu___float64_mulif_14503_14629), .wenable(wrenable_reg_14));
  register_STD #(.BITSIZE_in1(46), .BITSIZE_out1(46)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_87_i0_fu___float64_mulif_14503_14634), .wenable(wrenable_reg_15));
  register_STD #(.BITSIZE_in1(41), .BITSIZE_out1(41)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_128_i3_fu___float64_mulif_14503_14635), .wenable(wrenable_reg_16));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_38_i0_fu___float64_mulif_14503_14643), .wenable(wrenable_reg_17));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_64_64_64_64_103_i1_fu___float64_mulif_14503_31643), .wenable(wrenable_reg_18));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_19 (.out1(out_reg_19_reg_19), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_131_i1_fu___float64_mulif_14503_14663), .wenable(wrenable_reg_19));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_mulif_14503_14675), .wenable(wrenable_reg_2));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_20 (.out1(out_reg_20_reg_20), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_0_1_75_i1_fu___float64_mulif_14503_14666), .wenable(wrenable_reg_20));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_21 (.out1(out_reg_21_reg_21), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_132_i0_fu___float64_mulif_14503_30348), .wenable(wrenable_reg_21));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_22 (.out1(out_reg_22_reg_22), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_102_i0_fu___float64_mulif_14503_30398), .wenable(wrenable_reg_22));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_23 (.out1(out_reg_23_reg_23), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_91_i0_fu___float64_mulif_14503_14662), .wenable(wrenable_reg_23));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_24 (.out1(out_reg_24_reg_24), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_76_i13_fu___float64_mulif_14503_14672), .wenable(wrenable_reg_24));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_25 (.out1(out_reg_25_reg_25), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_64_0_64_107_i0_fu___float64_mulif_14503_14681), .wenable(wrenable_reg_25));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_26 (.out1(out_reg_26_reg_26), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_50_i0_fu___float64_mulif_14503_30356), .wenable(wrenable_reg_26));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_27 (.out1(out_reg_27_reg_27), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_42_i0_fu___float64_mulif_14503_30390), .wenable(wrenable_reg_27));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_28 (.out1(out_reg_28_reg_28), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_8_8_95_i0_fu___float64_mulif_14503_14689), .wenable(wrenable_reg_28));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_29 (.out1(out_reg_29_reg_29), .clock(clock), .reset(reset), .in1(out_ui_view_convert_expr_FU_48_i0_fu___float64_mulif_14503_14695), .wenable(wrenable_reg_29));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_ui_view_convert_expr_FU_44_i0_fu___float64_mulif_14503_14698), .wenable(wrenable_reg_3));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_ui_view_convert_expr_FU_43_i0_fu___float64_mulif_14503_14701), .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_eq_expr_FU_8_0_8_64_i0_fu___float64_mulif_14503_29862), .wenable(wrenable_reg_5));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_70_i0_fu___float64_mulif_14503_31600), .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_70_i2_fu___float64_mulif_14503_31610), .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_70_i4_fu___float64_mulif_14503_31620), .wenable(wrenable_reg_8));
  register_SE #(.BITSIZE_in1(60), .BITSIZE_out1(60)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_ui_widen_mult_expr_FU_32_32_64_6_139_i0_fu___float64_mulif_14503_14622), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_fp_cond_expr_FU_64_64_64_64_65_i5_fu___float64_mulif_14503_31673;

endmodule

// FSM based controller description for __float64_mulif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_mulif(done_port, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, clock, reset, start_port);
  // IN
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_24;
  output wrenable_reg_25;
  output wrenable_reg_26;
  output wrenable_reg_27;
  output wrenable_reg_28;
  output wrenable_reg_29;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [13:0] S_0 = 14'b00000000000001,
    S_1 = 14'b00000000000010,
    S_2 = 14'b00000000000100,
    S_3 = 14'b00000000001000,
    S_4 = 14'b00000000010000,
    S_5 = 14'b00000000100000,
    S_6 = 14'b00000001000000,
    S_7 = 14'b00000010000000,
    S_8 = 14'b00000100000000,
    S_9 = 14'b00001000000000,
    S_10 = 14'b00010000000000,
    S_11 = 14'b00100000000000,
    S_12 = 14'b01000000000000,
    S_13 = 14'b10000000000000;
  reg [13:0] _present_state, _next_state;
  reg done_port;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_24;
  reg wrenable_reg_25;
  reg wrenable_reg_26;
  reg wrenable_reg_27;
  reg wrenable_reg_28;
  reg wrenable_reg_29;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_24 = 1'b0;
    wrenable_reg_25 = 1'b0;
    wrenable_reg_26 = 1'b0;
    wrenable_reg_27 = 1'b0;
    wrenable_reg_28 = 1'b0;
    wrenable_reg_29 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          _next_state = S_1;
        end
        else
        begin
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          _next_state = S_4;
        end
      S_4 :
        begin
          _next_state = S_5;
        end
      S_5 :
        begin
          _next_state = S_6;
        end
      S_6 :
        begin
          _next_state = S_7;
        end
      S_7 :
        begin
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          wrenable_reg_14 = 1'b1;
          _next_state = S_9;
        end
      S_9 :
        begin
          wrenable_reg_15 = 1'b1;
          wrenable_reg_16 = 1'b1;
          _next_state = S_10;
        end
      S_10 :
        begin
          wrenable_reg_17 = 1'b1;
          wrenable_reg_18 = 1'b1;
          wrenable_reg_19 = 1'b1;
          wrenable_reg_20 = 1'b1;
          wrenable_reg_21 = 1'b1;
          wrenable_reg_22 = 1'b1;
          _next_state = S_11;
        end
      S_11 :
        begin
          wrenable_reg_23 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_25 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_27 = 1'b1;
          _next_state = S_12;
        end
      S_12 :
        begin
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          _next_state = S_13;
          done_port = 1'b1;
        end
      S_13 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_mulif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_mulif(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output [63:0] return_port;
  // Component and signal declarations
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire [63:0] in_port_a_SIGI1;
  wire [63:0] in_port_a_SIGI2;
  wire [63:0] in_port_b_SIGI1;
  wire [63:0] in_port_b_SIGI2;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_24;
  wire wrenable_reg_25;
  wire wrenable_reg_26;
  wire wrenable_reg_27;
  wire wrenable_reg_28;
  wire wrenable_reg_29;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller___float64_mulif Controller_i (.done_port(done_delayed_REG_signal_in), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_mulif Datapath_i (.return_port(return_port), .clock(clock), .reset(reset), .in_port_a(in_port_a_SIGI2), .in_port_b(in_port_b_SIGI2), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_a_REG (.out1(in_port_a_SIGI2), .clock(clock), .reset(reset), .in1(in_port_a_SIGI1));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_b_REG (.out1(in_port_b_SIGI2), .clock(clock), .reset(reset), .in1(in_port_b_SIGI1));
  // io-signal post fix
  assign in_port_a_SIGI1 = a;
  assign in_port_b_SIGI1 = b;
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Proxy wrapper for function: WRAPPED_PROXY_PREF___float64_mulif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module WRAPPED_PROXY_PREF___float64_mulif(clock, reset, start_port, a, b, PROXY_PREF_start_port, PROXY_PREF_a, PROXY_PREF_b, done_port, return_port, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___float64_mulif);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  input PROXY_PREF_start_port;
  input [63:0] PROXY_PREF_a;
  input [63:0] PROXY_PREF_b;
  input sel___float64_mulif;
  // OUT
  output done_port;
  output [63:0] return_port;
  output PROXY_PREF_done_port;
  output [63:0] PROXY_PREF_return_port;
  // Component and signal declarations
  wire [63:0] muxed_in_a;
  wire [63:0] muxed_in_b;
  wire muxed_in_start_port;
  wire proxy_selector____out_sel;
  wire tmp_out_done_port;
  wire [63:0] tmp_out_return_port;
  
  __float64_mulif __float64_mulif_i (.done_port(tmp_out_done_port), .return_port(tmp_out_return_port), .clock(clock), .reset(reset), .start_port(muxed_in_start_port), .a(muxed_in_a), .b(muxed_in_b));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) proxy_mux_____a (.out1(muxed_in_a), .sel(proxy_selector____out_sel), .in1(a), .in2(PROXY_PREF_a));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) proxy_mux_____b (.out1(muxed_in_b), .sel(proxy_selector____out_sel), .in1(b), .in2(PROXY_PREF_b));
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) proxy_mux_____start_port (.out1(muxed_in_start_port), .sel(proxy_selector____out_sel), .in1(start_port), .in2(PROXY_PREF_start_port));
  or or_proxy_selector____or_gate( proxy_selector____out_sel, sel___float64_mulif);
  // io-signal post fix
  assign done_port = tmp_out_done_port;
  assign return_port = tmp_out_return_port;
  assign PROXY_PREF_done_port = tmp_out_done_port;
  assign PROXY_PREF_return_port = tmp_out_return_port;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module bit_xor_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 ^ in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module cond_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  input signed [BITSIZE_in3-1:0] in3;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 != 0 ? in2 : in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module gt_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 > in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module le_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 <= in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module minus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 - in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module negate_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = -in1;
endmodule

// Datapath RTL description for __float64_to_int32_round_to_zeroif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_to_int32_round_to_zeroif(clock, reset, in_port_a, return_port, selector_MUX_24_gimple_return_FU_9_i0_0_0_0, selector_MUX_24_gimple_return_FU_9_i0_0_0_1, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346, OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input selector_MUX_24_gimple_return_FU_9_i0_0_0_0;
  input selector_MUX_24_gimple_return_FU_9_i0_0_0_1;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_2;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output signed [31:0] return_port;
  output OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346;
  output OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394;
  // Component and signal declarations
  wire signed [6:0] out_IIdata_converter_FU_4_i0_fu___float64_to_int32_round_to_zeroif_11331_11349;
  wire [31:0] out_MUX_24_gimple_return_FU_9_i0_0_0_0;
  wire [31:0] out_MUX_24_gimple_return_FU_9_i0_0_0_1;
  wire signed [31:0] out_UIconvert_expr_FU_10_i0_fu___float64_to_int32_round_to_zeroif_11331_11351;
  wire signed [1:0] out_UIconvert_expr_FU_6_i0_fu___float64_to_int32_round_to_zeroif_11331_11358;
  wire signed [1:0] out_UIdata_converter_FU_12_i0_fu___float64_to_int32_round_to_zeroif_11331_11357;
  wire signed [11:0] out_UIdata_converter_FU_3_i0_fu___float64_to_int32_round_to_zeroif_11331_11338;
  wire signed [1:0] out_UIdata_converter_FU_5_i0_fu___float64_to_int32_round_to_zeroif_11331_11352;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_13_i0_fu___float64_to_int32_round_to_zeroif_11331_11339;
  wire signed [31:0] out_bit_xor_expr_FU_32_32_32_14_i0_fu___float64_to_int32_round_to_zeroif_11331_11354;
  wire signed [8:0] out_cond_expr_FU_16_16_16_16_15_i0_fu___float64_to_int32_round_to_zeroif_11331_32391;
  wire signed [8:0] out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401;
  wire signed [8:0] out_cond_expr_FU_16_16_16_16_15_i2_fu___float64_to_int32_round_to_zeroif_11331_32404;
  wire out_const_0;
  wire [11:0] out_const_1;
  wire [5:0] out_const_10;
  wire [51:0] out_const_11;
  wire [11:0] out_const_2;
  wire [6:0] out_const_3;
  wire [6:0] out_const_4;
  wire [10:0] out_const_5;
  wire [11:0] out_const_6;
  wire [31:0] out_const_7;
  wire [31:0] out_const_8;
  wire [52:0] out_const_9;
  wire signed [31:0] out_conv_out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401_I_9_I_32;
  wire signed [31:0] out_conv_out_const_0_I_1_I_32;
  wire signed [31:0] out_conv_out_reg_0_reg_0_I_9_I_32;
  wire out_eq_expr_FU_16_0_16_16_i0_fu___float64_to_int32_round_to_zeroif_11331_11342;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_to_int32_round_to_zeroif_11331_11335;
  wire out_gt_expr_FU_16_0_16_17_i0_fu___float64_to_int32_round_to_zeroif_11331_29930;
  wire out_le_expr_FU_16_0_16_18_i0_fu___float64_to_int32_round_to_zeroif_11331_29934;
  wire out_lt_expr_FU_32_0_32_19_i0_fu___float64_to_int32_round_to_zeroif_11331_11356;
  wire signed [6:0] out_minus_expr_FU_0_8_8_20_i0_fu___float64_to_int32_round_to_zeroif_11331_11348;
  wire out_multi_read_cond_FU_8_i0_fu___float64_to_int32_round_to_zeroif_11331_32394;
  wire out_ne_expr_FU_8_8_8_21_i0_fu___float64_to_int32_round_to_zeroif_11331_29936;
  wire signed [0:0] out_negate_expr_FU_1_1_22_i0_fu___float64_to_int32_round_to_zeroif_11331_11353;
  wire signed [31:0] out_plus_expr_FU_32_32_32_23_i0_fu___float64_to_int32_round_to_zeroif_11331_11355;
  wire out_read_cond_FU_11_i0_fu___float64_to_int32_round_to_zeroif_11331_11346;
  wire [8:0] out_reg_0_reg_0;
  wire [1:0] out_reg_10_reg_10;
  wire [52:0] out_reg_1_reg_1;
  wire [6:0] out_reg_2_reg_2;
  wire [1:0] out_reg_3_reg_3;
  wire out_reg_4_reg_4;
  wire [1:0] out_reg_5_reg_5;
  wire out_reg_6_reg_6;
  wire [8:0] out_reg_7_reg_7;
  wire [31:0] out_reg_8_reg_8;
  wire [31:0] out_reg_9_reg_9;
  wire out_truth_and_expr_FU_1_1_1_24_i0_fu___float64_to_int32_round_to_zeroif_11331_32400;
  wire out_truth_not_expr_FU_1_1_25_i0_fu___float64_to_int32_round_to_zeroif_11331_32397;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_26_i0_fu___float64_to_int32_round_to_zeroif_11331_11344;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_27_i0_fu___float64_to_int32_round_to_zeroif_11331_11336;
  wire [52:0] out_ui_bit_ior_expr_FU_64_0_64_28_i0_fu___float64_to_int32_round_to_zeroif_11331_11347;
  wire out_ui_extract_bit_expr_FU_7_i0_fu___float64_to_int32_round_to_zeroif_11331_30501;
  wire out_ui_ne_expr_FU_64_0_64_29_i0_fu___float64_to_int32_round_to_zeroif_11331_11343;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_30_i0_fu___float64_to_int32_round_to_zeroif_11331_11337;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_31_i0_fu___float64_to_int32_round_to_zeroif_11331_11340;
  wire [31:0] out_ui_rshift_expr_FU_64_64_64_32_i0_fu___float64_to_int32_round_to_zeroif_11331_11350;
  
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_24_gimple_return_FU_9_i0_0_0_0 (.out1(out_MUX_24_gimple_return_FU_9_i0_0_0_0), .sel(selector_MUX_24_gimple_return_FU_9_i0_0_0_0), .in1(out_conv_out_reg_0_reg_0_I_9_I_32), .in2(out_conv_out_const_0_I_1_I_32));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_24_gimple_return_FU_9_i0_0_0_1 (.out1(out_MUX_24_gimple_return_FU_9_i0_0_0_1), .sel(selector_MUX_24_gimple_return_FU_9_i0_0_0_1), .in1(out_conv_out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401_I_9_I_32), .in2(out_MUX_24_gimple_return_FU_9_i0_0_0_0));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(12), .value(12'b010000011110)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(12), .value(12'b010000110011)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111111)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(11), .value(11'b01111111110)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(32), .value(32'b01111111111111111111111111111111)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(32), .value(32'b10000000000000000000000000000000)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(53), .value(53'b10000000000000000000000000000000000000000000000000000)) const_9 (.out1(out_const_9));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(32)) conv_out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401_I_9_I_32 (.out1(out_conv_out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401_I_9_I_32), .in1(out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401));
  IIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(32)) conv_out_const_0_I_1_I_32 (.out1(out_conv_out_const_0_I_1_I_32), .in1(out_const_0));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(32)) conv_out_reg_0_reg_0_I_9_I_32 (.out1(out_conv_out_reg_0_reg_0_I_9_I_32), .in1(out_reg_0_reg_0));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_to_int32_round_to_zeroif_11331_11335 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_to_int32_round_to_zeroif_11331_11335), .in1(in_port_a));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_to_int32_round_to_zeroif_11331_11336 (.out1(out_ui_bit_and_expr_FU_64_0_64_27_i0_fu___float64_to_int32_round_to_zeroif_11331_11336), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_to_int32_round_to_zeroif_11331_11335), .in2(out_const_11));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_to_int32_round_to_zeroif_11331_11337 (.out1(out_ui_rshift_expr_FU_64_0_64_30_i0_fu___float64_to_int32_round_to_zeroif_11331_11337), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_to_int32_round_to_zeroif_11331_11335), .in2(out_const_3));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_to_int32_round_to_zeroif_11331_11338 (.out1(out_UIdata_converter_FU_3_i0_fu___float64_to_int32_round_to_zeroif_11331_11338), .in1(out_ui_rshift_expr_FU_64_0_64_30_i0_fu___float64_to_int32_round_to_zeroif_11331_11337));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_to_int32_round_to_zeroif_11331_11339 (.out1(out_bit_and_expr_FU_16_0_16_13_i0_fu___float64_to_int32_round_to_zeroif_11331_11339), .in1(out_UIdata_converter_FU_3_i0_fu___float64_to_int32_round_to_zeroif_11331_11338), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_to_int32_round_to_zeroif_11331_11340 (.out1(out_ui_rshift_expr_FU_64_0_64_31_i0_fu___float64_to_int32_round_to_zeroif_11331_11340), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_to_int32_round_to_zeroif_11331_11335), .in2(out_const_4));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_11342 (.out1(out_eq_expr_FU_16_0_16_16_i0_fu___float64_to_int32_round_to_zeroif_11331_11342), .in1(out_bit_and_expr_FU_16_0_16_13_i0_fu___float64_to_int32_round_to_zeroif_11331_11339), .in2(out_const_6));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_11343 (.out1(out_ui_ne_expr_FU_64_0_64_29_i0_fu___float64_to_int32_round_to_zeroif_11331_11343), .in1(out_ui_bit_and_expr_FU_64_0_64_27_i0_fu___float64_to_int32_round_to_zeroif_11331_11336), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_11344 (.out1(out_ui_bit_and_expr_FU_1_1_1_26_i0_fu___float64_to_int32_round_to_zeroif_11331_11344), .in1(out_eq_expr_FU_16_0_16_16_i0_fu___float64_to_int32_round_to_zeroif_11331_11342), .in2(out_ui_ne_expr_FU_64_0_64_29_i0_fu___float64_to_int32_round_to_zeroif_11331_11343));
  read_cond_FU #(.BITSIZE_in1(1)) fu___float64_to_int32_round_to_zeroif_11331_11346 (.out1(out_read_cond_FU_11_i0_fu___float64_to_int32_round_to_zeroif_11331_11346), .in1(out_reg_6_reg_6));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_to_int32_round_to_zeroif_11331_11347 (.out1(out_ui_bit_ior_expr_FU_64_0_64_28_i0_fu___float64_to_int32_round_to_zeroif_11331_11347), .in1(out_ui_bit_and_expr_FU_64_0_64_27_i0_fu___float64_to_int32_round_to_zeroif_11331_11336), .in2(out_const_9));
  minus_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(7)) fu___float64_to_int32_round_to_zeroif_11331_11348 (.out1(out_minus_expr_FU_0_8_8_20_i0_fu___float64_to_int32_round_to_zeroif_11331_11348), .in1(out_const_2), .in2(out_bit_and_expr_FU_16_0_16_13_i0_fu___float64_to_int32_round_to_zeroif_11331_11339));
  IIdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(7)) fu___float64_to_int32_round_to_zeroif_11331_11349 (.out1(out_IIdata_converter_FU_4_i0_fu___float64_to_int32_round_to_zeroif_11331_11349), .in1(out_minus_expr_FU_0_8_8_20_i0_fu___float64_to_int32_round_to_zeroif_11331_11348));
  ui_rshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(7), .BITSIZE_out1(32), .PRECISION(64)) fu___float64_to_int32_round_to_zeroif_11331_11350 (.out1(out_ui_rshift_expr_FU_64_64_64_32_i0_fu___float64_to_int32_round_to_zeroif_11331_11350), .in1(out_reg_1_reg_1), .in2(out_reg_2_reg_2));
  UIconvert_expr_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu___float64_to_int32_round_to_zeroif_11331_11351 (.out1(out_UIconvert_expr_FU_10_i0_fu___float64_to_int32_round_to_zeroif_11331_11351), .in1(out_ui_rshift_expr_FU_64_64_64_32_i0_fu___float64_to_int32_round_to_zeroif_11331_11350));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_to_int32_round_to_zeroif_11331_11352 (.out1(out_UIdata_converter_FU_5_i0_fu___float64_to_int32_round_to_zeroif_11331_11352), .in1(out_ui_rshift_expr_FU_64_0_64_31_i0_fu___float64_to_int32_round_to_zeroif_11331_11340));
  negate_expr_FU #(.BITSIZE_in1(2), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_11353 (.out1(out_negate_expr_FU_1_1_22_i0_fu___float64_to_int32_round_to_zeroif_11331_11353), .in1(out_UIdata_converter_FU_5_i0_fu___float64_to_int32_round_to_zeroif_11331_11352));
  bit_xor_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(1), .BITSIZE_out1(32)) fu___float64_to_int32_round_to_zeroif_11331_11354 (.out1(out_bit_xor_expr_FU_32_32_32_14_i0_fu___float64_to_int32_round_to_zeroif_11331_11354), .in1(out_UIconvert_expr_FU_10_i0_fu___float64_to_int32_round_to_zeroif_11331_11351), .in2(out_reg_4_reg_4));
  plus_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(2), .BITSIZE_out1(32)) fu___float64_to_int32_round_to_zeroif_11331_11355 (.out1(out_plus_expr_FU_32_32_32_23_i0_fu___float64_to_int32_round_to_zeroif_11331_11355), .in1(out_reg_8_reg_8), .in2(out_reg_3_reg_3));
  lt_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_11356 (.out1(out_lt_expr_FU_32_0_32_19_i0_fu___float64_to_int32_round_to_zeroif_11331_11356), .in1(out_plus_expr_FU_32_32_32_23_i0_fu___float64_to_int32_round_to_zeroif_11331_11355), .in2(out_const_0));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_to_int32_round_to_zeroif_11331_11357 (.out1(out_UIdata_converter_FU_12_i0_fu___float64_to_int32_round_to_zeroif_11331_11357), .in1(out_lt_expr_FU_32_0_32_19_i0_fu___float64_to_int32_round_to_zeroif_11331_11356));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_to_int32_round_to_zeroif_11331_11358 (.out1(out_UIconvert_expr_FU_6_i0_fu___float64_to_int32_round_to_zeroif_11331_11358), .in1(out_ui_rshift_expr_FU_64_0_64_31_i0_fu___float64_to_int32_round_to_zeroif_11331_11340));
  gt_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_29930 (.out1(out_gt_expr_FU_16_0_16_17_i0_fu___float64_to_int32_round_to_zeroif_11331_29930), .in1(out_bit_and_expr_FU_16_0_16_13_i0_fu___float64_to_int32_round_to_zeroif_11331_11339), .in2(out_const_1));
  le_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_29934 (.out1(out_le_expr_FU_16_0_16_18_i0_fu___float64_to_int32_round_to_zeroif_11331_29934), .in1(out_bit_and_expr_FU_16_0_16_13_i0_fu___float64_to_int32_round_to_zeroif_11331_11339), .in2(out_const_5));
  ne_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_29936 (.out1(out_ne_expr_FU_8_8_8_21_i0_fu___float64_to_int32_round_to_zeroif_11331_29936), .in1(out_reg_10_reg_10), .in2(out_reg_5_reg_5));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_to_int32_round_to_zeroif_11331_30501 (.out1(out_ui_extract_bit_expr_FU_7_i0_fu___float64_to_int32_round_to_zeroif_11331_30501), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_to_int32_round_to_zeroif_11331_11335), .in2(out_const_10));
  cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(32), .BITSIZE_in3(32), .BITSIZE_out1(9)) fu___float64_to_int32_round_to_zeroif_11331_32391 (.out1(out_cond_expr_FU_16_16_16_16_15_i0_fu___float64_to_int32_round_to_zeroif_11331_32391), .in1(out_ui_extract_bit_expr_FU_7_i0_fu___float64_to_int32_round_to_zeroif_11331_30501), .in2(out_const_8), .in3(out_const_7));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_32394 (.out1(out_multi_read_cond_FU_8_i0_fu___float64_to_int32_round_to_zeroif_11331_32394), .in1({out_truth_not_expr_FU_1_1_25_i0_fu___float64_to_int32_round_to_zeroif_11331_32397}));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_32397 (.out1(out_truth_not_expr_FU_1_1_25_i0_fu___float64_to_int32_round_to_zeroif_11331_32397), .in1(out_gt_expr_FU_16_0_16_17_i0_fu___float64_to_int32_round_to_zeroif_11331_29930));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_to_int32_round_to_zeroif_11331_32400 (.out1(out_truth_and_expr_FU_1_1_1_24_i0_fu___float64_to_int32_round_to_zeroif_11331_32400), .in1(out_gt_expr_FU_16_0_16_17_i0_fu___float64_to_int32_round_to_zeroif_11331_29930), .in2(out_ui_bit_and_expr_FU_1_1_1_26_i0_fu___float64_to_int32_round_to_zeroif_11331_11344));
  cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(9), .BITSIZE_in3(32), .BITSIZE_out1(9)) fu___float64_to_int32_round_to_zeroif_11331_32401 (.out1(out_cond_expr_FU_16_16_16_16_15_i1_fu___float64_to_int32_round_to_zeroif_11331_32401), .in1(out_ne_expr_FU_8_8_8_21_i0_fu___float64_to_int32_round_to_zeroif_11331_29936), .in2(out_reg_7_reg_7), .in3(out_reg_9_reg_9));
  cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(32), .BITSIZE_in3(9), .BITSIZE_out1(9)) fu___float64_to_int32_round_to_zeroif_11331_32404 (.out1(out_cond_expr_FU_16_16_16_16_15_i2_fu___float64_to_int32_round_to_zeroif_11331_32404), .in1(out_truth_and_expr_FU_1_1_1_24_i0_fu___float64_to_int32_round_to_zeroif_11331_32400), .in2(out_const_7), .in3(out_cond_expr_FU_16_16_16_16_15_i0_fu___float64_to_int32_round_to_zeroif_11331_32391));
  register_STD #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_cond_expr_FU_16_16_16_16_15_i2_fu___float64_to_int32_round_to_zeroif_11331_32404), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(53), .BITSIZE_out1(53)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_0_64_28_i0_fu___float64_to_int32_round_to_zeroif_11331_11347), .wenable(wrenable_reg_1));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_UIdata_converter_FU_12_i0_fu___float64_to_int32_round_to_zeroif_11331_11357), .wenable(wrenable_reg_10));
  register_STD #(.BITSIZE_in1(7), .BITSIZE_out1(7)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_4_i0_fu___float64_to_int32_round_to_zeroif_11331_11349), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_UIdata_converter_FU_5_i0_fu___float64_to_int32_round_to_zeroif_11331_11352), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_negate_expr_FU_1_1_22_i0_fu___float64_to_int32_round_to_zeroif_11331_11353), .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_UIconvert_expr_FU_6_i0_fu___float64_to_int32_round_to_zeroif_11331_11358), .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_le_expr_FU_16_0_16_18_i0_fu___float64_to_int32_round_to_zeroif_11331_29934), .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_cond_expr_FU_16_16_16_16_15_i0_fu___float64_to_int32_round_to_zeroif_11331_32391), .wenable(wrenable_reg_7));
  register_STD #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_bit_xor_expr_FU_32_32_32_14_i0_fu___float64_to_int32_round_to_zeroif_11331_11354), .wenable(wrenable_reg_8));
  register_STD #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_plus_expr_FU_32_32_32_23_i0_fu___float64_to_int32_round_to_zeroif_11331_11355), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_MUX_24_gimple_return_FU_9_i0_0_0_1;
  assign OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346 = out_read_cond_FU_11_i0_fu___float64_to_int32_round_to_zeroif_11331_11346;
  assign OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394 = out_multi_read_cond_FU_8_i0_fu___float64_to_int32_round_to_zeroif_11331_32394;

endmodule

// FSM based controller description for __float64_to_int32_round_to_zeroif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_to_int32_round_to_zeroif(done_port, selector_MUX_24_gimple_return_FU_9_i0_0_0_0, selector_MUX_24_gimple_return_FU_9_i0_0_0_1, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346, OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394, clock, reset, start_port);
  // IN
  input OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346;
  input OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_MUX_24_gimple_return_FU_9_i0_0_0_0;
  output selector_MUX_24_gimple_return_FU_9_i0_0_0_1;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_2;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [6:0] S_0 = 7'b0000001,
    S_1 = 7'b0000010,
    S_6 = 7'b1000000,
    S_2 = 7'b0000100,
    S_5 = 7'b0100000,
    S_3 = 7'b0001000,
    S_4 = 7'b0010000;
  reg [6:0] _present_state, _next_state;
  reg done_port;
  reg selector_MUX_24_gimple_return_FU_9_i0_0_0_0;
  reg selector_MUX_24_gimple_return_FU_9_i0_0_0_1;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_2;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_MUX_24_gimple_return_FU_9_i0_0_0_0 = 1'b0;
    selector_MUX_24_gimple_return_FU_9_i0_0_0_1 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          _next_state = S_1;
        end
        else
        begin
          selector_MUX_24_gimple_return_FU_9_i0_0_0_0 = 1'bX;
          selector_MUX_24_gimple_return_FU_9_i0_0_0_1 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          if (OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394 == 1'b1)
            begin
              _next_state = S_2;
              wrenable_reg_0 = 1'b0;
            end
          else
            begin
              _next_state = S_6;
              done_port = 1'b1;
              wrenable_reg_1 = 1'b0;
              wrenable_reg_2 = 1'b0;
              wrenable_reg_3 = 1'b0;
              wrenable_reg_4 = 1'b0;
              wrenable_reg_5 = 1'b0;
              wrenable_reg_6 = 1'b0;
              wrenable_reg_7 = 1'b0;
            end
        end
      S_6 :
        begin
          selector_MUX_24_gimple_return_FU_9_i0_0_0_0 = 1'b1;
          _next_state = S_0;
        end
      S_2 :
        begin
          wrenable_reg_8 = 1'b1;
          if (OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346 == 1'b0)
            begin
              _next_state = S_3;
            end
          else
            begin
              _next_state = S_5;
              done_port = 1'b1;
              wrenable_reg_8 = 1'b0;
            end
        end
      S_5 :
        begin
          _next_state = S_0;
        end
      S_3 :
        begin
          wrenable_reg_10 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_4;
          done_port = 1'b1;
        end
      S_4 :
        begin
          selector_MUX_24_gimple_return_FU_9_i0_0_0_1 = 1'b1;
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_24_gimple_return_FU_9_i0_0_0_0 = 1'bX;
          selector_MUX_24_gimple_return_FU_9_i0_0_0_1 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_to_int32_round_to_zeroif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_to_int32_round_to_zeroif(clock, reset, start_port, done_port, a, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  // OUT
  output done_port;
  output signed [31:0] return_port;
  // Component and signal declarations
  wire OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346;
  wire OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire [63:0] in_port_a_SIGI1;
  wire [63:0] in_port_a_SIGI2;
  wire selector_MUX_24_gimple_return_FU_9_i0_0_0_0;
  wire selector_MUX_24_gimple_return_FU_9_i0_0_0_1;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller___float64_to_int32_round_to_zeroif Controller_i (.done_port(done_delayed_REG_signal_in), .selector_MUX_24_gimple_return_FU_9_i0_0_0_0(selector_MUX_24_gimple_return_FU_9_i0_0_0_0), .selector_MUX_24_gimple_return_FU_9_i0_0_0_1(selector_MUX_24_gimple_return_FU_9_i0_0_0_1), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346(OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346), .OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394(OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_to_int32_round_to_zeroif Datapath_i (.return_port(return_port), .OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346(OUT_CONDITION___float64_to_int32_round_to_zeroif_11331_11346), .OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394(OUT_MULTIIF___float64_to_int32_round_to_zeroif_11331_32394), .clock(clock), .reset(reset), .in_port_a(in_port_a_SIGI2), .selector_MUX_24_gimple_return_FU_9_i0_0_0_0(selector_MUX_24_gimple_return_FU_9_i0_0_0_0), .selector_MUX_24_gimple_return_FU_9_i0_0_0_1(selector_MUX_24_gimple_return_FU_9_i0_0_0_1), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_a_REG (.out1(in_port_a_SIGI2), .clock(clock), .reset(reset), .in1(in_port_a_SIGI1));
  // io-signal post fix
  assign in_port_a_SIGI1 = a;
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Proxy wrapper for function: WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif(clock, reset, start_port, a, PROXY_PREF_start_port, PROXY_PREF_a, done_port, return_port, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___float64_to_int32_round_to_zeroif);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input PROXY_PREF_start_port;
  input [63:0] PROXY_PREF_a;
  input sel___float64_to_int32_round_to_zeroif;
  // OUT
  output done_port;
  output signed [31:0] return_port;
  output PROXY_PREF_done_port;
  output signed [31:0] PROXY_PREF_return_port;
  // Component and signal declarations
  wire [63:0] muxed_in_a;
  wire muxed_in_start_port;
  wire proxy_selector____out_sel;
  wire tmp_out_done_port;
  wire signed [31:0] tmp_out_return_port;
  
  __float64_to_int32_round_to_zeroif __float64_to_int32_round_to_zeroif_i (.done_port(tmp_out_done_port), .return_port(tmp_out_return_port), .clock(clock), .reset(reset), .start_port(muxed_in_start_port), .a(muxed_in_a));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) proxy_mux_____a (.out1(muxed_in_a), .sel(proxy_selector____out_sel), .in1(a), .in2(PROXY_PREF_a));
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) proxy_mux_____start_port (.out1(muxed_in_start_port), .sel(proxy_selector____out_sel), .in1(start_port), .in2(PROXY_PREF_start_port));
  or or_proxy_selector____or_gate( proxy_selector____out_sel, sel___float64_to_int32_round_to_zeroif);
  // io-signal post fix
  assign done_port = tmp_out_done_port;
  assign return_port = tmp_out_return_port;
  assign PROXY_PREF_done_port = tmp_out_done_port;
  assign PROXY_PREF_return_port = tmp_out_return_port;

endmodule

// Datapath RTL description for __int32_to_float64if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___int32_to_float64if(clock, reset, in_port_a, return_port, selector_MUX_17_gimple_return_FU_17_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_MULTIIF___int32_to_float64if_18363_32410);
  // IN
  input clock;
  input reset;
  input signed [31:0] in_port_a;
  input selector_MUX_17_gimple_return_FU_17_i0_0_0_0;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_2;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output [63:0] return_port;
  output OUT_MULTIIF___int32_to_float64if_18363_32410;
  // Component and signal declarations
  wire signed [6:0] out_IIdata_converter_FU_13_i0_fu___int32_to_float64if_18363_20182;
  wire signed [6:0] out_IIdata_converter_FU_14_i0_fu___int32_to_float64if_18363_20184;
  wire [10:0] out_IUdata_converter_FU_15_i0_fu___int32_to_float64if_18363_20188;
  wire [31:0] out_IUdata_converter_FU_2_i0_fu___int32_to_float64if_18363_20043;
  wire [31:0] out_IUdata_converter_FU_3_i0_fu___int32_to_float64if_18363_20034;
  wire [63:0] out_MUX_17_gimple_return_FU_17_i0_0_0_0;
  wire signed [5:0] out_UIdata_converter_FU_12_i0_fu___int32_to_float64if_18363_20180;
  wire out_UUdata_converter_FU_10_i0_fu___int32_to_float64if_18363_20168;
  wire out_UUdata_converter_FU_11_i0_fu___int32_to_float64if_18363_20167;
  wire out_UUdata_converter_FU_4_i0_fu___int32_to_float64if_18363_20186;
  wire [31:0] out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047;
  wire [7:0] out_UUdata_converter_FU_6_i0_fu___int32_to_float64if_18363_20077;
  wire out_UUdata_converter_FU_7_i0_fu___int32_to_float64if_18363_20175;
  wire out_UUdata_converter_FU_8_i0_fu___int32_to_float64if_18363_20170;
  wire out_UUdata_converter_FU_9_i0_fu___int32_to_float64if_18363_20172;
  wire out_const_0;
  wire [63:0] out_const_1;
  wire [2:0] out_const_10;
  wire [4:0] out_const_11;
  wire [5:0] out_const_12;
  wire [6:0] out_const_13;
  wire [5:0] out_const_14;
  wire [6:0] out_const_15;
  wire out_const_16;
  wire [1:0] out_const_17;
  wire [3:0] out_const_18;
  wire [1:0] out_const_19;
  wire [1:0] out_const_2;
  wire [3:0] out_const_20;
  wire [7:0] out_const_21;
  wire [2:0] out_const_3;
  wire [3:0] out_const_4;
  wire [4:0] out_const_5;
  wire [5:0] out_const_6;
  wire [11:0] out_const_7;
  wire [5:0] out_const_8;
  wire [5:0] out_const_9;
  wire signed [22:0] out_conv_in_port_a_I_32_I_23;
  wire out_eq_expr_FU_32_0_32_19_i0_fu___int32_to_float64if_18363_29940;
  wire out_lt_expr_FU_32_0_32_20_i0_fu___int32_to_float64if_18363_20022;
  wire signed [11:0] out_minus_expr_FU_0_16_16_21_i0_fu___int32_to_float64if_18363_20185;
  wire out_multi_read_cond_FU_16_i0_fu___int32_to_float64if_18363_32410;
  wire signed [23:0] out_negate_expr_FU_32_32_22_i0_fu___int32_to_float64if_18363_20033;
  wire signed [6:0] out_plus_expr_FU_8_0_8_23_i0_fu___int32_to_float64if_18363_20181;
  wire [31:0] out_reg_0_reg_0;
  wire out_reg_10_reg_10;
  wire out_reg_11_reg_11;
  wire out_reg_12_reg_12;
  wire [6:0] out_reg_13_reg_13;
  wire [6:0] out_reg_14_reg_14;
  wire [5:0] out_reg_15_reg_15;
  wire [6:0] out_reg_16_reg_16;
  wire [62:0] out_reg_17_reg_17;
  wire [63:0] out_reg_18_reg_18;
  wire out_reg_1_reg_1;
  wire [7:0] out_reg_2_reg_2;
  wire [7:0] out_reg_3_reg_3;
  wire out_reg_4_reg_4;
  wire out_reg_5_reg_5;
  wire out_reg_6_reg_6;
  wire out_reg_7_reg_7;
  wire [63:0] out_reg_8_reg_8;
  wire out_reg_9_reg_9;
  wire out_truth_and_expr_FU_1_1_1_24_i0_fu___int32_to_float64if_18363_32416;
  wire out_truth_and_expr_FU_1_1_1_24_i1_fu___int32_to_float64if_18363_32423;
  wire out_truth_and_expr_FU_1_1_1_24_i2_fu___int32_to_float64if_18363_32427;
  wire out_truth_and_expr_FU_1_1_1_24_i3_fu___int32_to_float64if_18363_32433;
  wire out_truth_not_expr_FU_1_1_25_i0_fu___int32_to_float64if_18363_32413;
  wire out_truth_not_expr_FU_1_1_25_i1_fu___int32_to_float64if_18363_32420;
  wire out_truth_not_expr_FU_1_1_25_i2_fu___int32_to_float64if_18363_32430;
  wire out_truth_not_expr_FU_1_1_25_i3_fu___int32_to_float64if_18363_32484;
  wire out_truth_or_expr_FU_1_1_1_26_i0_fu___int32_to_float64if_18363_32438;
  wire out_truth_or_expr_FU_1_1_1_26_i1_fu___int32_to_float64if_18363_32454;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_27_i0_fu___int32_to_float64if_18363_20061;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_27_i1_fu___int32_to_float64if_18363_20093;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_28_i0_fu___int32_to_float64if_18363_20074;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_28_i1_fu___int32_to_float64if_18363_20091;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_28_i2_fu___int32_to_float64if_18363_20122;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_28_i3_fu___int32_to_float64if_18363_20135;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_29_i0_fu___int32_to_float64if_18363_20076;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_30_i0_fu___int32_to_float64if_18363_20153;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_31_i0_fu___int32_to_float64if_18363_20160;
  wire [3:0] out_ui_bit_ior_expr_FU_0_8_8_32_i0_fu___int32_to_float64if_18363_20174;
  wire [4:0] out_ui_bit_ior_expr_FU_0_8_8_33_i0_fu___int32_to_float64if_18363_20177;
  wire [4:0] out_ui_bit_ior_expr_FU_0_8_8_34_i0_fu___int32_to_float64if_18363_20178;
  wire [4:0] out_ui_bit_ior_expr_FU_0_8_8_35_i0_fu___int32_to_float64if_18363_20179;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_36_i0_fu___int32_to_float64if_18363_32442;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_36_i1_fu___int32_to_float64if_18363_32450;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_36_i2_fu___int32_to_float64if_18363_32458;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_36_i3_fu___int32_to_float64if_18363_32467;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_36_i4_fu___int32_to_float64if_18363_32469;
  wire [31:0] out_ui_cond_expr_FU_32_32_32_32_37_i0_fu___int32_to_float64if_18363_32435;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_38_i0_fu___int32_to_float64if_18363_32439;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_38_i1_fu___int32_to_float64if_18363_32448;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_38_i2_fu___int32_to_float64if_18363_32455;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_38_i3_fu___int32_to_float64if_18363_32465;
  wire out_ui_eq_expr_FU_16_0_16_39_i0_fu___int32_to_float64if_18363_20049;
  wire out_ui_eq_expr_FU_1_0_1_40_i0_fu___int32_to_float64if_18363_20154;
  wire out_ui_eq_expr_FU_1_0_1_40_i1_fu___int32_to_float64if_18363_20161;
  wire out_ui_eq_expr_FU_8_0_8_41_i0_fu___int32_to_float64if_18363_20075;
  wire out_ui_eq_expr_FU_8_0_8_41_i1_fu___int32_to_float64if_18363_20092;
  wire out_ui_eq_expr_FU_8_0_8_41_i2_fu___int32_to_float64if_18363_20119;
  wire out_ui_eq_expr_FU_8_0_8_41_i3_fu___int32_to_float64if_18363_20127;
  wire out_ui_eq_expr_FU_8_0_8_41_i4_fu___int32_to_float64if_18363_20144;
  wire out_ui_eq_expr_FU_8_0_8_41_i5_fu___int32_to_float64if_18363_29946;
  wire out_ui_eq_expr_FU_8_0_8_41_i6_fu___int32_to_float64if_18363_29948;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_42_i0_fu___int32_to_float64if_18363_20187;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_43_i0_fu___int32_to_float64if_18363_20189;
  wire [63:0] out_ui_lshift_expr_FU_64_64_64_44_i0_fu___int32_to_float64if_18363_20183;
  wire [1:0] out_ui_lshift_expr_FU_8_0_8_45_i0_fu___int32_to_float64if_18363_20169;
  wire [2:0] out_ui_lshift_expr_FU_8_0_8_46_i0_fu___int32_to_float64if_18363_20171;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_47_i0_fu___int32_to_float64if_18363_20173;
  wire [4:0] out_ui_lshift_expr_FU_8_0_8_48_i0_fu___int32_to_float64if_18363_20176;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_49_i0_fu___int32_to_float64if_18363_32481;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_49_i1_fu___int32_to_float64if_18363_32497;
  wire [15:0] out_ui_rshift_expr_FU_32_0_32_50_i0_fu___int32_to_float64if_18363_20048;
  wire [8:0] out_ui_rshift_expr_FU_32_0_32_51_i0_fu___int32_to_float64if_18363_20060;
  wire [7:0] out_ui_rshift_expr_FU_32_0_32_52_i0_fu___int32_to_float64if_18363_20068;
  wire [4:0] out_ui_rshift_expr_FU_32_0_32_53_i0_fu___int32_to_float64if_18363_20073;
  wire [4:0] out_ui_rshift_expr_FU_32_0_32_54_i0_fu___int32_to_float64if_18363_20090;
  wire [4:0] out_ui_rshift_expr_FU_32_0_32_55_i0_fu___int32_to_float64if_18363_20125;
  wire [3:0] out_ui_rshift_expr_FU_32_0_32_56_i0_fu___int32_to_float64if_18363_20130;
  wire [3:0] out_ui_rshift_expr_FU_8_0_8_57_i0_fu___int32_to_float64if_18363_20139;
  wire [1:0] out_ui_rshift_expr_FU_8_0_8_58_i0_fu___int32_to_float64if_18363_20143;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_59_i0_fu___int32_to_float64if_18363_30510;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_59_i1_fu___int32_to_float64if_18363_32474;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_59_i2_fu___int32_to_float64if_18363_32477;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_59_i3_fu___int32_to_float64if_18363_32490;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_59_i4_fu___int32_to_float64if_18363_32493;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_60_i0_fu___int32_to_float64if_18363_30513;
  wire [63:0] out_ui_ternary_plus_expr_FU_64_64_64_64_61_i0_fu___int32_to_float64if_18363_20191;
  wire [63:0] out_ui_view_convert_expr_FU_18_i0_fu___int32_to_float64if_18363_20192;
  
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_17_gimple_return_FU_17_i0_0_0_0 (.out1(out_MUX_17_gimple_return_FU_17_i0_0_0_0), .sel(selector_MUX_17_gimple_return_FU_17_i0_0_0_0), .in1(out_const_1), .in2(out_ui_view_convert_expr_FU_18_i0_fu___int32_to_float64if_18363_20192));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(64), .value(64'b0000000000000000000000000000000000000000000000000000000000000000)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(3), .value(3'b011)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(5), .value(5'b01100)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(6), .value(6'b011000)) const_12 (.out1(out_const_12));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_13 (.out1(out_const_13));
  constant_value #(.BITSIZE_out1(6), .value(6'b011100)) const_14 (.out1(out_const_14));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111111)) const_15 (.out1(out_const_15));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_16 (.out1(out_const_16));
  constant_value #(.BITSIZE_out1(2), .value(2'b10)) const_17 (.out1(out_const_17));
  constant_value #(.BITSIZE_out1(4), .value(4'b1000)) const_18 (.out1(out_const_18));
  constant_value #(.BITSIZE_out1(2), .value(2'b11)) const_19 (.out1(out_const_19));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(4), .value(4'b1111)) const_20 (.out1(out_const_20));
  constant_value #(.BITSIZE_out1(8), .value(8'b11111111)) const_21 (.out1(out_const_21));
  constant_value #(.BITSIZE_out1(3), .value(3'b010)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(4), .value(4'b0100)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(5), .value(5'b01000)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(6), .value(6'b010000)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(12), .value(12'b010000110010)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(6), .value(6'b010100)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(6), .value(6'b010101)) const_9 (.out1(out_const_9));
  IIdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(23)) conv_in_port_a_I_32_I_23 (.out1(out_conv_in_port_a_I_32_I_23), .in1(in_port_a));
  lt_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20022 (.out1(out_lt_expr_FU_32_0_32_20_i0_fu___int32_to_float64if_18363_20022), .in1(out_conv_in_port_a_I_32_I_23), .in2(out_const_0));
  negate_expr_FU #(.BITSIZE_in1(23), .BITSIZE_out1(24)) fu___int32_to_float64if_18363_20033 (.out1(out_negate_expr_FU_32_32_22_i0_fu___int32_to_float64if_18363_20033), .in1(out_conv_in_port_a_I_32_I_23));
  IUdata_converter_FU #(.BITSIZE_in1(24), .BITSIZE_out1(32)) fu___int32_to_float64if_18363_20034 (.out1(out_IUdata_converter_FU_3_i0_fu___int32_to_float64if_18363_20034), .in1(out_negate_expr_FU_32_32_22_i0_fu___int32_to_float64if_18363_20033));
  IUdata_converter_FU #(.BITSIZE_in1(23), .BITSIZE_out1(32)) fu___int32_to_float64if_18363_20043 (.out1(out_IUdata_converter_FU_2_i0_fu___int32_to_float64if_18363_20043), .in1(out_conv_in_port_a_I_32_I_23));
  UUdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu___int32_to_float64if_18363_20047 (.out1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in1(out_ui_cond_expr_FU_32_32_32_32_37_i0_fu___int32_to_float64if_18363_32435));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(16), .PRECISION(64)) fu___int32_to_float64if_18363_20048 (.out1(out_ui_rshift_expr_FU_32_0_32_50_i0_fu___int32_to_float64if_18363_20048), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_6));
  ui_eq_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20049 (.out1(out_ui_eq_expr_FU_16_0_16_39_i0_fu___int32_to_float64if_18363_20049), .in1(out_ui_rshift_expr_FU_32_0_32_50_i0_fu___int32_to_float64if_18363_20048), .in2(out_const_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(5), .BITSIZE_out1(9), .PRECISION(64)) fu___int32_to_float64if_18363_20060 (.out1(out_ui_rshift_expr_FU_32_0_32_51_i0_fu___int32_to_float64if_18363_20060), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_5));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___int32_to_float64if_18363_20061 (.out1(out_ui_bit_and_expr_FU_8_0_8_27_i0_fu___int32_to_float64if_18363_20061), .in1(out_ui_rshift_expr_FU_32_0_32_51_i0_fu___int32_to_float64if_18363_20060), .in2(out_const_21));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(8), .PRECISION(64)) fu___int32_to_float64if_18363_20068 (.out1(out_ui_rshift_expr_FU_32_0_32_52_i0_fu___int32_to_float64if_18363_20068), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_12));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(4), .BITSIZE_out1(5), .PRECISION(64)) fu___int32_to_float64if_18363_20073 (.out1(out_ui_rshift_expr_FU_32_0_32_53_i0_fu___int32_to_float64if_18363_20073), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_4));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___int32_to_float64if_18363_20074 (.out1(out_ui_bit_and_expr_FU_8_0_8_28_i0_fu___int32_to_float64if_18363_20074), .in1(out_ui_rshift_expr_FU_32_0_32_53_i0_fu___int32_to_float64if_18363_20073), .in2(out_const_20));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20075 (.out1(out_ui_eq_expr_FU_8_0_8_41_i0_fu___int32_to_float64if_18363_20075), .in1(out_ui_bit_and_expr_FU_8_0_8_28_i0_fu___int32_to_float64if_18363_20074), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___int32_to_float64if_18363_20076 (.out1(out_ui_bit_and_expr_FU_8_0_8_29_i0_fu___int32_to_float64if_18363_20076), .in1(out_ui_cond_expr_FU_32_32_32_32_37_i0_fu___int32_to_float64if_18363_32435), .in2(out_const_21));
  UUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu___int32_to_float64if_18363_20077 (.out1(out_UUdata_converter_FU_6_i0_fu___int32_to_float64if_18363_20077), .in1(out_ui_bit_and_expr_FU_8_0_8_29_i0_fu___int32_to_float64if_18363_20076));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(5), .PRECISION(64)) fu___int32_to_float64if_18363_20090 (.out1(out_ui_rshift_expr_FU_32_0_32_54_i0_fu___int32_to_float64if_18363_20090), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_8));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___int32_to_float64if_18363_20091 (.out1(out_ui_bit_and_expr_FU_8_0_8_28_i1_fu___int32_to_float64if_18363_20091), .in1(out_ui_rshift_expr_FU_32_0_32_54_i0_fu___int32_to_float64if_18363_20090), .in2(out_const_20));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20092 (.out1(out_ui_eq_expr_FU_8_0_8_41_i1_fu___int32_to_float64if_18363_20092), .in1(out_ui_bit_and_expr_FU_8_0_8_28_i1_fu___int32_to_float64if_18363_20091), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___int32_to_float64if_18363_20093 (.out1(out_ui_bit_and_expr_FU_8_0_8_27_i1_fu___int32_to_float64if_18363_20093), .in1(out_ui_rshift_expr_FU_32_0_32_50_i0_fu___int32_to_float64if_18363_20048), .in2(out_const_21));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20119 (.out1(out_ui_eq_expr_FU_8_0_8_41_i2_fu___int32_to_float64if_18363_20119), .in1(out_ui_bit_and_expr_FU_8_0_8_28_i2_fu___int32_to_float64if_18363_20122), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___int32_to_float64if_18363_20122 (.out1(out_ui_bit_and_expr_FU_8_0_8_28_i2_fu___int32_to_float64if_18363_20122), .in1(out_ui_rshift_expr_FU_32_0_32_55_i0_fu___int32_to_float64if_18363_20125), .in2(out_const_20));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(5), .BITSIZE_out1(5), .PRECISION(64)) fu___int32_to_float64if_18363_20125 (.out1(out_ui_rshift_expr_FU_32_0_32_55_i0_fu___int32_to_float64if_18363_20125), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_11));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20127 (.out1(out_ui_eq_expr_FU_8_0_8_41_i3_fu___int32_to_float64if_18363_20127), .in1(out_ui_rshift_expr_FU_32_0_32_56_i0_fu___int32_to_float64if_18363_20130), .in2(out_const_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(4), .PRECISION(64)) fu___int32_to_float64if_18363_20130 (.out1(out_ui_rshift_expr_FU_32_0_32_56_i0_fu___int32_to_float64if_18363_20130), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .in2(out_const_14));
  ui_bit_and_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___int32_to_float64if_18363_20135 (.out1(out_ui_bit_and_expr_FU_8_0_8_28_i3_fu___int32_to_float64if_18363_20135), .in1(out_ui_cond_expr_FU_8_8_8_8_38_i3_fu___int32_to_float64if_18363_32465), .in2(out_const_20));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(4), .BITSIZE_out1(4), .PRECISION(64)) fu___int32_to_float64if_18363_20139 (.out1(out_ui_rshift_expr_FU_8_0_8_57_i0_fu___int32_to_float64if_18363_20139), .in1(out_ui_cond_expr_FU_8_8_8_8_38_i3_fu___int32_to_float64if_18363_32465), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(64)) fu___int32_to_float64if_18363_20143 (.out1(out_ui_rshift_expr_FU_8_0_8_58_i0_fu___int32_to_float64if_18363_20143), .in1(out_ui_lshift_expr_FU_8_0_8_49_i1_fu___int32_to_float64if_18363_32497), .in2(out_const_3));
  ui_eq_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20144 (.out1(out_ui_eq_expr_FU_8_0_8_41_i4_fu___int32_to_float64if_18363_20144), .in1(out_ui_rshift_expr_FU_8_0_8_58_i0_fu___int32_to_float64if_18363_20143), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___int32_to_float64if_18363_20153 (.out1(out_ui_bit_and_expr_FU_8_0_8_30_i0_fu___int32_to_float64if_18363_20153), .in1(out_ui_lshift_expr_FU_8_0_8_49_i1_fu___int32_to_float64if_18363_32497), .in2(out_const_17));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20154 (.out1(out_ui_eq_expr_FU_1_0_1_40_i0_fu___int32_to_float64if_18363_20154), .in1(out_ui_rshift_expr_FU_8_0_8_59_i0_fu___int32_to_float64if_18363_30510), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___int32_to_float64if_18363_20160 (.out1(out_ui_bit_and_expr_FU_8_0_8_31_i0_fu___int32_to_float64if_18363_20160), .in1(out_ui_lshift_expr_FU_8_0_8_49_i1_fu___int32_to_float64if_18363_32497), .in2(out_const_18));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20161 (.out1(out_ui_eq_expr_FU_1_0_1_40_i1_fu___int32_to_float64if_18363_20161), .in1(out_ui_rshift_expr_FU_8_0_8_60_i0_fu___int32_to_float64if_18363_30513), .in2(out_const_0));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20167 (.out1(out_UUdata_converter_FU_11_i0_fu___int32_to_float64if_18363_20167), .in1(out_ui_cond_expr_FU_1_1_1_1_36_i1_fu___int32_to_float64if_18363_32450));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20168 (.out1(out_UUdata_converter_FU_10_i0_fu___int32_to_float64if_18363_20168), .in1(out_ui_eq_expr_FU_8_0_8_41_i4_fu___int32_to_float64if_18363_20144));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___int32_to_float64if_18363_20169 (.out1(out_ui_lshift_expr_FU_8_0_8_45_i0_fu___int32_to_float64if_18363_20169), .in1(out_UUdata_converter_FU_10_i0_fu___int32_to_float64if_18363_20168), .in2(out_const_2));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20170 (.out1(out_UUdata_converter_FU_8_i0_fu___int32_to_float64if_18363_20170), .in1(out_ui_cond_expr_FU_1_1_1_1_36_i3_fu___int32_to_float64if_18363_32467));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_out1(3), .PRECISION(64)) fu___int32_to_float64if_18363_20171 (.out1(out_ui_lshift_expr_FU_8_0_8_46_i0_fu___int32_to_float64if_18363_20171), .in1(out_UUdata_converter_FU_8_i0_fu___int32_to_float64if_18363_20170), .in2(out_const_3));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20172 (.out1(out_UUdata_converter_FU_9_i0_fu___int32_to_float64if_18363_20172), .in1(out_ui_cond_expr_FU_1_1_1_1_36_i4_fu___int32_to_float64if_18363_32469));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_out1(4), .PRECISION(64)) fu___int32_to_float64if_18363_20173 (.out1(out_ui_lshift_expr_FU_8_0_8_47_i0_fu___int32_to_float64if_18363_20173), .in1(out_UUdata_converter_FU_9_i0_fu___int32_to_float64if_18363_20172), .in2(out_const_10));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(3), .BITSIZE_out1(4)) fu___int32_to_float64if_18363_20174 (.out1(out_ui_bit_ior_expr_FU_0_8_8_32_i0_fu___int32_to_float64if_18363_20174), .in1(out_ui_lshift_expr_FU_8_0_8_47_i0_fu___int32_to_float64if_18363_20173), .in2(out_ui_lshift_expr_FU_8_0_8_46_i0_fu___int32_to_float64if_18363_20171));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20175 (.out1(out_UUdata_converter_FU_7_i0_fu___int32_to_float64if_18363_20175), .in1(out_reg_1_reg_1));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(4), .BITSIZE_out1(5), .PRECISION(64)) fu___int32_to_float64if_18363_20176 (.out1(out_ui_lshift_expr_FU_8_0_8_48_i0_fu___int32_to_float64if_18363_20176), .in1(out_UUdata_converter_FU_7_i0_fu___int32_to_float64if_18363_20175), .in2(out_const_4));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(5), .BITSIZE_out1(5)) fu___int32_to_float64if_18363_20177 (.out1(out_ui_bit_ior_expr_FU_0_8_8_33_i0_fu___int32_to_float64if_18363_20177), .in1(out_ui_lshift_expr_FU_8_0_8_45_i0_fu___int32_to_float64if_18363_20169), .in2(out_ui_lshift_expr_FU_8_0_8_48_i0_fu___int32_to_float64if_18363_20176));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(5), .BITSIZE_out1(5)) fu___int32_to_float64if_18363_20178 (.out1(out_ui_bit_ior_expr_FU_0_8_8_34_i0_fu___int32_to_float64if_18363_20178), .in1(out_ui_bit_ior_expr_FU_0_8_8_32_i0_fu___int32_to_float64if_18363_20174), .in2(out_ui_bit_ior_expr_FU_0_8_8_33_i0_fu___int32_to_float64if_18363_20177));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(1), .BITSIZE_out1(5)) fu___int32_to_float64if_18363_20179 (.out1(out_ui_bit_ior_expr_FU_0_8_8_35_i0_fu___int32_to_float64if_18363_20179), .in1(out_ui_bit_ior_expr_FU_0_8_8_34_i0_fu___int32_to_float64if_18363_20178), .in2(out_UUdata_converter_FU_11_i0_fu___int32_to_float64if_18363_20167));
  UIdata_converter_FU #(.BITSIZE_in1(5), .BITSIZE_out1(6)) fu___int32_to_float64if_18363_20180 (.out1(out_UIdata_converter_FU_12_i0_fu___int32_to_float64if_18363_20180), .in1(out_ui_bit_ior_expr_FU_0_8_8_35_i0_fu___int32_to_float64if_18363_20179));
  plus_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(6), .BITSIZE_out1(7)) fu___int32_to_float64if_18363_20181 (.out1(out_plus_expr_FU_8_0_8_23_i0_fu___int32_to_float64if_18363_20181), .in1(out_reg_15_reg_15), .in2(out_const_9));
  IIdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(7)) fu___int32_to_float64if_18363_20182 (.out1(out_IIdata_converter_FU_13_i0_fu___int32_to_float64if_18363_20182), .in1(out_plus_expr_FU_8_0_8_23_i0_fu___int32_to_float64if_18363_20181));
  ui_lshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___int32_to_float64if_18363_20183 (.out1(out_ui_lshift_expr_FU_64_64_64_44_i0_fu___int32_to_float64if_18363_20183), .in1(out_reg_0_reg_0), .in2(out_reg_16_reg_16));
  IIdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(7)) fu___int32_to_float64if_18363_20184 (.out1(out_IIdata_converter_FU_14_i0_fu___int32_to_float64if_18363_20184), .in1(out_plus_expr_FU_8_0_8_23_i0_fu___int32_to_float64if_18363_20181));
  minus_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(7), .BITSIZE_out1(12)) fu___int32_to_float64if_18363_20185 (.out1(out_minus_expr_FU_0_16_16_21_i0_fu___int32_to_float64if_18363_20185), .in1(out_const_7), .in2(out_IIdata_converter_FU_14_i0_fu___int32_to_float64if_18363_20184));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_20186 (.out1(out_UUdata_converter_FU_4_i0_fu___int32_to_float64if_18363_20186), .in1(out_lt_expr_FU_32_0_32_20_i0_fu___int32_to_float64if_18363_20022));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___int32_to_float64if_18363_20187 (.out1(out_ui_lshift_expr_FU_64_0_64_42_i0_fu___int32_to_float64if_18363_20187), .in1(out_UUdata_converter_FU_4_i0_fu___int32_to_float64if_18363_20186), .in2(out_const_15));
  IUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(11)) fu___int32_to_float64if_18363_20188 (.out1(out_IUdata_converter_FU_15_i0_fu___int32_to_float64if_18363_20188), .in1(out_minus_expr_FU_0_16_16_21_i0_fu___int32_to_float64if_18363_20185));
  ui_lshift_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(7), .BITSIZE_out1(63), .PRECISION(64)) fu___int32_to_float64if_18363_20189 (.out1(out_ui_lshift_expr_FU_64_0_64_43_i0_fu___int32_to_float64if_18363_20189), .in1(out_IUdata_converter_FU_15_i0_fu___int32_to_float64if_18363_20188), .in2(out_const_13));
  ui_ternary_plus_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_in3(63), .BITSIZE_out1(64)) fu___int32_to_float64if_18363_20191 (.out1(out_ui_ternary_plus_expr_FU_64_64_64_64_61_i0_fu___int32_to_float64if_18363_20191), .in1(out_reg_18_reg_18), .in2(out_reg_8_reg_8), .in3(out_reg_17_reg_17));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___int32_to_float64if_18363_20192 (.out1(out_ui_view_convert_expr_FU_18_i0_fu___int32_to_float64if_18363_20192), .in1(out_ui_ternary_plus_expr_FU_64_64_64_64_61_i0_fu___int32_to_float64if_18363_20191));
  eq_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_29940 (.out1(out_eq_expr_FU_32_0_32_19_i0_fu___int32_to_float64if_18363_29940), .in1(out_conv_in_port_a_I_32_I_23), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_29946 (.out1(out_ui_eq_expr_FU_8_0_8_41_i5_fu___int32_to_float64if_18363_29946), .in1(out_ui_bit_and_expr_FU_8_0_8_27_i0_fu___int32_to_float64if_18363_20061), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_29948 (.out1(out_ui_eq_expr_FU_8_0_8_41_i6_fu___int32_to_float64if_18363_29948), .in1(out_ui_rshift_expr_FU_32_0_32_52_i0_fu___int32_to_float64if_18363_20068), .in2(out_const_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1), .PRECISION(64)) fu___int32_to_float64if_18363_30510 (.out1(out_ui_rshift_expr_FU_8_0_8_59_i0_fu___int32_to_float64if_18363_30510), .in1(out_ui_bit_and_expr_FU_8_0_8_30_i0_fu___int32_to_float64if_18363_20153), .in2(out_const_16));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(64)) fu___int32_to_float64if_18363_30513 (.out1(out_ui_rshift_expr_FU_8_0_8_60_i0_fu___int32_to_float64if_18363_30513), .in1(out_ui_bit_and_expr_FU_8_0_8_31_i0_fu___int32_to_float64if_18363_20160), .in2(out_const_19));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32410 (.out1(out_multi_read_cond_FU_16_i0_fu___int32_to_float64if_18363_32410), .in1({out_reg_9_reg_9}));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32413 (.out1(out_truth_not_expr_FU_1_1_25_i0_fu___int32_to_float64if_18363_32413), .in1(out_eq_expr_FU_32_0_32_19_i0_fu___int32_to_float64if_18363_29940));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32416 (.out1(out_truth_and_expr_FU_1_1_1_24_i0_fu___int32_to_float64if_18363_32416), .in1(out_lt_expr_FU_32_0_32_20_i0_fu___int32_to_float64if_18363_20022), .in2(out_truth_not_expr_FU_1_1_25_i0_fu___int32_to_float64if_18363_32413));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32420 (.out1(out_truth_not_expr_FU_1_1_25_i1_fu___int32_to_float64if_18363_32420), .in1(out_reg_1_reg_1));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32423 (.out1(out_truth_and_expr_FU_1_1_1_24_i1_fu___int32_to_float64if_18363_32423), .in1(out_reg_11_reg_11), .in2(out_truth_not_expr_FU_1_1_25_i1_fu___int32_to_float64if_18363_32420));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32427 (.out1(out_truth_and_expr_FU_1_1_1_24_i2_fu___int32_to_float64if_18363_32427), .in1(out_reg_1_reg_1), .in2(out_reg_10_reg_10));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32430 (.out1(out_truth_not_expr_FU_1_1_25_i2_fu___int32_to_float64if_18363_32430), .in1(out_ui_eq_expr_FU_8_0_8_41_i5_fu___int32_to_float64if_18363_29946));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32433 (.out1(out_truth_and_expr_FU_1_1_1_24_i3_fu___int32_to_float64if_18363_32433), .in1(out_reg_1_reg_1), .in2(out_reg_12_reg_12));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(32), .BITSIZE_in3(32), .BITSIZE_out1(32)) fu___int32_to_float64if_18363_32435 (.out1(out_ui_cond_expr_FU_32_32_32_32_37_i0_fu___int32_to_float64if_18363_32435), .in1(out_truth_and_expr_FU_1_1_1_24_i0_fu___int32_to_float64if_18363_32416), .in2(out_IUdata_converter_FU_3_i0_fu___int32_to_float64if_18363_20034), .in3(out_IUdata_converter_FU_2_i0_fu___int32_to_float64if_18363_20043));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32438 (.out1(out_truth_or_expr_FU_1_1_1_26_i0_fu___int32_to_float64if_18363_32438), .in1(out_truth_and_expr_FU_1_1_1_24_i2_fu___int32_to_float64if_18363_32427), .in2(out_truth_and_expr_FU_1_1_1_24_i1_fu___int32_to_float64if_18363_32423));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___int32_to_float64if_18363_32439 (.out1(out_ui_cond_expr_FU_8_8_8_8_38_i0_fu___int32_to_float64if_18363_32439), .in1(out_truth_and_expr_FU_1_1_1_24_i2_fu___int32_to_float64if_18363_32427), .in2(out_reg_13_reg_13), .in3(out_reg_14_reg_14));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32442 (.out1(out_ui_cond_expr_FU_1_1_1_1_36_i0_fu___int32_to_float64if_18363_32442), .in1(out_truth_and_expr_FU_1_1_1_24_i2_fu___int32_to_float64if_18363_32427), .in2(out_reg_4_reg_4), .in3(out_reg_5_reg_5));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___int32_to_float64if_18363_32448 (.out1(out_ui_cond_expr_FU_8_8_8_8_38_i1_fu___int32_to_float64if_18363_32448), .in1(out_ui_cond_expr_FU_1_1_1_1_36_i3_fu___int32_to_float64if_18363_32467), .in2(out_ui_rshift_expr_FU_8_0_8_59_i3_fu___int32_to_float64if_18363_32490), .in3(out_ui_rshift_expr_FU_8_0_8_59_i4_fu___int32_to_float64if_18363_32493));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32450 (.out1(out_ui_cond_expr_FU_1_1_1_1_36_i1_fu___int32_to_float64if_18363_32450), .in1(out_ui_eq_expr_FU_8_0_8_41_i4_fu___int32_to_float64if_18363_20144), .in2(out_ui_eq_expr_FU_1_0_1_40_i0_fu___int32_to_float64if_18363_20154), .in3(out_ui_eq_expr_FU_1_0_1_40_i1_fu___int32_to_float64if_18363_20161));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32454 (.out1(out_truth_or_expr_FU_1_1_1_26_i1_fu___int32_to_float64if_18363_32454), .in1(out_truth_and_expr_FU_1_1_1_24_i3_fu___int32_to_float64if_18363_32433), .in2(out_truth_or_expr_FU_1_1_1_26_i0_fu___int32_to_float64if_18363_32438));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___int32_to_float64if_18363_32455 (.out1(out_ui_cond_expr_FU_8_8_8_8_38_i2_fu___int32_to_float64if_18363_32455), .in1(out_truth_and_expr_FU_1_1_1_24_i3_fu___int32_to_float64if_18363_32433), .in2(out_reg_2_reg_2), .in3(out_ui_lshift_expr_FU_8_0_8_49_i0_fu___int32_to_float64if_18363_32481));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32458 (.out1(out_ui_cond_expr_FU_1_1_1_1_36_i2_fu___int32_to_float64if_18363_32458), .in1(out_truth_and_expr_FU_1_1_1_24_i3_fu___int32_to_float64if_18363_32433), .in2(out_reg_6_reg_6), .in3(out_ui_cond_expr_FU_1_1_1_1_36_i0_fu___int32_to_float64if_18363_32442));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___int32_to_float64if_18363_32465 (.out1(out_ui_cond_expr_FU_8_8_8_8_38_i3_fu___int32_to_float64if_18363_32465), .in1(out_truth_or_expr_FU_1_1_1_26_i1_fu___int32_to_float64if_18363_32454), .in2(out_ui_cond_expr_FU_8_8_8_8_38_i2_fu___int32_to_float64if_18363_32455), .in3(out_reg_3_reg_3));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32467 (.out1(out_ui_cond_expr_FU_1_1_1_1_36_i3_fu___int32_to_float64if_18363_32467), .in1(out_truth_or_expr_FU_1_1_1_26_i1_fu___int32_to_float64if_18363_32454), .in2(out_ui_cond_expr_FU_1_1_1_1_36_i2_fu___int32_to_float64if_18363_32458), .in3(out_reg_7_reg_7));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32469 (.out1(out_ui_cond_expr_FU_1_1_1_1_36_i4_fu___int32_to_float64if_18363_32469), .in1(out_truth_or_expr_FU_1_1_1_26_i1_fu___int32_to_float64if_18363_32454), .in2(out_truth_not_expr_FU_1_1_25_i3_fu___int32_to_float64if_18363_32484), .in3(out_const_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___int32_to_float64if_18363_32474 (.out1(out_ui_rshift_expr_FU_8_0_8_59_i1_fu___int32_to_float64if_18363_32474), .in1(out_UUdata_converter_FU_6_i0_fu___int32_to_float64if_18363_20077), .in2(out_const_16));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___int32_to_float64if_18363_32477 (.out1(out_ui_rshift_expr_FU_8_0_8_59_i2_fu___int32_to_float64if_18363_32477), .in1(out_ui_bit_and_expr_FU_8_0_8_27_i1_fu___int32_to_float64if_18363_20093), .in2(out_const_16));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(64)) fu___int32_to_float64if_18363_32481 (.out1(out_ui_lshift_expr_FU_8_0_8_49_i0_fu___int32_to_float64if_18363_32481), .in1(out_ui_cond_expr_FU_8_8_8_8_38_i0_fu___int32_to_float64if_18363_32439), .in2(out_const_16));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___int32_to_float64if_18363_32484 (.out1(out_truth_not_expr_FU_1_1_25_i3_fu___int32_to_float64if_18363_32484), .in1(out_truth_and_expr_FU_1_1_1_24_i3_fu___int32_to_float64if_18363_32433));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___int32_to_float64if_18363_32490 (.out1(out_ui_rshift_expr_FU_8_0_8_59_i3_fu___int32_to_float64if_18363_32490), .in1(out_ui_bit_and_expr_FU_8_0_8_28_i3_fu___int32_to_float64if_18363_20135), .in2(out_const_16));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___int32_to_float64if_18363_32493 (.out1(out_ui_rshift_expr_FU_8_0_8_59_i4_fu___int32_to_float64if_18363_32493), .in1(out_ui_rshift_expr_FU_8_0_8_57_i0_fu___int32_to_float64if_18363_20139), .in2(out_const_16));
  ui_lshift_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(4), .PRECISION(64)) fu___int32_to_float64if_18363_32497 (.out1(out_ui_lshift_expr_FU_8_0_8_49_i1_fu___int32_to_float64if_18363_32497), .in1(out_ui_cond_expr_FU_8_8_8_8_38_i1_fu___int32_to_float64if_18363_32448), .in2(out_const_16));
  register_SE #(.BITSIZE_in1(32), .BITSIZE_out1(32)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_5_i0_fu___int32_to_float64if_18363_20047), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_16_0_16_39_i0_fu___int32_to_float64if_18363_20049), .wenable(wrenable_reg_1));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_41_i5_fu___int32_to_float64if_18363_29946), .wenable(wrenable_reg_10));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_41_i6_fu___int32_to_float64if_18363_29948), .wenable(wrenable_reg_11));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_25_i2_fu___int32_to_float64if_18363_32430), .wenable(wrenable_reg_12));
  register_STD #(.BITSIZE_in1(7), .BITSIZE_out1(7)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_8_0_8_59_i1_fu___int32_to_float64if_18363_32474), .wenable(wrenable_reg_13));
  register_STD #(.BITSIZE_in1(7), .BITSIZE_out1(7)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_8_0_8_59_i2_fu___int32_to_float64if_18363_32477), .wenable(wrenable_reg_14));
  register_STD #(.BITSIZE_in1(6), .BITSIZE_out1(6)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_UIdata_converter_FU_12_i0_fu___int32_to_float64if_18363_20180), .wenable(wrenable_reg_15));
  register_STD #(.BITSIZE_in1(7), .BITSIZE_out1(7)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_13_i0_fu___int32_to_float64if_18363_20182), .wenable(wrenable_reg_16));
  register_SE #(.BITSIZE_in1(63), .BITSIZE_out1(63)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_43_i0_fu___int32_to_float64if_18363_20189), .wenable(wrenable_reg_17));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_64_64_44_i0_fu___int32_to_float64if_18363_20183), .wenable(wrenable_reg_18));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_8_0_8_27_i0_fu___int32_to_float64if_18363_20061), .wenable(wrenable_reg_2));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_32_0_32_52_i0_fu___int32_to_float64if_18363_20068), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_41_i0_fu___int32_to_float64if_18363_20075), .wenable(wrenable_reg_4));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_41_i1_fu___int32_to_float64if_18363_20092), .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_41_i2_fu___int32_to_float64if_18363_20119), .wenable(wrenable_reg_6));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_8_0_8_41_i3_fu___int32_to_float64if_18363_20127), .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_42_i0_fu___int32_to_float64if_18363_20187), .wenable(wrenable_reg_8));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_eq_expr_FU_32_0_32_19_i0_fu___int32_to_float64if_18363_29940), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_MUX_17_gimple_return_FU_17_i0_0_0_0;
  assign OUT_MULTIIF___int32_to_float64if_18363_32410 = out_multi_read_cond_FU_16_i0_fu___int32_to_float64if_18363_32410;

endmodule

// FSM based controller description for __int32_to_float64if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___int32_to_float64if(done_port, selector_MUX_17_gimple_return_FU_17_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_MULTIIF___int32_to_float64if_18363_32410, clock, reset, start_port);
  // IN
  input OUT_MULTIIF___int32_to_float64if_18363_32410;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_MUX_17_gimple_return_FU_17_i0_0_0_0;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_2;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [6:0] S_0 = 7'b0000001,
    S_1 = 7'b0000010,
    S_2 = 7'b0000100,
    S_3 = 7'b0001000,
    S_6 = 7'b1000000,
    S_4 = 7'b0010000,
    S_5 = 7'b0100000;
  reg [6:0] _present_state, _next_state;
  reg done_port;
  reg selector_MUX_17_gimple_return_FU_17_i0_0_0_0;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_2;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_MUX_17_gimple_return_FU_17_i0_0_0_0 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          _next_state = S_1;
        end
        else
        begin
          selector_MUX_17_gimple_return_FU_17_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          wrenable_reg_15 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          wrenable_reg_16 = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_MULTIIF___int32_to_float64if_18363_32410 == 1'b1)
            begin
              _next_state = S_6;
              done_port = 1'b1;
              wrenable_reg_16 = 1'b0;
              wrenable_reg_17 = 1'b0;
            end
          else
            begin
              _next_state = S_4;
            end
        end
      S_6 :
        begin
          selector_MUX_17_gimple_return_FU_17_i0_0_0_0 = 1'b1;
          _next_state = S_0;
        end
      S_4 :
        begin
          wrenable_reg_18 = 1'b1;
          _next_state = S_5;
          done_port = 1'b1;
        end
      S_5 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_17_gimple_return_FU_17_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __int32_to_float64if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __int32_to_float64if(clock, reset, start_port, done_port, a, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input signed [31:0] a;
  // OUT
  output done_port;
  output [63:0] return_port;
  // Component and signal declarations
  wire OUT_MULTIIF___int32_to_float64if_18363_32410;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire signed [31:0] in_port_a_SIGI1;
  wire [31:0] in_port_a_SIGI2;
  wire selector_MUX_17_gimple_return_FU_17_i0_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller___int32_to_float64if Controller_i (.done_port(done_delayed_REG_signal_in), .selector_MUX_17_gimple_return_FU_17_i0_0_0_0(selector_MUX_17_gimple_return_FU_17_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_MULTIIF___int32_to_float64if_18363_32410(OUT_MULTIIF___int32_to_float64if_18363_32410), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___int32_to_float64if Datapath_i (.return_port(return_port), .OUT_MULTIIF___int32_to_float64if_18363_32410(OUT_MULTIIF___int32_to_float64if_18363_32410), .clock(clock), .reset(reset), .in_port_a(in_port_a_SIGI2), .selector_MUX_17_gimple_return_FU_17_i0_0_0_0(selector_MUX_17_gimple_return_FU_17_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  register_STD #(.BITSIZE_in1(32), .BITSIZE_out1(32)) in_port_a_REG (.out1(in_port_a_SIGI2), .clock(clock), .reset(reset), .in1(in_port_a_SIGI1));
  // io-signal post fix
  assign in_port_a_SIGI1 = a;
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Proxy wrapper for function: WRAPPED_PROXY_PREF___int32_to_float64if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module WRAPPED_PROXY_PREF___int32_to_float64if(clock, reset, start_port, a, PROXY_PREF_start_port, PROXY_PREF_a, done_port, return_port, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___int32_to_float64if);
  // IN
  input clock;
  input reset;
  input start_port;
  input signed [31:0] a;
  input PROXY_PREF_start_port;
  input signed [31:0] PROXY_PREF_a;
  input sel___int32_to_float64if;
  // OUT
  output done_port;
  output [63:0] return_port;
  output PROXY_PREF_done_port;
  output [63:0] PROXY_PREF_return_port;
  // Component and signal declarations
  wire [31:0] muxed_in_a;
  wire muxed_in_start_port;
  wire proxy_selector____out_sel;
  wire tmp_out_done_port;
  wire [63:0] tmp_out_return_port;
  
  __int32_to_float64if __int32_to_float64if_i (.done_port(tmp_out_done_port), .return_port(tmp_out_return_port), .clock(clock), .reset(reset), .start_port(muxed_in_start_port), .a(muxed_in_a));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) proxy_mux_____a (.out1(muxed_in_a), .sel(proxy_selector____out_sel), .in1(a), .in2(PROXY_PREF_a));
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) proxy_mux_____start_port (.out1(muxed_in_start_port), .sel(proxy_selector____out_sel), .in1(start_port), .in2(PROXY_PREF_start_port));
  or or_proxy_selector____or_gate( proxy_selector____out_sel, sel___int32_to_float64if);
  // io-signal post fix
  assign done_port = tmp_out_done_port;
  assign return_port = tmp_out_return_port;
  assign PROXY_PREF_done_port = tmp_out_done_port;
  assign PROXY_PREF_return_port = tmp_out_return_port;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module BMEMORY_CTRL(clock, in1, in2, in3, in4, sel_LOAD, sel_STORE, out1, Min_oe_ram, Mout_oe_ram, Min_we_ram, Mout_we_ram, Min_addr_ram, Mout_addr_ram, M_Rdata_ram, Min_Wdata_ram, Mout_Wdata_ram, Min_data_ram_size, Mout_data_ram_size, M_DataRdy);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1, BITSIZE_Min_addr_ram=1, BITSIZE_Mout_addr_ram=1, BITSIZE_M_Rdata_ram=8, BITSIZE_Min_Wdata_ram=8, BITSIZE_Mout_Wdata_ram=8, BITSIZE_Min_data_ram_size=1, BITSIZE_Mout_data_ram_size=1;
  // IN
  input clock;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input in4;
  input sel_LOAD;
  input sel_STORE;
  input Min_oe_ram;
  input Min_we_ram;
  input [BITSIZE_Min_addr_ram-1:0] Min_addr_ram;
  input [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram;
  input [BITSIZE_Min_Wdata_ram-1:0] Min_Wdata_ram;
  input [BITSIZE_Min_data_ram_size-1:0] Min_data_ram_size;
  input M_DataRdy;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [BITSIZE_Mout_addr_ram-1:0] Mout_addr_ram;
  output [BITSIZE_Mout_Wdata_ram-1:0] Mout_Wdata_ram;
  output [BITSIZE_Mout_data_ram_size-1:0] Mout_data_ram_size;
  
  wire  [BITSIZE_in2-1:0] tmp_addr;
  wire int_sel_LOAD;
  wire int_sel_STORE;
  assign tmp_addr = in2;
  assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
  assign Mout_oe_ram = int_sel_LOAD ? 1'b1 : Min_oe_ram;
  assign Mout_we_ram = int_sel_STORE ? 1'b1 : Min_we_ram;
  assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];
  assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;
  assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;
  assign int_sel_LOAD = sel_LOAD & in4;
  assign int_sel_STORE = sel_STORE & in4;
  // Add assertion here
  // psl default clock = (posedge clock);
  // psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD && Min_oe_ram};
  // psl ERROR_STORE_Min_we_ram: assert never {sel_STORE && Min_we_ram};
  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module mult_expr_FU(clock, in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PIPE_PARAMETER=0;
  // IN
  input clock;
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  generate
    if(PIPE_PARAMETER==1)
    begin
      reg signed [BITSIZE_out1-1:0] out1_reg;
      assign out1 = out1_reg;
      always @(posedge clock)
      begin
        out1_reg <= in1 * in2;
      end
    end
    else if(PIPE_PARAMETER>1)
    begin
      reg signed [BITSIZE_in1-1:0] in1_in;
      reg signed [BITSIZE_in2-1:0] in2_in;
      wire signed [BITSIZE_out1-1:0] mult_res;
      reg signed [BITSIZE_out1-1:0] mul [PIPE_PARAMETER-2:0];
      integer i;
      assign mult_res = in1_in * in2_in;
      always @(posedge clock)
      begin
        in1_in <= in1;
        in2_in <= in2;
        mul[PIPE_PARAMETER-2] <= mult_res;
        for (i=0; i<PIPE_PARAMETER-2; i=i+1)
          mul[i] <= mul[i+1];
      end
      assign out1 = mul[0];
    end
    else
    begin
      assign out1 = in1 * in2;
    end
    endgenerate

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ternary_plus_expr_FU(in1, in2, in3, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_in3=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  input signed [BITSIZE_in3-1:0] in3;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2 + in3;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_gt_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 > in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_le_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 <= in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_lt_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 < in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_pointer_plus_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, LSB_PARAMETER=-1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  wire [BITSIZE_out1-1:0] in1_tmp;
  wire [BITSIZE_out1-1:0] in2_tmp;
  assign in1_tmp = in1;
  assign in2_tmp = in2;generate if (BITSIZE_out1 > LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1_tmp[BITSIZE_out1-1:LSB_PARAMETER] + in2_tmp[BITSIZE_out1-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate
  generate if (LSB_PARAMETER != 0 && BITSIZE_out1 > LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ge_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 >= in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module widen_mult_expr_FU(clock, in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PIPE_PARAMETER=0;
  // IN
  input clock;
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  mult_expr_FU #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_out1(BITSIZE_out1), .PIPE_PARAMETER(PIPE_PARAMETER)) m1 (.out1(out1), .clock(clock), .in1(in1), .in2(in2));
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module IUconvert_expr_FU(in1, out1);
  parameter BITSIZE_in1=1, BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module rshift_expr_FU(in1, in2, out1);
  parameter BITSIZE_in1=1, BITSIZE_in2=1, BITSIZE_out1=1, PRECISION=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg2_bitsize = $clog2(PRECISION);
  `else
    parameter arg2_bitsize = log2(PRECISION);
  `endif
  generate
    if(BITSIZE_in2 > arg2_bitsize)
      assign out1 = in1 >>> (in2[arg2_bitsize-1:0]);
    else
      assign out1 = in1 >>> in2;
  endgenerate
endmodule

// Datapath RTL description for __float64_addif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_addif(clock, reset, in_port_a, in_port_b, return_port, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_54, wrenable_reg_55, wrenable_reg_56, wrenable_reg_57, wrenable_reg_58, wrenable_reg_59, wrenable_reg_6, wrenable_reg_60, wrenable_reg_61, wrenable_reg_62, wrenable_reg_63, wrenable_reg_64, wrenable_reg_65, wrenable_reg_66, wrenable_reg_67, wrenable_reg_68, wrenable_reg_69, wrenable_reg_7, wrenable_reg_70, wrenable_reg_71, wrenable_reg_72, wrenable_reg_73, wrenable_reg_74, wrenable_reg_75, wrenable_reg_76, wrenable_reg_77, wrenable_reg_78, wrenable_reg_79, wrenable_reg_8, wrenable_reg_80, wrenable_reg_81, wrenable_reg_82, wrenable_reg_83, wrenable_reg_84, wrenable_reg_85, wrenable_reg_86, wrenable_reg_87, wrenable_reg_88, wrenable_reg_89, wrenable_reg_9, wrenable_reg_90, wrenable_reg_91, wrenable_reg_92, wrenable_reg_93, wrenable_reg_94, wrenable_reg_95, wrenable_reg_96, wrenable_reg_97);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_24;
  input wrenable_reg_25;
  input wrenable_reg_26;
  input wrenable_reg_27;
  input wrenable_reg_28;
  input wrenable_reg_29;
  input wrenable_reg_3;
  input wrenable_reg_30;
  input wrenable_reg_31;
  input wrenable_reg_32;
  input wrenable_reg_33;
  input wrenable_reg_34;
  input wrenable_reg_35;
  input wrenable_reg_36;
  input wrenable_reg_37;
  input wrenable_reg_38;
  input wrenable_reg_39;
  input wrenable_reg_4;
  input wrenable_reg_40;
  input wrenable_reg_41;
  input wrenable_reg_42;
  input wrenable_reg_43;
  input wrenable_reg_44;
  input wrenable_reg_45;
  input wrenable_reg_46;
  input wrenable_reg_47;
  input wrenable_reg_48;
  input wrenable_reg_49;
  input wrenable_reg_5;
  input wrenable_reg_50;
  input wrenable_reg_51;
  input wrenable_reg_52;
  input wrenable_reg_53;
  input wrenable_reg_54;
  input wrenable_reg_55;
  input wrenable_reg_56;
  input wrenable_reg_57;
  input wrenable_reg_58;
  input wrenable_reg_59;
  input wrenable_reg_6;
  input wrenable_reg_60;
  input wrenable_reg_61;
  input wrenable_reg_62;
  input wrenable_reg_63;
  input wrenable_reg_64;
  input wrenable_reg_65;
  input wrenable_reg_66;
  input wrenable_reg_67;
  input wrenable_reg_68;
  input wrenable_reg_69;
  input wrenable_reg_7;
  input wrenable_reg_70;
  input wrenable_reg_71;
  input wrenable_reg_72;
  input wrenable_reg_73;
  input wrenable_reg_74;
  input wrenable_reg_75;
  input wrenable_reg_76;
  input wrenable_reg_77;
  input wrenable_reg_78;
  input wrenable_reg_79;
  input wrenable_reg_8;
  input wrenable_reg_80;
  input wrenable_reg_81;
  input wrenable_reg_82;
  input wrenable_reg_83;
  input wrenable_reg_84;
  input wrenable_reg_85;
  input wrenable_reg_86;
  input wrenable_reg_87;
  input wrenable_reg_88;
  input wrenable_reg_89;
  input wrenable_reg_9;
  input wrenable_reg_90;
  input wrenable_reg_91;
  input wrenable_reg_92;
  input wrenable_reg_93;
  input wrenable_reg_94;
  input wrenable_reg_95;
  input wrenable_reg_96;
  input wrenable_reg_97;
  // OUT
  output [63:0] return_port;
  // Component and signal declarations
  wire [11:0] out_IUconvert_expr_FU_13_i0_fu___float64_addif_12095_12138;
  wire [52:0] out_IUdata_converter_FU_15_i0_fu___float64_addif_12095_12145;
  wire [56:0] out_IUdata_converter_FU_17_i0_fu___float64_addif_12095_12296;
  wire [63:0] out_IUdata_converter_FU_20_i0_fu___float64_addif_12095_12194;
  wire [63:0] out_IUdata_converter_FU_22_i0_fu___float64_addif_12095_12208;
  wire [63:0] out_IUdata_converter_FU_24_i0_fu___float64_addif_12095_12226;
  wire [63:0] out_IUdata_converter_FU_26_i0_fu___float64_addif_12095_12244;
  wire [63:0] out_IUdata_converter_FU_28_i0_fu___float64_addif_12095_12262;
  wire [63:0] out_IUdata_converter_FU_30_i0_fu___float64_addif_12095_12279;
  wire [11:0] out_IUdata_converter_FU_42_i0_fu___float64_addif_12095_12403;
  wire [10:0] out_IUdata_converter_FU_5_i0_fu___float64_addif_12095_12110;
  wire [10:0] out_IUdata_converter_FU_7_i0_fu___float64_addif_12095_12115;
  wire signed [1:0] out_UIconvert_expr_FU_10_i0_fu___float64_addif_12095_12132;
  wire signed [1:0] out_UIconvert_expr_FU_11_i0_fu___float64_addif_12095_12133;
  wire signed [1:0] out_UIconvert_expr_FU_12_i0_fu___float64_addif_12095_12135;
  wire signed [1:0] out_UIconvert_expr_FU_14_i0_fu___float64_addif_12095_12142;
  wire signed [1:0] out_UIconvert_expr_FU_16_i0_fu___float64_addif_12095_12293;
  wire signed [1:0] out_UIdata_converter_FU_19_i0_fu___float64_addif_12095_12191;
  wire signed [1:0] out_UIdata_converter_FU_21_i0_fu___float64_addif_12095_12205;
  wire signed [1:0] out_UIdata_converter_FU_23_i0_fu___float64_addif_12095_12223;
  wire signed [1:0] out_UIdata_converter_FU_25_i0_fu___float64_addif_12095_12241;
  wire signed [1:0] out_UIdata_converter_FU_27_i0_fu___float64_addif_12095_12259;
  wire signed [1:0] out_UIdata_converter_FU_29_i0_fu___float64_addif_12095_12276;
  wire signed [11:0] out_UIdata_converter_FU_41_i0_fu___float64_addif_12095_12401;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_addif_12095_12108;
  wire signed [11:0] out_UIdata_converter_FU_6_i0_fu___float64_addif_12095_12113;
  wire [5:0] out_UUconvert_expr_FU_40_i0_fu___float64_addif_12095_12390;
  wire [11:0] out_UUconvert_expr_FU_44_i0_fu___float64_addif_12095_12423;
  wire out_UUdata_converter_FU_18_i0_fu___float64_addif_12095_12442;
  wire out_UUdata_converter_FU_31_i0_fu___float64_addif_12095_12171;
  wire out_UUdata_converter_FU_32_i0_fu___float64_addif_12095_12175;
  wire out_UUdata_converter_FU_33_i0_fu___float64_addif_12095_12301;
  wire out_UUdata_converter_FU_34_i0_fu___float64_addif_12095_12412;
  wire out_UUdata_converter_FU_35_i0_fu___float64_addif_12095_12385;
  wire out_UUdata_converter_FU_36_i0_fu___float64_addif_12095_12377;
  wire out_UUdata_converter_FU_37_i0_fu___float64_addif_12095_12380;
  wire out_UUdata_converter_FU_38_i0_fu___float64_addif_12095_12382;
  wire out_UUdata_converter_FU_39_i0_fu___float64_addif_12095_12376;
  wire [11:0] out_UUdata_converter_FU_43_i0_fu___float64_addif_12095_12404;
  wire [10:0] out_UUdata_converter_FU_45_i0_fu___float64_addif_12095_12425;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_48_i0_fu___float64_addif_12095_12109;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_48_i1_fu___float64_addif_12095_12114;
  wire signed [1:0] out_cond_expr_FU_8_8_8_8_49_i0_fu___float64_addif_12095_30772;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [4:0] out_const_10;
  wire [5:0] out_const_11;
  wire [6:0] out_const_12;
  wire [6:0] out_const_13;
  wire [2:0] out_const_14;
  wire [3:0] out_const_15;
  wire [4:0] out_const_16;
  wire [5:0] out_const_17;
  wire [6:0] out_const_18;
  wire [6:0] out_const_19;
  wire [2:0] out_const_2;
  wire [6:0] out_const_20;
  wire [3:0] out_const_21;
  wire [5:0] out_const_22;
  wire [6:0] out_const_23;
  wire [6:0] out_const_24;
  wire [5:0] out_const_25;
  wire [6:0] out_const_26;
  wire [6:0] out_const_27;
  wire [11:0] out_const_28;
  wire out_const_29;
  wire [3:0] out_const_3;
  wire [1:0] out_const_30;
  wire [2:0] out_const_31;
  wire [3:0] out_const_32;
  wire [4:0] out_const_33;
  wire [5:0] out_const_34;
  wire [55:0] out_const_35;
  wire [63:0] out_const_36;
  wire [12:0] out_const_37;
  wire [5:0] out_const_38;
  wire [1:0] out_const_39;
  wire [4:0] out_const_4;
  wire [4:0] out_const_40;
  wire [5:0] out_const_41;
  wire [5:0] out_const_42;
  wire [5:0] out_const_43;
  wire [5:0] out_const_44;
  wire [5:0] out_const_45;
  wire [3:0] out_const_46;
  wire [5:0] out_const_47;
  wire [7:0] out_const_48;
  wire [10:0] out_const_49;
  wire [5:0] out_const_5;
  wire [10:0] out_const_50;
  wire [15:0] out_const_51;
  wire [51:0] out_const_52;
  wire [55:0] out_const_53;
  wire [62:0] out_const_54;
  wire [63:0] out_const_55;
  wire [6:0] out_const_6;
  wire [4:0] out_const_7;
  wire [6:0] out_const_8;
  wire [3:0] out_const_9;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103;
  wire signed [31:0] out_lshift_expr_FU_32_0_32_50_i0_fu___float64_addif_12095_12136;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i0_fu___float64_addif_12095_12143;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i1_fu___float64_addif_12095_12192;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i2_fu___float64_addif_12095_12206;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i3_fu___float64_addif_12095_12224;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i4_fu___float64_addif_12095_12242;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i5_fu___float64_addif_12095_12260;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i6_fu___float64_addif_12095_12277;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i7_fu___float64_addif_12095_12294;
  wire out_lt_expr_FU_8_8_8_52_i0_fu___float64_addif_12095_12134;
  wire out_ne_expr_FU_8_0_8_53_i0_fu___float64_addif_12095_29746;
  wire signed [12:0] out_plus_expr_FU_16_0_16_54_i0_fu___float64_addif_12095_12402;
  wire [51:0] out_reg_0_reg_0;
  wire out_reg_10_reg_10;
  wire out_reg_11_reg_11;
  wire out_reg_12_reg_12;
  wire [51:0] out_reg_13_reg_13;
  wire out_reg_14_reg_14;
  wire out_reg_15_reg_15;
  wire out_reg_16_reg_16;
  wire out_reg_17_reg_17;
  wire [10:0] out_reg_18_reg_18;
  wire [11:0] out_reg_19_reg_19;
  wire [10:0] out_reg_1_reg_1;
  wire out_reg_20_reg_20;
  wire [54:0] out_reg_21_reg_21;
  wire [54:0] out_reg_22_reg_22;
  wire [1:0] out_reg_23_reg_23;
  wire [1:0] out_reg_24_reg_24;
  wire [1:0] out_reg_25_reg_25;
  wire [63:0] out_reg_26_reg_26;
  wire [22:0] out_reg_27_reg_27;
  wire [1:0] out_reg_28_reg_28;
  wire [1:0] out_reg_29_reg_29;
  wire [51:0] out_reg_2_reg_2;
  wire [1:0] out_reg_30_reg_30;
  wire [1:0] out_reg_31_reg_31;
  wire out_reg_32_reg_32;
  wire [63:0] out_reg_33_reg_33;
  wire [63:0] out_reg_34_reg_34;
  wire [54:0] out_reg_35_reg_35;
  wire [63:0] out_reg_36_reg_36;
  wire [63:0] out_reg_37_reg_37;
  wire [63:0] out_reg_38_reg_38;
  wire [46:0] out_reg_39_reg_39;
  wire [10:0] out_reg_3_reg_3;
  wire [63:0] out_reg_40_reg_40;
  wire [63:0] out_reg_41_reg_41;
  wire [63:0] out_reg_42_reg_42;
  wire [63:0] out_reg_43_reg_43;
  wire [63:0] out_reg_44_reg_44;
  wire [63:0] out_reg_45_reg_45;
  wire [63:0] out_reg_46_reg_46;
  wire [63:0] out_reg_47_reg_47;
  wire [61:0] out_reg_48_reg_48;
  wire [63:0] out_reg_49_reg_49;
  wire out_reg_4_reg_4;
  wire [53:0] out_reg_50_reg_50;
  wire [54:0] out_reg_51_reg_51;
  wire [55:0] out_reg_52_reg_52;
  wire [60:0] out_reg_53_reg_53;
  wire out_reg_54_reg_54;
  wire out_reg_55_reg_55;
  wire [56:0] out_reg_56_reg_56;
  wire [7:0] out_reg_57_reg_57;
  wire [7:0] out_reg_58_reg_58;
  wire [7:0] out_reg_59_reg_59;
  wire out_reg_5_reg_5;
  wire [2:0] out_reg_60_reg_60;
  wire [2:0] out_reg_61_reg_61;
  wire [2:0] out_reg_62_reg_62;
  wire [2:0] out_reg_63_reg_63;
  wire [5:0] out_reg_64_reg_64;
  wire out_reg_65_reg_65;
  wire out_reg_66_reg_66;
  wire out_reg_67_reg_67;
  wire out_reg_68_reg_68;
  wire out_reg_69_reg_69;
  wire out_reg_6_reg_6;
  wire out_reg_70_reg_70;
  wire [2:0] out_reg_71_reg_71;
  wire out_reg_72_reg_72;
  wire [7:0] out_reg_73_reg_73;
  wire out_reg_74_reg_74;
  wire out_reg_75_reg_75;
  wire out_reg_76_reg_76;
  wire out_reg_77_reg_77;
  wire out_reg_78_reg_78;
  wire [46:0] out_reg_79_reg_79;
  wire out_reg_7_reg_7;
  wire [46:0] out_reg_80_reg_80;
  wire [46:0] out_reg_81_reg_81;
  wire [46:0] out_reg_82_reg_82;
  wire [54:0] out_reg_83_reg_83;
  wire [5:0] out_reg_84_reg_84;
  wire [51:0] out_reg_85_reg_85;
  wire [1:0] out_reg_86_reg_86;
  wire out_reg_87_reg_87;
  wire out_reg_88_reg_88;
  wire [51:0] out_reg_89_reg_89;
  wire out_reg_8_reg_8;
  wire [63:0] out_reg_90_reg_90;
  wire out_reg_91_reg_91;
  wire [63:0] out_reg_92_reg_92;
  wire out_reg_93_reg_93;
  wire out_reg_94_reg_94;
  wire [12:0] out_reg_95_reg_95;
  wire [63:0] out_reg_96_reg_96;
  wire [62:0] out_reg_97_reg_97;
  wire [56:0] out_reg_9_reg_9;
  wire signed [0:0] out_rshift_expr_FU_32_0_32_55_i0_fu___float64_addif_12095_12137;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i0_fu___float64_addif_12095_12144;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i1_fu___float64_addif_12095_12193;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i2_fu___float64_addif_12095_12207;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i3_fu___float64_addif_12095_12225;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i4_fu___float64_addif_12095_12243;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i5_fu___float64_addif_12095_12261;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i6_fu___float64_addif_12095_12278;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i7_fu___float64_addif_12095_12295;
  wire out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_addif_12095_30644;
  wire out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_addif_12095_30694;
  wire out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_addif_12095_30698;
  wire out_truth_and_expr_FU_1_1_1_57_i12_fu___float64_addif_12095_30704;
  wire out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_addif_12095_30708;
  wire out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_addif_12095_30714;
  wire out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_addif_12095_30718;
  wire out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_addif_12095_30724;
  wire out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_addif_12095_30728;
  wire out_truth_and_expr_FU_1_1_1_57_i18_fu___float64_addif_12095_30734;
  wire out_truth_and_expr_FU_1_1_1_57_i19_fu___float64_addif_12095_30738;
  wire out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_addif_12095_30651;
  wire out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_addif_12095_30744;
  wire out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_addif_12095_30748;
  wire out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_addif_12095_30754;
  wire out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_addif_12095_30758;
  wire out_truth_and_expr_FU_1_1_1_57_i24_fu___float64_addif_12095_30764;
  wire out_truth_and_expr_FU_1_1_1_57_i25_fu___float64_addif_12095_30771;
  wire out_truth_and_expr_FU_1_1_1_57_i26_fu___float64_addif_12095_31013;
  wire out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_addif_12095_30654;
  wire out_truth_and_expr_FU_1_1_1_57_i3_fu___float64_addif_12095_30661;
  wire out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_addif_12095_30664;
  wire out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_addif_12095_30668;
  wire out_truth_and_expr_FU_1_1_1_57_i6_fu___float64_addif_12095_30674;
  wire out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_addif_12095_30678;
  wire out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_addif_12095_30684;
  wire out_truth_and_expr_FU_1_1_1_57_i9_fu___float64_addif_12095_30688;
  wire out_truth_not_expr_FU_1_1_58_i0_fu___float64_addif_12095_12299;
  wire out_truth_not_expr_FU_1_1_58_i10_fu___float64_addif_12095_30701;
  wire out_truth_not_expr_FU_1_1_58_i11_fu___float64_addif_12095_30711;
  wire out_truth_not_expr_FU_1_1_58_i12_fu___float64_addif_12095_30721;
  wire out_truth_not_expr_FU_1_1_58_i13_fu___float64_addif_12095_30731;
  wire out_truth_not_expr_FU_1_1_58_i14_fu___float64_addif_12095_30741;
  wire out_truth_not_expr_FU_1_1_58_i15_fu___float64_addif_12095_30751;
  wire out_truth_not_expr_FU_1_1_58_i16_fu___float64_addif_12095_30761;
  wire out_truth_not_expr_FU_1_1_58_i17_fu___float64_addif_12095_30768;
  wire out_truth_not_expr_FU_1_1_58_i18_fu___float64_addif_12095_31010;
  wire out_truth_not_expr_FU_1_1_58_i19_fu___float64_addif_12095_31084;
  wire out_truth_not_expr_FU_1_1_58_i1_fu___float64_addif_12095_12420;
  wire out_truth_not_expr_FU_1_1_58_i20_fu___float64_addif_12095_31132;
  wire out_truth_not_expr_FU_1_1_58_i2_fu___float64_addif_12095_12428;
  wire out_truth_not_expr_FU_1_1_58_i3_fu___float64_addif_12095_12434;
  wire out_truth_not_expr_FU_1_1_58_i4_fu___float64_addif_12095_30641;
  wire out_truth_not_expr_FU_1_1_58_i5_fu___float64_addif_12095_30648;
  wire out_truth_not_expr_FU_1_1_58_i6_fu___float64_addif_12095_30658;
  wire out_truth_not_expr_FU_1_1_58_i7_fu___float64_addif_12095_30671;
  wire out_truth_not_expr_FU_1_1_58_i8_fu___float64_addif_12095_30681;
  wire out_truth_not_expr_FU_1_1_58_i9_fu___float64_addif_12095_30691;
  wire out_truth_or_expr_FU_1_1_1_59_i0_fu___float64_addif_12095_30802;
  wire out_truth_or_expr_FU_1_1_1_59_i10_fu___float64_addif_12095_30955;
  wire out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976;
  wire out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016;
  wire out_truth_or_expr_FU_1_1_1_59_i1_fu___float64_addif_12095_30818;
  wire out_truth_or_expr_FU_1_1_1_59_i2_fu___float64_addif_12095_30827;
  wire out_truth_or_expr_FU_1_1_1_59_i3_fu___float64_addif_12095_30836;
  wire out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851;
  wire out_truth_or_expr_FU_1_1_1_59_i5_fu___float64_addif_12095_30872;
  wire out_truth_or_expr_FU_1_1_1_59_i6_fu___float64_addif_12095_30881;
  wire out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892;
  wire out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913;
  wire out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_addif_12095_30934;
  wire out_truth_xor_expr_FU_1_1_1_60_i0_fu___float64_addif_12095_30065;
  wire [15:0] out_ui_bit_and_expr_FU_16_0_16_61_i0_fu___float64_addif_12095_12311;
  wire [10:0] out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_addif_12095_12424;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_63_i0_fu___float64_addif_12095_12140;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_63_i1_fu___float64_addif_12095_12141;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_63_i2_fu___float64_addif_12095_12156;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_63_i3_fu___float64_addif_12095_12158;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_64_i0_fu___float64_addif_12095_12190;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_64_i1_fu___float64_addif_12095_12204;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_64_i2_fu___float64_addif_12095_12222;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_64_i3_fu___float64_addif_12095_12240;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_64_i4_fu___float64_addif_12095_12258;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_64_i5_fu___float64_addif_12095_12275;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i0_fu___float64_addif_12095_12411;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_66_i0_fu___float64_addif_12095_12415;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i0_fu___float64_addif_12095_12118;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i1_fu___float64_addif_12095_12122;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i2_fu___float64_addif_12095_12130;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i3_fu___float64_addif_12095_12300;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i4_fu___float64_addif_12095_12418;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i5_fu___float64_addif_12095_12440;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_67_i6_fu___float64_addif_12095_12441;
  wire [22:0] out_ui_bit_and_expr_FU_32_32_32_68_i0_fu___float64_addif_12095_12198;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_69_i0_fu___float64_addif_12095_12106;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_69_i1_fu___float64_addif_12095_12111;
  wire [62:0] out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_addif_12095_12126;
  wire [62:0] out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_addif_12095_12127;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_71_i0_fu___float64_addif_12095_12298;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_71_i1_fu___float64_addif_12095_12304;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_72_i0_fu___float64_addif_12095_12394;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_73_i0_fu___float64_addif_12095_12416;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_73_i1_fu___float64_addif_12095_12431;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_74_i0_fu___float64_addif_12095_12147;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i10_fu___float64_addif_12095_12230;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i11_fu___float64_addif_12095_12232;
  wire [46:0] out_ui_bit_and_expr_FU_64_64_64_74_i12_fu___float64_addif_12095_12235;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_74_i13_fu___float64_addif_12095_12236;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i14_fu___float64_addif_12095_12248;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i15_fu___float64_addif_12095_12250;
  wire [50:0] out_ui_bit_and_expr_FU_64_64_64_74_i16_fu___float64_addif_12095_12253;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_74_i17_fu___float64_addif_12095_12254;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i18_fu___float64_addif_12095_12266;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i19_fu___float64_addif_12095_12268;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_74_i1_fu___float64_addif_12095_12148;
  wire [52:0] out_ui_bit_and_expr_FU_64_64_64_74_i20_fu___float64_addif_12095_12271;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_74_i21_fu___float64_addif_12095_12272;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i22_fu___float64_addif_12095_12283;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i23_fu___float64_addif_12095_12285;
  wire [53:0] out_ui_bit_and_expr_FU_64_64_64_74_i24_fu___float64_addif_12095_12288;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_74_i25_fu___float64_addif_12095_12289;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_74_i2_fu___float64_addif_12095_12161;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_74_i3_fu___float64_addif_12095_12163;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i4_fu___float64_addif_12095_12196;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_74_i5_fu___float64_addif_12095_12200;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i6_fu___float64_addif_12095_12212;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_74_i7_fu___float64_addif_12095_12214;
  wire [38:0] out_ui_bit_and_expr_FU_64_64_64_74_i8_fu___float64_addif_12095_12217;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_74_i9_fu___float64_addif_12095_12218;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_75_i0_fu___float64_addif_12095_12316;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_75_i1_fu___float64_addif_12095_12321;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_75_i2_fu___float64_addif_12095_12326;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_75_i3_fu___float64_addif_12095_12456;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_75_i4_fu___float64_addif_12095_12460;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_75_i5_fu___float64_addif_12095_12482;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i0_fu___float64_addif_12095_12358;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i1_fu___float64_addif_12095_12464;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i2_fu___float64_addif_12095_12468;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_addif_12095_12472;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_addif_12095_12487;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_addif_12095_12490;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_76_i6_fu___float64_addif_12095_12493;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_77_i0_fu___float64_addif_12095_12369;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_78_i0_fu___float64_addif_12095_12452;
  wire [52:0] out_ui_bit_ior_expr_FU_0_64_64_79_i0_fu___float64_addif_12095_12173;
  wire [52:0] out_ui_bit_ior_expr_FU_0_64_64_80_i0_fu___float64_addif_12095_12177;
  wire [63:0] out_ui_bit_ior_expr_FU_0_64_64_81_i0_fu___float64_addif_12095_12417;
  wire [62:0] out_ui_bit_ior_expr_FU_0_64_64_82_i0_fu___float64_addif_12095_12446;
  wire [1:0] out_ui_bit_ior_expr_FU_0_8_8_83_i0_fu___float64_addif_12095_12379;
  wire [4:0] out_ui_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_addif_12095_12384;
  wire [5:0] out_ui_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_addif_12095_12387;
  wire [5:0] out_ui_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_addif_12095_12388;
  wire [10:0] out_ui_bit_ior_expr_FU_16_16_16_87_i0_fu___float64_addif_12095_12157;
  wire [10:0] out_ui_bit_ior_expr_FU_16_16_16_87_i1_fu___float64_addif_12095_12159;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_88_i0_fu___float64_addif_12095_12398;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_88_i1_fu___float64_addif_12095_12413;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_88_i2_fu___float64_addif_12095_12438;
  wire [51:0] out_ui_bit_ior_expr_FU_64_64_64_89_i0_fu___float64_addif_12095_12162;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_89_i10_fu___float64_addif_12095_12255;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i11_fu___float64_addif_12095_12265;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i12_fu___float64_addif_12095_12269;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_89_i13_fu___float64_addif_12095_12273;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i14_fu___float64_addif_12095_12282;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i15_fu___float64_addif_12095_12286;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i16_fu___float64_addif_12095_12444;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i17_fu___float64_addif_12095_12447;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i18_ui_bit_ior_expr_FU_64_64_64_89_i18;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_89_i19_fu___float64_addif_12095_12290;
  wire [51:0] out_ui_bit_ior_expr_FU_64_64_64_89_i1_fu___float64_addif_12095_12164;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_89_i2_fu___float64_addif_12095_12201;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i3_fu___float64_addif_12095_12211;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_89_i4_fu___float64_addif_12095_12219;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i5_fu___float64_addif_12095_12229;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i6_fu___float64_addif_12095_12233;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_89_i7_fu___float64_addif_12095_12237;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i8_fu___float64_addif_12095_12247;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_89_i9_fu___float64_addif_12095_12251;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i0_fu___float64_addif_12095_12181;
  wire [5:0] out_ui_bit_ior_expr_FU_8_8_8_90_i10_fu___float64_addif_12095_12389;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i11_fu___float64_addif_12095_12410;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i12_fu___float64_addif_12095_12414;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i1_fu___float64_addif_12095_12184;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i2_fu___float64_addif_12095_12185;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i4_fu___float64_addif_12095_12189;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i5_fu___float64_addif_12095_12203;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i6_fu___float64_addif_12095_12221;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i7_fu___float64_addif_12095_12239;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i8_fu___float64_addif_12095_12257;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_90_i9_fu___float64_addif_12095_12274;
  wire [11:0] out_ui_bit_not_expr_FU_16_16_91_i0_fu___float64_addif_12095_12139;
  wire [52:0] out_ui_bit_not_expr_FU_64_64_92_i0_fu___float64_addif_12095_12146;
  wire [55:0] out_ui_bit_not_expr_FU_64_64_92_i1_fu___float64_addif_12095_12199;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_92_i2_fu___float64_addif_12095_12213;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_92_i3_fu___float64_addif_12095_12231;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_92_i4_fu___float64_addif_12095_12249;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_92_i5_fu___float64_addif_12095_12267;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_92_i6_fu___float64_addif_12095_12284;
  wire [0:0] out_ui_bit_xor_expr_FU_1_1_1_93_i0_fu___float64_addif_12095_12124;
  wire [56:0] out_ui_bit_xor_expr_FU_64_64_64_94_i0_fu___float64_addif_12095_12297;
  wire [12:0] out_ui_cond_expr_FU_16_16_16_16_95_i0_fu___float64_addif_12095_30635;
  wire [11:0] out_ui_cond_expr_FU_16_16_16_16_95_i1_fu___float64_addif_12095_30774;
  wire [10:0] out_ui_cond_expr_FU_16_16_16_16_95_i2_fu___float64_addif_12095_30776;
  wire [10:0] out_ui_cond_expr_FU_16_16_16_16_95_i3_fu___float64_addif_12095_30778;
  wire [11:0] out_ui_cond_expr_FU_16_16_16_16_95_i4_fu___float64_addif_12095_30796;
  wire [10:0] out_ui_cond_expr_FU_16_16_16_16_95_i5_fu___float64_addif_12095_30798;
  wire [12:0] out_ui_cond_expr_FU_16_16_16_16_95_i6_fu___float64_addif_12095_30808;
  wire [12:0] out_ui_cond_expr_FU_16_16_16_16_95_i7_fu___float64_addif_12095_30810;
  wire [14:0] out_ui_cond_expr_FU_16_16_16_16_95_i8_fu___float64_addif_12095_30874;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i0_fu___float64_addif_12095_30786;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i10_fu___float64_addif_12095_30947;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i11_fu___float64_addif_12095_30959;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i12_fu___float64_addif_12095_30962;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i13_fu___float64_addif_12095_30968;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i14_fu___float64_addif_12095_30980;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i15_fu___float64_addif_12095_30983;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i16_fu___float64_addif_12095_30989;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i17_fu___float64_addif_12095_30998;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i18_fu___float64_addif_12095_31000;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i19_fu___float64_addif_12095_31004;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i1_fu___float64_addif_12095_30788;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i20_fu___float64_addif_12095_31020;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i21_fu___float64_addif_12095_31022;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i22_fu___float64_addif_12095_31030;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i23_fu___float64_addif_12095_31032;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i2_fu___float64_addif_12095_30790;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i3_fu___float64_addif_12095_30794;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i4_fu___float64_addif_12095_30806;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i5_fu___float64_addif_12095_30812;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i6_fu___float64_addif_12095_30905;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i7_fu___float64_addif_12095_30917;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i8_fu___float64_addif_12095_30926;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_96_i9_fu___float64_addif_12095_30938;
  wire [22:0] out_ui_cond_expr_FU_32_32_32_32_97_i0_fu___float64_addif_12095_30838;
  wire [30:0] out_ui_cond_expr_FU_32_32_32_32_97_i1_fu___float64_addif_12095_30861;
  wire [30:0] out_ui_cond_expr_FU_32_32_32_32_97_i2_fu___float64_addif_12095_30902;
  wire [63:0] out_ui_cond_expr_FU_64_64_64_64_98_i0_fu___float64_addif_12095_30632;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_98_i10_fu___float64_addif_12095_30889;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_98_i11_fu___float64_addif_12095_30923;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_98_i12_fu___float64_addif_12095_30944;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_98_i13_fu___float64_addif_12095_30965;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_98_i14_fu___float64_addif_12095_30986;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_98_i15_fu___float64_addif_12095_31002;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_98_i16_fu___float64_addif_12095_31024;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_98_i17_fu___float64_addif_12095_31034;
  wire [52:0] out_ui_cond_expr_FU_64_64_64_64_98_i1_fu___float64_addif_12095_30780;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_98_i2_fu___float64_addif_12095_30782;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_98_i3_fu___float64_addif_12095_30784;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_98_i4_fu___float64_addif_12095_30792;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_98_i5_fu___float64_addif_12095_30803;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_98_i6_fu___float64_addif_12095_30814;
  wire [38:0] out_ui_cond_expr_FU_64_64_64_64_98_i7_fu___float64_addif_12095_30829;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_98_i8_fu___float64_addif_12095_30844;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_98_i9_fu___float64_addif_12095_30883;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_99_i0_fu___float64_addif_12095_30820;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_99_i10_fu___float64_addif_12095_30914;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i11_fu___float64_addif_12095_30929;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_99_i12_fu___float64_addif_12095_30935;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i13_fu___float64_addif_12095_30950;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_99_i14_fu___float64_addif_12095_30956;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i15_fu___float64_addif_12095_30971;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_99_i16_fu___float64_addif_12095_30977;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i17_fu___float64_addif_12095_30992;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_99_i18_fu___float64_addif_12095_30996;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i19_fu___float64_addif_12095_31006;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i1_fu___float64_addif_12095_30824;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i20_fu___float64_addif_12095_31018;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i21_fu___float64_addif_12095_31026;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i22_fu___float64_addif_12095_31028;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i23_fu___float64_addif_12095_31036;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i2_fu___float64_addif_12095_30833;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i3_fu___float64_addif_12095_30842;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i4_fu___float64_addif_12095_30848;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i5_fu___float64_addif_12095_30867;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i6_fu___float64_addif_12095_30878;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i7_fu___float64_addif_12095_30887;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_99_i8_fu___float64_addif_12095_30893;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_99_i9_fu___float64_addif_12095_30908;
  wire out_ui_eq_expr_FU_16_0_16_100_i0_fu___float64_addif_12095_12116;
  wire out_ui_eq_expr_FU_16_0_16_100_i1_fu___float64_addif_12095_12120;
  wire out_ui_eq_expr_FU_16_0_16_101_i0_fu___float64_addif_12095_29750;
  wire out_ui_eq_expr_FU_16_0_16_101_i1_fu___float64_addif_12095_29774;
  wire out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_addif_12095_29758;
  wire out_ui_eq_expr_FU_1_0_1_103_i0_fu___float64_addif_12095_12370;
  wire out_ui_eq_expr_FU_1_0_1_103_i1_fu___float64_addif_12095_12453;
  wire out_ui_eq_expr_FU_1_0_1_104_i0_fu___float64_addif_12095_12395;
  wire out_ui_eq_expr_FU_1_1_1_105_i0_fu___float64_addif_12095_12128;
  wire out_ui_eq_expr_FU_32_0_32_106_i0_fu___float64_addif_12095_12307;
  wire out_ui_eq_expr_FU_8_0_8_107_i0_fu___float64_addif_12095_12366;
  wire out_ui_eq_expr_FU_8_0_8_107_i10_fu___float64_addif_12095_29794;
  wire out_ui_eq_expr_FU_8_0_8_107_i11_fu___float64_addif_12095_29796;
  wire out_ui_eq_expr_FU_8_0_8_107_i1_fu___float64_addif_12095_29776;
  wire out_ui_eq_expr_FU_8_0_8_107_i2_fu___float64_addif_12095_29778;
  wire out_ui_eq_expr_FU_8_0_8_107_i3_fu___float64_addif_12095_29780;
  wire out_ui_eq_expr_FU_8_0_8_107_i4_fu___float64_addif_12095_29782;
  wire out_ui_eq_expr_FU_8_0_8_107_i5_fu___float64_addif_12095_29784;
  wire out_ui_eq_expr_FU_8_0_8_107_i6_fu___float64_addif_12095_29786;
  wire out_ui_eq_expr_FU_8_0_8_107_i7_fu___float64_addif_12095_29788;
  wire out_ui_eq_expr_FU_8_0_8_107_i8_fu___float64_addif_12095_29790;
  wire out_ui_eq_expr_FU_8_0_8_107_i9_fu___float64_addif_12095_29792;
  wire out_ui_eq_expr_FU_8_0_8_108_i0_fu___float64_addif_12095_12392;
  wire out_ui_extract_bit_expr_FU_8_i0_fu___float64_addif_12095_30120;
  wire out_ui_extract_bit_expr_FU_9_i0_fu___float64_addif_12095_30124;
  wire out_ui_le_expr_FU_1_1_1_109_i0_fu___float64_addif_12095_29770;
  wire [52:0] out_ui_lshift_expr_FU_64_0_64_110_i0_fu___float64_addif_12095_12172;
  wire [52:0] out_ui_lshift_expr_FU_64_0_64_110_i1_fu___float64_addif_12095_12176;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_110_i2_fu___float64_addif_12095_12405;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_110_i3_fu___float64_addif_12095_12426;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_111_i0_fu___float64_addif_12095_12174;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_111_i1_fu___float64_addif_12095_12178;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_111_i2_fu___float64_addif_12095_12368;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_addif_12095_12195;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_addif_12095_12309;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_addif_12095_12209;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_addif_12095_12227;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_addif_12095_12245;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_addif_12095_12263;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_addif_12095_12280;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_118_i1_fu___float64_addif_12095_12462;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_118_i2_fu___float64_addif_12095_12466;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_118_i3_fu___float64_addif_12095_12470;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_119_i0_fu___float64_addif_12095_12374;
  wire [51:0] out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_addif_12095_12443;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_addif_12095_12454;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_121_i1_fu___float64_addif_12095_12458;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i0_fu___float64_addif_12095_12474;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i1_fu___float64_addif_12095_12475;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i2_fu___float64_addif_12095_12476;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i3_fu___float64_addif_12095_12477;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i4_fu___float64_addif_12095_12478;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i5_fu___float64_addif_12095_12479;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_122_i6_fu___float64_addif_12095_12480;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_addif_12095_31048;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_addif_12095_31170;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i0_fu___float64_addif_12095_31066;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i1_fu___float64_addif_12095_31233;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i2_fu___float64_addif_12095_31240;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_addif_12095_31258;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_addif_12095_31279;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i5_fu___float64_addif_12095_31289;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_125_i0_fu___float64_addif_12095_31081;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i0_fu___float64_addif_12095_31099;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_127_i0_fu___float64_addif_12095_31114;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_128_i0_fu___float64_addif_12095_31129;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_128_i1_fu___float64_addif_12095_31190;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_128_i2_fu___float64_addif_12095_31203;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_128_i3_fu___float64_addif_12095_31213;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_128_i4_fu___float64_addif_12095_31223;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_129_i0_fu___float64_addif_12095_31147;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_130_i0_fu___float64_addif_12095_31296;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_130_i1_fu___float64_addif_12095_31312;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_130_i2_fu___float64_addif_12095_31329;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_131_i0_fu___float64_addif_12095_31305;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_131_i1_fu___float64_addif_12095_31337;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_132_i0_fu___float64_addif_12095_31319;
  wire [1:0] out_ui_lshift_expr_FU_8_0_8_133_i0_fu___float64_addif_12095_12378;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_134_i0_fu___float64_addif_12095_12381;
  wire [4:0] out_ui_lshift_expr_FU_8_0_8_135_i0_fu___float64_addif_12095_12383;
  wire [5:0] out_ui_lshift_expr_FU_8_0_8_136_i0_fu___float64_addif_12095_12386;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_137_i0_fu___float64_addif_12095_31157;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_137_i1_fu___float64_addif_12095_31180;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_137_i2_fu___float64_addif_12095_31248;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_137_i3_fu___float64_addif_12095_31269;
  wire out_ui_lt_expr_FU_16_16_16_138_i0_fu___float64_addif_12095_12397;
  wire out_ui_lt_expr_FU_1_1_1_139_i0_fu___float64_addif_12095_29762;
  wire out_ui_lt_expr_FU_1_1_1_139_i1_fu___float64_addif_12095_29764;
  wire out_ui_lt_expr_FU_1_1_1_139_i2_fu___float64_addif_12095_29766;
  wire out_ui_lt_expr_FU_64_64_64_140_i0_fu___float64_addif_12095_12129;
  wire [11:0] out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160;
  wire [15:0] out_ui_minus_expr_FU_16_16_16_141_i1_fu___float64_addif_12095_12400;
  wire out_ui_ne_expr_FU_16_0_16_142_i0_fu___float64_addif_12095_12119;
  wire out_ui_ne_expr_FU_16_0_16_142_i1_fu___float64_addif_12095_12123;
  wire out_ui_ne_expr_FU_64_0_64_143_i0_fu___float64_addif_12095_12117;
  wire out_ui_ne_expr_FU_64_0_64_143_i1_fu___float64_addif_12095_12121;
  wire out_ui_ne_expr_FU_64_0_64_144_i0_fu___float64_addif_12095_12291;
  wire [63:0] out_ui_plus_expr_FU_64_64_64_145_i0_fu___float64_addif_12095_12419;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_146_i0_fu___float64_addif_12095_12179;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_147_i0_fu___float64_addif_12095_12180;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_148_i0_fu___float64_addif_12095_12182;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_149_i0_fu___float64_addif_12095_12183;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_150_i0_fu___float64_addif_12095_12186;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_151_i0_fu___float64_addif_12095_12188;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_152_i0_fu___float64_addif_12095_12202;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_153_i0_fu___float64_addif_12095_12220;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_154_i0_fu___float64_addif_12095_12238;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_155_i0_fu___float64_addif_12095_12256;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_156_i0_fu___float64_addif_12095_12104;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_156_i1_fu___float64_addif_12095_12105;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_157_i0_fu___float64_addif_12095_12107;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_157_i1_fu___float64_addif_12095_12112;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_157_i2_fu___float64_addif_12095_12422;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_157_i3_fu___float64_addif_12095_12467;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_158_i0_fu___float64_addif_12095_12197;
  wire [31:0] out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_addif_12095_12306;
  wire [47:0] out_ui_rshift_expr_FU_64_0_64_159_i0_fu___float64_addif_12095_12210;
  wire [38:0] out_ui_rshift_expr_FU_64_0_64_159_i1_fu___float64_addif_12095_12216;
  wire [16:0] out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_addif_12095_12310;
  wire [55:0] out_ui_rshift_expr_FU_64_0_64_160_i0_fu___float64_addif_12095_12228;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_addif_12095_12234;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_160_i2_fu___float64_addif_12095_12391;
  wire [8:0] out_ui_rshift_expr_FU_64_0_64_160_i3_fu___float64_addif_12095_12455;
  wire [59:0] out_ui_rshift_expr_FU_64_0_64_161_i0_fu___float64_addif_12095_12246;
  wire [50:0] out_ui_rshift_expr_FU_64_0_64_161_i1_fu___float64_addif_12095_12252;
  wire [61:0] out_ui_rshift_expr_FU_64_0_64_162_i0_fu___float64_addif_12095_12264;
  wire [52:0] out_ui_rshift_expr_FU_64_0_64_162_i1_fu___float64_addif_12095_12270;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_addif_12095_12408;
  wire [62:0] out_ui_rshift_expr_FU_64_0_64_163_i0_fu___float64_addif_12095_12281;
  wire [53:0] out_ui_rshift_expr_FU_64_0_64_163_i1_fu___float64_addif_12095_12287;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_163_i2_fu___float64_addif_12095_12409;
  wire [51:0] out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_addif_12095_12407;
  wire [15:0] out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_addif_12095_12450;
  wire [8:0] out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_addif_12095_12459;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_addif_12095_12463;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_168_i0_fu___float64_addif_12095_12471;
  wire [8:0] out_ui_rshift_expr_FU_64_0_64_169_i0_fu___float64_addif_12095_12481;
  wire [7:0] out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_addif_12095_12484;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_171_i0_fu___float64_addif_12095_12486;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_addif_12095_12489;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_173_i0_fu___float64_addif_12095_12492;
  wire [3:0] out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_addif_12095_12495;
  wire [60:0] out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_addif_12095_30079;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_addif_12095_30094;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_addif_12095_31040;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_177_i1_fu___float64_addif_12095_31044;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_177_i2_fu___float64_addif_12095_31163;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_177_i3_fu___float64_addif_12095_31166;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_addif_12095_31058;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i1_fu___float64_addif_12095_31061;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i2_fu___float64_addif_12095_31226;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i3_fu___float64_addif_12095_31229;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i4_fu___float64_addif_12095_31236;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i5_fu___float64_addif_12095_31251;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i6_fu___float64_addif_12095_31272;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i7_fu___float64_addif_12095_31275;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i8_fu___float64_addif_12095_31282;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_178_i9_fu___float64_addif_12095_31285;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_addif_12095_31073;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_179_i1_fu___float64_addif_12095_31077;
  wire [38:0] out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_addif_12095_31091;
  wire [38:0] out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_addif_12095_31095;
  wire [6:0] out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_addif_12095_31106;
  wire [6:0] out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_addif_12095_31110;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_addif_12095_31121;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_addif_12095_31125;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i2_fu___float64_addif_12095_31183;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i3_fu___float64_addif_12095_31186;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i4_fu___float64_addif_12095_31196;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i5_fu___float64_addif_12095_31199;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i6_fu___float64_addif_12095_31206;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i7_fu___float64_addif_12095_31209;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i8_fu___float64_addif_12095_31216;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_182_i9_fu___float64_addif_12095_31219;
  wire [14:0] out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_addif_12095_31139;
  wire [14:0] out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_addif_12095_31143;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_addif_12095_31300;
  wire [10:0] out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_addif_12095_31332;
  wire [12:0] out_ui_rshift_expr_FU_64_0_64_185_i0_fu___float64_addif_12095_31308;
  wire [12:0] out_ui_rshift_expr_FU_64_0_64_185_i1_fu___float64_addif_12095_31322;
  wire [12:0] out_ui_rshift_expr_FU_64_0_64_185_i2_fu___float64_addif_12095_31325;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_186_i0_fu___float64_addif_12095_31315;
  wire [3:0] out_ui_rshift_expr_FU_8_0_8_187_i0_fu___float64_addif_12095_12359;
  wire [1:0] out_ui_rshift_expr_FU_8_0_8_188_i0_fu___float64_addif_12095_12365;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_189_i0_fu___float64_addif_12095_30088;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_189_i1_fu___float64_addif_12095_31150;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_189_i2_fu___float64_addif_12095_31153;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_189_i3_fu___float64_addif_12095_31173;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_189_i4_fu___float64_addif_12095_31176;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_189_i5_fu___float64_addif_12095_31243;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_189_i6_fu___float64_addif_12095_31261;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_189_i7_fu___float64_addif_12095_31265;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_190_i0_fu___float64_addif_12095_30101;
  wire [56:0] out_ui_ternary_plus_expr_FU_64_64_64_64_191_i0_fu___float64_addif_12095_12303;
  wire [63:0] out_ui_view_convert_expr_FU_46_i0_fu___float64_addif_12095_12448;
  
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(5), .value(5'b01010)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(6), .value(6'b010100)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(7), .value(7'b0101000)) const_12 (.out1(out_const_12));
  constant_value #(.BITSIZE_out1(7), .value(7'b0101100)) const_13 (.out1(out_const_13));
  constant_value #(.BITSIZE_out1(3), .value(3'b011)) const_14 (.out1(out_const_14));
  constant_value #(.BITSIZE_out1(4), .value(4'b0110)) const_15 (.out1(out_const_15));
  constant_value #(.BITSIZE_out1(5), .value(5'b01100)) const_16 (.out1(out_const_16));
  constant_value #(.BITSIZE_out1(6), .value(6'b011000)) const_17 (.out1(out_const_17));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110000)) const_18 (.out1(out_const_18));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110011)) const_19 (.out1(out_const_19));
  constant_value #(.BITSIZE_out1(3), .value(3'b010)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_20 (.out1(out_const_20));
  constant_value #(.BITSIZE_out1(4), .value(4'b0111)) const_21 (.out1(out_const_21));
  constant_value #(.BITSIZE_out1(6), .value(6'b011100)) const_22 (.out1(out_const_22));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111000)) const_23 (.out1(out_const_23));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111100)) const_24 (.out1(out_const_24));
  constant_value #(.BITSIZE_out1(6), .value(6'b011111)) const_25 (.out1(out_const_25));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111110)) const_26 (.out1(out_const_26));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111111)) const_27 (.out1(out_const_27));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_28 (.out1(out_const_28));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_29 (.out1(out_const_29));
  constant_value #(.BITSIZE_out1(4), .value(4'b0100)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(2), .value(2'b10)) const_30 (.out1(out_const_30));
  constant_value #(.BITSIZE_out1(3), .value(3'b100)) const_31 (.out1(out_const_31));
  constant_value #(.BITSIZE_out1(4), .value(4'b1000)) const_32 (.out1(out_const_32));
  constant_value #(.BITSIZE_out1(5), .value(5'b10000)) const_33 (.out1(out_const_33));
  constant_value #(.BITSIZE_out1(6), .value(6'b100000)) const_34 (.out1(out_const_34));
  constant_value #(.BITSIZE_out1(56), .value(56'b10000000000000000000000000000000000000000000000000000000)) const_35 (.out1(out_const_35));
  constant_value #(.BITSIZE_out1(64), .value(64'b1000000000000000000000000000000000000000000000000000000000000000)) const_36 (.out1(out_const_36));
  constant_value #(.BITSIZE_out1(13), .value(13'b1000000000001)) const_37 (.out1(out_const_37));
  constant_value #(.BITSIZE_out1(6), .value(6'b101000)) const_38 (.out1(out_const_38));
  constant_value #(.BITSIZE_out1(2), .value(2'b11)) const_39 (.out1(out_const_39));
  constant_value #(.BITSIZE_out1(5), .value(5'b01000)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(5), .value(5'b11000)) const_40 (.out1(out_const_40));
  constant_value #(.BITSIZE_out1(6), .value(6'b110000)) const_41 (.out1(out_const_41));
  constant_value #(.BITSIZE_out1(6), .value(6'b110011)) const_42 (.out1(out_const_42));
  constant_value #(.BITSIZE_out1(6), .value(6'b110100)) const_43 (.out1(out_const_43));
  constant_value #(.BITSIZE_out1(6), .value(6'b110111)) const_44 (.out1(out_const_44));
  constant_value #(.BITSIZE_out1(6), .value(6'b111000)) const_45 (.out1(out_const_45));
  constant_value #(.BITSIZE_out1(4), .value(4'b1111)) const_46 (.out1(out_const_46));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_47 (.out1(out_const_47));
  constant_value #(.BITSIZE_out1(8), .value(8'b11111111)) const_48 (.out1(out_const_48));
  constant_value #(.BITSIZE_out1(11), .value(11'b11111111110)) const_49 (.out1(out_const_49));
  constant_value #(.BITSIZE_out1(6), .value(6'b010000)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(11), .value(11'b11111111111)) const_50 (.out1(out_const_50));
  constant_value #(.BITSIZE_out1(16), .value(16'b1111111111111111)) const_51 (.out1(out_const_51));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_52 (.out1(out_const_52));
  constant_value #(.BITSIZE_out1(56), .value(56'b11111111111111111111111111111111111111111111111111111111)) const_53 (.out1(out_const_53));
  constant_value #(.BITSIZE_out1(63), .value(63'b111111111111111111111111111111111111111111111111111111111111111)) const_54 (.out1(out_const_54));
  constant_value #(.BITSIZE_out1(64), .value(64'b1111111111111111111111111111111111111111111111111111111111111111)) const_55 (.out1(out_const_55));
  constant_value #(.BITSIZE_out1(7), .value(7'b0100000)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(5), .value(5'b01001)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(7), .value(7'b0100100)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(4), .value(4'b0101)) const_9 (.out1(out_const_9));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12102 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12103 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103), .in1(in_port_b));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12104 (.out1(out_ui_rshift_expr_FU_64_0_64_156_i0_fu___float64_addif_12095_12104), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103), .in2(out_const_27));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12105 (.out1(out_ui_rshift_expr_FU_64_0_64_156_i1_fu___float64_addif_12095_12105), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102), .in2(out_const_27));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12106 (.out1(out_ui_bit_and_expr_FU_64_0_64_69_i0_fu___float64_addif_12095_12106), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102), .in2(out_const_52));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_addif_12095_12107 (.out1(out_ui_rshift_expr_FU_64_0_64_157_i0_fu___float64_addif_12095_12107), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102), .in2(out_const_20));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12108 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_addif_12095_12108), .in1(out_ui_rshift_expr_FU_64_0_64_157_i0_fu___float64_addif_12095_12107));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12109 (.out1(out_bit_and_expr_FU_16_0_16_48_i0_fu___float64_addif_12095_12109), .in1(out_UIdata_converter_FU_4_i0_fu___float64_addif_12095_12108), .in2(out_const_28));
  IUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(11)) fu___float64_addif_12095_12110 (.out1(out_IUdata_converter_FU_5_i0_fu___float64_addif_12095_12110), .in1(out_bit_and_expr_FU_16_0_16_48_i0_fu___float64_addif_12095_12109));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12111 (.out1(out_ui_bit_and_expr_FU_64_0_64_69_i1_fu___float64_addif_12095_12111), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103), .in2(out_const_52));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_addif_12095_12112 (.out1(out_ui_rshift_expr_FU_64_0_64_157_i1_fu___float64_addif_12095_12112), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103), .in2(out_const_20));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12113 (.out1(out_UIdata_converter_FU_6_i0_fu___float64_addif_12095_12113), .in1(out_ui_rshift_expr_FU_64_0_64_157_i1_fu___float64_addif_12095_12112));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12114 (.out1(out_bit_and_expr_FU_16_0_16_48_i1_fu___float64_addif_12095_12114), .in1(out_UIdata_converter_FU_6_i0_fu___float64_addif_12095_12113), .in2(out_const_28));
  IUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(11)) fu___float64_addif_12095_12115 (.out1(out_IUdata_converter_FU_7_i0_fu___float64_addif_12095_12115), .in1(out_bit_and_expr_FU_16_0_16_48_i1_fu___float64_addif_12095_12114));
  ui_eq_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_addif_12095_12116 (.out1(out_ui_eq_expr_FU_16_0_16_100_i0_fu___float64_addif_12095_12116), .in1(out_IUdata_converter_FU_5_i0_fu___float64_addif_12095_12110), .in2(out_const_50));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12117 (.out1(out_ui_ne_expr_FU_64_0_64_143_i0_fu___float64_addif_12095_12117), .in1(out_ui_bit_and_expr_FU_64_0_64_69_i0_fu___float64_addif_12095_12106), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12118 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i0_fu___float64_addif_12095_12118), .in1(out_ui_eq_expr_FU_16_0_16_100_i0_fu___float64_addif_12095_12116), .in2(out_ui_ne_expr_FU_64_0_64_143_i0_fu___float64_addif_12095_12117));
  ui_ne_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12119 (.out1(out_ui_ne_expr_FU_16_0_16_142_i0_fu___float64_addif_12095_12119), .in1(out_IUdata_converter_FU_5_i0_fu___float64_addif_12095_12110), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_addif_12095_12120 (.out1(out_ui_eq_expr_FU_16_0_16_100_i1_fu___float64_addif_12095_12120), .in1(out_IUdata_converter_FU_7_i0_fu___float64_addif_12095_12115), .in2(out_const_50));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12121 (.out1(out_ui_ne_expr_FU_64_0_64_143_i1_fu___float64_addif_12095_12121), .in1(out_ui_bit_and_expr_FU_64_0_64_69_i1_fu___float64_addif_12095_12111), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12122 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i1_fu___float64_addif_12095_12122), .in1(out_ui_eq_expr_FU_16_0_16_100_i1_fu___float64_addif_12095_12120), .in2(out_ui_ne_expr_FU_64_0_64_143_i1_fu___float64_addif_12095_12121));
  ui_ne_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12123 (.out1(out_ui_ne_expr_FU_16_0_16_142_i1_fu___float64_addif_12095_12123), .in1(out_IUdata_converter_FU_7_i0_fu___float64_addif_12095_12115), .in2(out_const_0));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12124 (.out1(out_ui_bit_xor_expr_FU_1_1_1_93_i0_fu___float64_addif_12095_12124), .in1(out_ui_rshift_expr_FU_64_0_64_156_i1_fu___float64_addif_12095_12105), .in2(out_ui_rshift_expr_FU_64_0_64_156_i0_fu___float64_addif_12095_12104));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_addif_12095_12126 (.out1(out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_addif_12095_12126), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102), .in2(out_const_54));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_addif_12095_12127 (.out1(out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_addif_12095_12127), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103), .in2(out_const_54));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12128 (.out1(out_ui_eq_expr_FU_1_1_1_105_i0_fu___float64_addif_12095_12128), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i0_fu___float64_addif_12095_12118), .in2(out_ui_bit_and_expr_FU_1_1_1_67_i1_fu___float64_addif_12095_12122));
  ui_lt_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(63), .BITSIZE_out1(1)) fu___float64_addif_12095_12129 (.out1(out_ui_lt_expr_FU_64_64_64_140_i0_fu___float64_addif_12095_12129), .in1(out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_addif_12095_12126), .in2(out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_addif_12095_12127));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12130 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i2_fu___float64_addif_12095_12130), .in1(out_ui_eq_expr_FU_1_1_1_105_i0_fu___float64_addif_12095_12128), .in2(out_ui_lt_expr_FU_64_64_64_140_i0_fu___float64_addif_12095_12129));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12132 (.out1(out_UIconvert_expr_FU_10_i0_fu___float64_addif_12095_12132), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i0_fu___float64_addif_12095_12118));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12133 (.out1(out_UIconvert_expr_FU_11_i0_fu___float64_addif_12095_12133), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i1_fu___float64_addif_12095_12122));
  lt_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_addif_12095_12134 (.out1(out_lt_expr_FU_8_8_8_52_i0_fu___float64_addif_12095_12134), .in1(out_UIconvert_expr_FU_10_i0_fu___float64_addif_12095_12132), .in2(out_UIconvert_expr_FU_11_i0_fu___float64_addif_12095_12133));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12135 (.out1(out_UIconvert_expr_FU_12_i0_fu___float64_addif_12095_12135), .in1(out_reg_8_reg_8));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(6), .BITSIZE_out1(32), .PRECISION(32)) fu___float64_addif_12095_12136 (.out1(out_lshift_expr_FU_32_0_32_50_i0_fu___float64_addif_12095_12136), .in1(out_UIconvert_expr_FU_12_i0_fu___float64_addif_12095_12135), .in2(out_const_25));
  rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(32)) fu___float64_addif_12095_12137 (.out1(out_rshift_expr_FU_32_0_32_55_i0_fu___float64_addif_12095_12137), .in1(out_lshift_expr_FU_32_0_32_50_i0_fu___float64_addif_12095_12136), .in2(out_const_25));
  IUconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(12)) fu___float64_addif_12095_12138 (.out1(out_IUconvert_expr_FU_13_i0_fu___float64_addif_12095_12138), .in1(out_rshift_expr_FU_32_0_32_55_i0_fu___float64_addif_12095_12137));
  ui_bit_not_expr_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12139 (.out1(out_ui_bit_not_expr_FU_16_16_91_i0_fu___float64_addif_12095_12139), .in1(out_IUconvert_expr_FU_13_i0_fu___float64_addif_12095_12138));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12140 (.out1(out_ui_bit_and_expr_FU_16_16_16_63_i0_fu___float64_addif_12095_12140), .in1(out_ui_bit_not_expr_FU_16_16_91_i0_fu___float64_addif_12095_12139), .in2(out_reg_3_reg_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12141 (.out1(out_ui_bit_and_expr_FU_16_16_16_63_i1_fu___float64_addif_12095_12141), .in1(out_ui_bit_not_expr_FU_16_16_91_i0_fu___float64_addif_12095_12139), .in2(out_reg_1_reg_1));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12142 (.out1(out_UIconvert_expr_FU_14_i0_fu___float64_addif_12095_12142), .in1(out_reg_8_reg_8));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12143 (.out1(out_lshift_expr_FU_64_0_64_51_i0_fu___float64_addif_12095_12143), .in1(out_UIconvert_expr_FU_14_i0_fu___float64_addif_12095_12142), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12144 (.out1(out_rshift_expr_FU_64_0_64_56_i0_fu___float64_addif_12095_12144), .in1(out_lshift_expr_FU_64_0_64_51_i0_fu___float64_addif_12095_12143), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(53)) fu___float64_addif_12095_12145 (.out1(out_IUdata_converter_FU_15_i0_fu___float64_addif_12095_12145), .in1(out_rshift_expr_FU_64_0_64_56_i0_fu___float64_addif_12095_12144));
  ui_bit_not_expr_FU #(.BITSIZE_in1(53), .BITSIZE_out1(53)) fu___float64_addif_12095_12146 (.out1(out_ui_bit_not_expr_FU_64_64_92_i0_fu___float64_addif_12095_12146), .in1(out_IUdata_converter_FU_15_i0_fu___float64_addif_12095_12145));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12147 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i0_fu___float64_addif_12095_12147), .in1(out_ui_bit_not_expr_FU_64_64_92_i0_fu___float64_addif_12095_12146), .in2(out_reg_2_reg_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12148 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i1_fu___float64_addif_12095_12148), .in1(out_ui_bit_not_expr_FU_64_64_92_i0_fu___float64_addif_12095_12146), .in2(out_reg_0_reg_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12156 (.out1(out_ui_bit_and_expr_FU_16_16_16_63_i2_fu___float64_addif_12095_12156), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i1_fu___float64_addif_12095_30774), .in2(out_reg_1_reg_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12157 (.out1(out_ui_bit_ior_expr_FU_16_16_16_87_i0_fu___float64_addif_12095_12157), .in1(out_ui_bit_and_expr_FU_16_16_16_63_i2_fu___float64_addif_12095_12156), .in2(out_ui_cond_expr_FU_16_16_16_16_95_i2_fu___float64_addif_12095_30776));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12158 (.out1(out_ui_bit_and_expr_FU_16_16_16_63_i3_fu___float64_addif_12095_12158), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i1_fu___float64_addif_12095_30774), .in2(out_reg_3_reg_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12159 (.out1(out_ui_bit_ior_expr_FU_16_16_16_87_i1_fu___float64_addif_12095_12159), .in1(out_ui_bit_and_expr_FU_16_16_16_63_i3_fu___float64_addif_12095_12158), .in2(out_ui_cond_expr_FU_16_16_16_16_95_i3_fu___float64_addif_12095_30778));
  ui_minus_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(12)) fu___float64_addif_12095_12160 (.out1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in1(out_ui_bit_ior_expr_FU_16_16_16_87_i1_fu___float64_addif_12095_12159), .in2(out_ui_bit_ior_expr_FU_16_16_16_87_i0_fu___float64_addif_12095_12157));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12161 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i2_fu___float64_addif_12095_12161), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i1_fu___float64_addif_12095_30780), .in2(out_reg_0_reg_0));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12162 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i0_fu___float64_addif_12095_12162), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i2_fu___float64_addif_12095_12161), .in2(out_ui_cond_expr_FU_64_64_64_64_98_i2_fu___float64_addif_12095_30782));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12163 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i3_fu___float64_addif_12095_12163), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i1_fu___float64_addif_12095_30780), .in2(out_reg_2_reg_2));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12164 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i1_fu___float64_addif_12095_12164), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i3_fu___float64_addif_12095_12163), .in2(out_ui_cond_expr_FU_64_64_64_64_98_i3_fu___float64_addif_12095_30784));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12171 (.out1(out_UUdata_converter_FU_31_i0_fu___float64_addif_12095_12171), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i0_fu___float64_addif_12095_30786));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_addif_12095_12172 (.out1(out_ui_lshift_expr_FU_64_0_64_110_i0_fu___float64_addif_12095_12172), .in1(out_UUdata_converter_FU_31_i0_fu___float64_addif_12095_12171), .in2(out_const_20));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_addif_12095_12173 (.out1(out_ui_bit_ior_expr_FU_0_64_64_79_i0_fu___float64_addif_12095_12173), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i1_fu___float64_addif_12095_12164), .in2(out_ui_lshift_expr_FU_64_0_64_110_i0_fu___float64_addif_12095_12172));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(3), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_12174 (.out1(out_ui_lshift_expr_FU_64_0_64_111_i0_fu___float64_addif_12095_12174), .in1(out_ui_bit_ior_expr_FU_0_64_64_79_i0_fu___float64_addif_12095_12173), .in2(out_const_2));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12175 (.out1(out_UUdata_converter_FU_32_i0_fu___float64_addif_12095_12175), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i1_fu___float64_addif_12095_30788));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_addif_12095_12176 (.out1(out_ui_lshift_expr_FU_64_0_64_110_i1_fu___float64_addif_12095_12176), .in1(out_UUdata_converter_FU_32_i0_fu___float64_addif_12095_12175), .in2(out_const_20));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_addif_12095_12177 (.out1(out_ui_bit_ior_expr_FU_0_64_64_80_i0_fu___float64_addif_12095_12177), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i0_fu___float64_addif_12095_12162), .in2(out_ui_lshift_expr_FU_64_0_64_110_i1_fu___float64_addif_12095_12176));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(3), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_12178 (.out1(out_ui_lshift_expr_FU_64_0_64_111_i1_fu___float64_addif_12095_12178), .in1(out_ui_bit_ior_expr_FU_0_64_64_80_i0_fu___float64_addif_12095_12177), .in2(out_const_2));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12179 (.out1(out_ui_rshift_expr_FU_16_0_16_146_i0_fu___float64_addif_12095_12179), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_15));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12180 (.out1(out_ui_rshift_expr_FU_16_0_16_147_i0_fu___float64_addif_12095_12180), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_21));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12181 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i0_fu___float64_addif_12095_12181), .in1(out_ui_rshift_expr_FU_16_0_16_147_i0_fu___float64_addif_12095_12180), .in2(out_ui_rshift_expr_FU_16_0_16_146_i0_fu___float64_addif_12095_12179));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(5), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12182 (.out1(out_ui_rshift_expr_FU_16_0_16_148_i0_fu___float64_addif_12095_12182), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(5), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12183 (.out1(out_ui_rshift_expr_FU_16_0_16_149_i0_fu___float64_addif_12095_12183), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_7));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12184 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i1_fu___float64_addif_12095_12184), .in1(out_ui_rshift_expr_FU_16_0_16_149_i0_fu___float64_addif_12095_12183), .in2(out_ui_rshift_expr_FU_16_0_16_148_i0_fu___float64_addif_12095_12182));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12185 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i2_fu___float64_addif_12095_12185), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i0_fu___float64_addif_12095_12181), .in2(out_ui_bit_ior_expr_FU_8_8_8_90_i1_fu___float64_addif_12095_12184));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(5), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12186 (.out1(out_ui_rshift_expr_FU_16_0_16_150_i0_fu___float64_addif_12095_12186), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_10));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12187 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in1(out_reg_23_reg_23), .in2(out_reg_24_reg_24));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12188 (.out1(out_ui_rshift_expr_FU_16_0_16_151_i0_fu___float64_addif_12095_12188), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_9));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12189 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i4_fu___float64_addif_12095_12189), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in2(out_reg_25_reg_25));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12190 (.out1(out_ui_bit_and_expr_FU_1_0_1_64_i0_fu___float64_addif_12095_12190), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i4_fu___float64_addif_12095_12189), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12191 (.out1(out_UIdata_converter_FU_19_i0_fu___float64_addif_12095_12191), .in1(out_ui_bit_and_expr_FU_1_0_1_64_i0_fu___float64_addif_12095_12190));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12192 (.out1(out_lshift_expr_FU_64_0_64_51_i1_fu___float64_addif_12095_12192), .in1(out_UIdata_converter_FU_19_i0_fu___float64_addif_12095_12191), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12193 (.out1(out_rshift_expr_FU_64_0_64_56_i1_fu___float64_addif_12095_12193), .in1(out_lshift_expr_FU_64_0_64_51_i1_fu___float64_addif_12095_12192), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12194 (.out1(out_IUdata_converter_FU_20_i0_fu___float64_addif_12095_12194), .in1(out_rshift_expr_FU_64_0_64_56_i1_fu___float64_addif_12095_12193));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12195 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_addif_12095_12195), .in1(out_ui_lshift_expr_FU_64_0_64_111_i1_fu___float64_addif_12095_12178), .in2(out_const_6));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12196 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i4_fu___float64_addif_12095_12196), .in1(out_reg_26_reg_26), .in2(out_IUdata_converter_FU_20_i0_fu___float64_addif_12095_12194));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_addif_12095_12197 (.out1(out_ui_rshift_expr_FU_64_0_64_158_i0_fu___float64_addif_12095_12197), .in1(out_ui_lshift_expr_FU_64_0_64_111_i1_fu___float64_addif_12095_12178), .in2(out_const_6));
  ui_bit_and_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(64), .BITSIZE_out1(23)) fu___float64_addif_12095_12198 (.out1(out_ui_bit_and_expr_FU_32_32_32_68_i0_fu___float64_addif_12095_12198), .in1(out_reg_27_reg_27), .in2(out_IUdata_converter_FU_20_i0_fu___float64_addif_12095_12194));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(56)) fu___float64_addif_12095_12199 (.out1(out_ui_bit_not_expr_FU_64_64_92_i1_fu___float64_addif_12095_12199), .in1(out_IUdata_converter_FU_20_i0_fu___float64_addif_12095_12194));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(56), .BITSIZE_out1(55)) fu___float64_addif_12095_12200 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i5_fu___float64_addif_12095_12200), .in1(out_reg_22_reg_22), .in2(out_ui_bit_not_expr_FU_64_64_92_i1_fu___float64_addif_12095_12199));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_addif_12095_12201 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i2_fu___float64_addif_12095_12201), .in1(out_ui_bit_and_expr_FU_32_32_32_68_i0_fu___float64_addif_12095_12198), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i5_fu___float64_addif_12095_12200));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12202 (.out1(out_ui_rshift_expr_FU_16_0_16_152_i0_fu___float64_addif_12095_12202), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12203 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i5_fu___float64_addif_12095_12203), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in2(out_reg_28_reg_28));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12204 (.out1(out_ui_bit_and_expr_FU_1_0_1_64_i1_fu___float64_addif_12095_12204), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i5_fu___float64_addif_12095_12203), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12205 (.out1(out_UIdata_converter_FU_21_i0_fu___float64_addif_12095_12205), .in1(out_ui_bit_and_expr_FU_1_0_1_64_i1_fu___float64_addif_12095_12204));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12206 (.out1(out_lshift_expr_FU_64_0_64_51_i2_fu___float64_addif_12095_12206), .in1(out_UIdata_converter_FU_21_i0_fu___float64_addif_12095_12205), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12207 (.out1(out_rshift_expr_FU_64_0_64_56_i2_fu___float64_addif_12095_12207), .in1(out_lshift_expr_FU_64_0_64_51_i2_fu___float64_addif_12095_12206), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12208 (.out1(out_IUdata_converter_FU_22_i0_fu___float64_addif_12095_12208), .in1(out_rshift_expr_FU_64_0_64_56_i2_fu___float64_addif_12095_12207));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12209 (.out1(out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_addif_12095_12209), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i2_fu___float64_addif_12095_12201), .in2(out_const_18));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(48), .PRECISION(64)) fu___float64_addif_12095_12210 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i0_fu___float64_addif_12095_12210), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i4_fu___float64_addif_12095_12196), .in2(out_const_5));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(48), .BITSIZE_out1(64)) fu___float64_addif_12095_12211 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i3_fu___float64_addif_12095_12211), .in1(out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_addif_12095_12209), .in2(out_ui_rshift_expr_FU_64_0_64_159_i0_fu___float64_addif_12095_12210));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12212 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i6_fu___float64_addif_12095_12212), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i3_fu___float64_addif_12095_12211), .in2(out_IUdata_converter_FU_22_i0_fu___float64_addif_12095_12208));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12213 (.out1(out_ui_bit_not_expr_FU_64_64_92_i2_fu___float64_addif_12095_12213), .in1(out_IUdata_converter_FU_22_i0_fu___float64_addif_12095_12208));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12214 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i7_fu___float64_addif_12095_12214), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i4_fu___float64_addif_12095_12196), .in2(out_ui_bit_not_expr_FU_64_64_92_i2_fu___float64_addif_12095_12213));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(6), .BITSIZE_out1(39), .PRECISION(64)) fu___float64_addif_12095_12216 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i1_fu___float64_addif_12095_12216), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i2_fu___float64_addif_12095_12201), .in2(out_const_5));
  ui_bit_and_expr_FU #(.BITSIZE_in1(39), .BITSIZE_in2(64), .BITSIZE_out1(39)) fu___float64_addif_12095_12217 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i8_fu___float64_addif_12095_12217), .in1(out_ui_rshift_expr_FU_64_0_64_159_i1_fu___float64_addif_12095_12216), .in2(out_IUdata_converter_FU_22_i0_fu___float64_addif_12095_12208));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_addif_12095_12218 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i9_fu___float64_addif_12095_12218), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i2_fu___float64_addif_12095_12201), .in2(out_ui_bit_not_expr_FU_64_64_92_i2_fu___float64_addif_12095_12213));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(39), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_addif_12095_12219 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i4_fu___float64_addif_12095_12219), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i8_fu___float64_addif_12095_12217), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i9_fu___float64_addif_12095_12218));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12220 (.out1(out_ui_rshift_expr_FU_16_0_16_153_i0_fu___float64_addif_12095_12220), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_14));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12221 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i6_fu___float64_addif_12095_12221), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in2(out_reg_29_reg_29));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12222 (.out1(out_ui_bit_and_expr_FU_1_0_1_64_i2_fu___float64_addif_12095_12222), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i6_fu___float64_addif_12095_12221), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12223 (.out1(out_UIdata_converter_FU_23_i0_fu___float64_addif_12095_12223), .in1(out_ui_bit_and_expr_FU_1_0_1_64_i2_fu___float64_addif_12095_12222));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12224 (.out1(out_lshift_expr_FU_64_0_64_51_i3_fu___float64_addif_12095_12224), .in1(out_UIdata_converter_FU_23_i0_fu___float64_addif_12095_12223), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12225 (.out1(out_rshift_expr_FU_64_0_64_56_i3_fu___float64_addif_12095_12225), .in1(out_lshift_expr_FU_64_0_64_51_i3_fu___float64_addif_12095_12224), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12226 (.out1(out_IUdata_converter_FU_24_i0_fu___float64_addif_12095_12226), .in1(out_rshift_expr_FU_64_0_64_56_i3_fu___float64_addif_12095_12225));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12227 (.out1(out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_addif_12095_12227), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i4_fu___float64_addif_12095_12219), .in2(out_const_23));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(56), .PRECISION(64)) fu___float64_addif_12095_12228 (.out1(out_ui_rshift_expr_FU_64_0_64_160_i0_fu___float64_addif_12095_12228), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i18_ui_bit_ior_expr_FU_64_64_64_89_i18), .in2(out_const_4));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12229 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i5_fu___float64_addif_12095_12229), .in1(out_ui_rshift_expr_FU_64_0_64_160_i0_fu___float64_addif_12095_12228), .in2(out_reg_37_reg_37));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12230 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i10_fu___float64_addif_12095_12230), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i5_fu___float64_addif_12095_12229), .in2(out_reg_36_reg_36));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12231 (.out1(out_ui_bit_not_expr_FU_64_64_92_i3_fu___float64_addif_12095_12231), .in1(out_IUdata_converter_FU_24_i0_fu___float64_addif_12095_12226));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12232 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i11_fu___float64_addif_12095_12232), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i18_ui_bit_ior_expr_FU_64_64_64_89_i18), .in2(out_reg_38_reg_38));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12233 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i6_fu___float64_addif_12095_12233), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i10_fu___float64_addif_12095_12230), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i11_fu___float64_addif_12095_12232));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_12234 (.out1(out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_addif_12095_12234), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i4_fu___float64_addif_12095_12219), .in2(out_const_4));
  ui_bit_and_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(64), .BITSIZE_out1(47)) fu___float64_addif_12095_12235 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i12_fu___float64_addif_12095_12235), .in1(out_reg_39_reg_39), .in2(out_reg_36_reg_36));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_addif_12095_12236 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i13_fu___float64_addif_12095_12236), .in1(out_reg_35_reg_35), .in2(out_reg_38_reg_38));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_addif_12095_12237 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i7_fu___float64_addif_12095_12237), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i12_fu___float64_addif_12095_12235), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i13_fu___float64_addif_12095_12236));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12238 (.out1(out_ui_rshift_expr_FU_16_0_16_154_i0_fu___float64_addif_12095_12238), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_2));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12239 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i7_fu___float64_addif_12095_12239), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in2(out_reg_30_reg_30));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12240 (.out1(out_ui_bit_and_expr_FU_1_0_1_64_i3_fu___float64_addif_12095_12240), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i7_fu___float64_addif_12095_12239), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12241 (.out1(out_UIdata_converter_FU_25_i0_fu___float64_addif_12095_12241), .in1(out_ui_bit_and_expr_FU_1_0_1_64_i3_fu___float64_addif_12095_12240));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12242 (.out1(out_lshift_expr_FU_64_0_64_51_i4_fu___float64_addif_12095_12242), .in1(out_UIdata_converter_FU_25_i0_fu___float64_addif_12095_12241), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12243 (.out1(out_rshift_expr_FU_64_0_64_56_i4_fu___float64_addif_12095_12243), .in1(out_lshift_expr_FU_64_0_64_51_i4_fu___float64_addif_12095_12242), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12244 (.out1(out_IUdata_converter_FU_26_i0_fu___float64_addif_12095_12244), .in1(out_rshift_expr_FU_64_0_64_56_i4_fu___float64_addif_12095_12243));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12245 (.out1(out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_addif_12095_12245), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i7_fu___float64_addif_12095_12237), .in2(out_const_24));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(4), .BITSIZE_out1(60), .PRECISION(64)) fu___float64_addif_12095_12246 (.out1(out_ui_rshift_expr_FU_64_0_64_161_i0_fu___float64_addif_12095_12246), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i6_fu___float64_addif_12095_12233), .in2(out_const_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(60), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12247 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i8_fu___float64_addif_12095_12247), .in1(out_ui_rshift_expr_FU_64_0_64_161_i0_fu___float64_addif_12095_12246), .in2(out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_addif_12095_12245));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12248 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i14_fu___float64_addif_12095_12248), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i8_fu___float64_addif_12095_12247), .in2(out_reg_40_reg_40));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12249 (.out1(out_ui_bit_not_expr_FU_64_64_92_i4_fu___float64_addif_12095_12249), .in1(out_IUdata_converter_FU_26_i0_fu___float64_addif_12095_12244));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12250 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i15_fu___float64_addif_12095_12250), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i6_fu___float64_addif_12095_12233), .in2(out_reg_41_reg_41));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12251 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i9_fu___float64_addif_12095_12251), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i14_fu___float64_addif_12095_12248), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i15_fu___float64_addif_12095_12250));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(51), .PRECISION(64)) fu___float64_addif_12095_12252 (.out1(out_ui_rshift_expr_FU_64_0_64_161_i1_fu___float64_addif_12095_12252), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i7_fu___float64_addif_12095_12237), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(51), .BITSIZE_in2(64), .BITSIZE_out1(51)) fu___float64_addif_12095_12253 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i16_fu___float64_addif_12095_12253), .in1(out_ui_rshift_expr_FU_64_0_64_161_i1_fu___float64_addif_12095_12252), .in2(out_reg_40_reg_40));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_addif_12095_12254 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i17_fu___float64_addif_12095_12254), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i7_fu___float64_addif_12095_12237), .in2(out_reg_41_reg_41));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(51), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_addif_12095_12255 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i10_fu___float64_addif_12095_12255), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i16_fu___float64_addif_12095_12253), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i17_fu___float64_addif_12095_12254));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_addif_12095_12256 (.out1(out_ui_rshift_expr_FU_16_0_16_155_i0_fu___float64_addif_12095_12256), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12257 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i8_fu___float64_addif_12095_12257), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in2(out_reg_31_reg_31));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12258 (.out1(out_ui_bit_and_expr_FU_1_0_1_64_i4_fu___float64_addif_12095_12258), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i8_fu___float64_addif_12095_12257), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12259 (.out1(out_UIdata_converter_FU_27_i0_fu___float64_addif_12095_12259), .in1(out_ui_bit_and_expr_FU_1_0_1_64_i4_fu___float64_addif_12095_12258));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12260 (.out1(out_lshift_expr_FU_64_0_64_51_i5_fu___float64_addif_12095_12260), .in1(out_UIdata_converter_FU_27_i0_fu___float64_addif_12095_12259), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12261 (.out1(out_rshift_expr_FU_64_0_64_56_i5_fu___float64_addif_12095_12261), .in1(out_lshift_expr_FU_64_0_64_51_i5_fu___float64_addif_12095_12260), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12262 (.out1(out_IUdata_converter_FU_28_i0_fu___float64_addif_12095_12262), .in1(out_rshift_expr_FU_64_0_64_56_i5_fu___float64_addif_12095_12261));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12263 (.out1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_addif_12095_12263), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i10_fu___float64_addif_12095_12255), .in2(out_const_26));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(3), .BITSIZE_out1(62), .PRECISION(64)) fu___float64_addif_12095_12264 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i0_fu___float64_addif_12095_12264), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i9_fu___float64_addif_12095_12251), .in2(out_const_2));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(62), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12265 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i11_fu___float64_addif_12095_12265), .in1(out_reg_48_reg_48), .in2(out_reg_47_reg_47));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12266 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i18_fu___float64_addif_12095_12266), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i11_fu___float64_addif_12095_12265), .in2(out_reg_42_reg_42));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12267 (.out1(out_ui_bit_not_expr_FU_64_64_92_i5_fu___float64_addif_12095_12267), .in1(out_IUdata_converter_FU_28_i0_fu___float64_addif_12095_12262));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12268 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i19_fu___float64_addif_12095_12268), .in1(out_reg_46_reg_46), .in2(out_reg_43_reg_43));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12269 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i12_fu___float64_addif_12095_12269), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i18_fu___float64_addif_12095_12266), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i19_fu___float64_addif_12095_12268));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(3), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_addif_12095_12270 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i1_fu___float64_addif_12095_12270), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i10_fu___float64_addif_12095_12255), .in2(out_const_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(64), .BITSIZE_out1(53)) fu___float64_addif_12095_12271 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i20_fu___float64_addif_12095_12271), .in1(out_ui_rshift_expr_FU_64_0_64_162_i1_fu___float64_addif_12095_12270), .in2(out_reg_42_reg_42));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_addif_12095_12272 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i21_fu___float64_addif_12095_12272), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i10_fu___float64_addif_12095_12255), .in2(out_reg_43_reg_43));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_addif_12095_12273 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i13_fu___float64_addif_12095_12273), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i20_fu___float64_addif_12095_12271), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i21_fu___float64_addif_12095_12272));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(12), .BITSIZE_out1(2)) fu___float64_addif_12095_12274 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i9_fu___float64_addif_12095_12274), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i3_fu___float64_addif_12095_12187), .in2(out_reg_19_reg_19));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12275 (.out1(out_ui_bit_and_expr_FU_1_0_1_64_i5_fu___float64_addif_12095_12275), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i9_fu___float64_addif_12095_12274), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12276 (.out1(out_UIdata_converter_FU_29_i0_fu___float64_addif_12095_12276), .in1(out_ui_bit_and_expr_FU_1_0_1_64_i5_fu___float64_addif_12095_12275));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12277 (.out1(out_lshift_expr_FU_64_0_64_51_i6_fu___float64_addif_12095_12277), .in1(out_UIdata_converter_FU_29_i0_fu___float64_addif_12095_12276), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12278 (.out1(out_rshift_expr_FU_64_0_64_56_i6_fu___float64_addif_12095_12278), .in1(out_lshift_expr_FU_64_0_64_51_i6_fu___float64_addif_12095_12277), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12279 (.out1(out_IUdata_converter_FU_30_i0_fu___float64_addif_12095_12279), .in1(out_rshift_expr_FU_64_0_64_56_i6_fu___float64_addif_12095_12278));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12280 (.out1(out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_addif_12095_12280), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i13_fu___float64_addif_12095_12273), .in2(out_const_27));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12281 (.out1(out_ui_rshift_expr_FU_64_0_64_163_i0_fu___float64_addif_12095_12281), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i12_fu___float64_addif_12095_12269), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12282 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i14_fu___float64_addif_12095_12282), .in1(out_ui_rshift_expr_FU_64_0_64_163_i0_fu___float64_addif_12095_12281), .in2(out_reg_49_reg_49));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12283 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i22_fu___float64_addif_12095_12283), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i14_fu___float64_addif_12095_12282), .in2(out_reg_44_reg_44));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12284 (.out1(out_ui_bit_not_expr_FU_64_64_92_i6_fu___float64_addif_12095_12284), .in1(out_IUdata_converter_FU_30_i0_fu___float64_addif_12095_12279));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12285 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i23_fu___float64_addif_12095_12285), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i12_fu___float64_addif_12095_12269), .in2(out_reg_45_reg_45));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12286 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i15_fu___float64_addif_12095_12286), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i22_fu___float64_addif_12095_12283), .in2(out_ui_bit_and_expr_FU_64_64_64_74_i23_fu___float64_addif_12095_12285));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(2), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_addif_12095_12287 (.out1(out_ui_rshift_expr_FU_64_0_64_163_i1_fu___float64_addif_12095_12287), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i13_fu___float64_addif_12095_12273), .in2(out_const_1));
  ui_bit_and_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(64), .BITSIZE_out1(54)) fu___float64_addif_12095_12288 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i24_fu___float64_addif_12095_12288), .in1(out_ui_rshift_expr_FU_64_0_64_163_i1_fu___float64_addif_12095_12287), .in2(out_reg_44_reg_44));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_addif_12095_12289 (.out1(out_ui_bit_and_expr_FU_64_64_64_74_i25_fu___float64_addif_12095_12289), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i13_fu___float64_addif_12095_12273), .in2(out_reg_45_reg_45));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_addif_12095_12290 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i19_fu___float64_addif_12095_12290), .in1(out_reg_50_reg_50), .in2(out_reg_51_reg_51));
  ui_ne_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12291 (.out1(out_ui_ne_expr_FU_64_0_64_144_i0_fu___float64_addif_12095_12291), .in1(out_reg_53_reg_53), .in2(out_const_0));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12293 (.out1(out_UIconvert_expr_FU_16_i0_fu___float64_addif_12095_12293), .in1(out_ui_bit_xor_expr_FU_1_1_1_93_i0_fu___float64_addif_12095_12124));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12294 (.out1(out_lshift_expr_FU_64_0_64_51_i7_fu___float64_addif_12095_12294), .in1(out_UIconvert_expr_FU_16_i0_fu___float64_addif_12095_12293), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_12295 (.out1(out_rshift_expr_FU_64_0_64_56_i7_fu___float64_addif_12095_12295), .in1(out_lshift_expr_FU_64_0_64_51_i7_fu___float64_addif_12095_12294), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(57)) fu___float64_addif_12095_12296 (.out1(out_IUdata_converter_FU_17_i0_fu___float64_addif_12095_12296), .in1(out_rshift_expr_FU_64_0_64_56_i7_fu___float64_addif_12095_12295));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(57), .BITSIZE_out1(57)) fu___float64_addif_12095_12297 (.out1(out_ui_bit_xor_expr_FU_64_64_64_94_i0_fu___float64_addif_12095_12297), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i19_fu___float64_addif_12095_12290), .in2(out_reg_9_reg_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_addif_12095_12298 (.out1(out_ui_bit_and_expr_FU_64_0_64_71_i0_fu___float64_addif_12095_12298), .in1(out_ui_bit_xor_expr_FU_64_64_64_94_i0_fu___float64_addif_12095_12297), .in2(out_const_53));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12299 (.out1(out_truth_not_expr_FU_1_1_58_i0_fu___float64_addif_12095_12299), .in1(out_ui_ne_expr_FU_64_0_64_144_i0_fu___float64_addif_12095_12291));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12300 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i3_fu___float64_addif_12095_12300), .in1(out_truth_not_expr_FU_1_1_58_i0_fu___float64_addif_12095_12299), .in2(out_reg_15_reg_15));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12301 (.out1(out_UUdata_converter_FU_33_i0_fu___float64_addif_12095_12301), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i3_fu___float64_addif_12095_12300));
  ui_ternary_plus_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(56), .BITSIZE_in3(55), .BITSIZE_out1(57)) fu___float64_addif_12095_12303 (.out1(out_ui_ternary_plus_expr_FU_64_64_64_64_191_i0_fu___float64_addif_12095_12303), .in1(out_reg_54_reg_54), .in2(out_reg_52_reg_52), .in3(out_reg_21_reg_21));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_addif_12095_12304 (.out1(out_ui_bit_and_expr_FU_64_0_64_71_i1_fu___float64_addif_12095_12304), .in1(out_reg_56_reg_56), .in2(out_const_53));
  ui_lshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(5), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12305 (.out1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in1(out_ui_bit_and_expr_FU_64_0_64_71_i1_fu___float64_addif_12095_12304), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(32), .PRECISION(64)) fu___float64_addif_12095_12306 (.out1(out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_addif_12095_12306), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_6));
  ui_eq_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12307 (.out1(out_ui_eq_expr_FU_32_0_32_106_i0_fu___float64_addif_12095_12307), .in1(out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_addif_12095_12306), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12309 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_addif_12095_12309), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(17), .PRECISION(64)) fu___float64_addif_12095_12310 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_addif_12095_12310), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_5));
  ui_bit_and_expr_FU #(.BITSIZE_in1(17), .BITSIZE_in2(16), .BITSIZE_out1(16)) fu___float64_addif_12095_12311 (.out1(out_ui_bit_and_expr_FU_16_0_16_61_i0_fu___float64_addif_12095_12311), .in1(out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_addif_12095_12310), .in2(out_const_51));
  ui_bit_and_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_addif_12095_12316 (.out1(out_ui_bit_and_expr_FU_8_0_8_75_i0_fu___float64_addif_12095_12316), .in1(out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_addif_12095_12306), .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(17), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_addif_12095_12321 (.out1(out_ui_bit_and_expr_FU_8_0_8_75_i1_fu___float64_addif_12095_12321), .in1(out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_addif_12095_12310), .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_addif_12095_12326 (.out1(out_ui_bit_and_expr_FU_8_0_8_75_i2_fu___float64_addif_12095_12326), .in1(out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_addif_12095_12450), .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12358 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i0_fu___float64_addif_12095_12358), .in1(out_ui_lshift_expr_FU_8_0_8_137_i2_fu___float64_addif_12095_31248), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(4), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_addif_12095_12359 (.out1(out_ui_rshift_expr_FU_8_0_8_187_i0_fu___float64_addif_12095_12359), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i18_fu___float64_addif_12095_30996), .in2(out_const_3));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_addif_12095_12365 (.out1(out_ui_rshift_expr_FU_8_0_8_188_i0_fu___float64_addif_12095_12365), .in1(out_ui_lshift_expr_FU_8_0_8_137_i3_fu___float64_addif_12095_31269), .in2(out_const_2));
  ui_eq_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12366 (.out1(out_ui_eq_expr_FU_8_0_8_107_i0_fu___float64_addif_12095_12366), .in1(out_ui_rshift_expr_FU_8_0_8_188_i0_fu___float64_addif_12095_12365), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(3), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12368 (.out1(out_ui_lshift_expr_FU_64_0_64_111_i2_fu___float64_addif_12095_12368), .in1(out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_addif_12095_31258), .in2(out_const_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12369 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i0_fu___float64_addif_12095_12369), .in1(out_ui_lshift_expr_FU_8_0_8_137_i3_fu___float64_addif_12095_31269), .in2(out_const_30));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12370 (.out1(out_ui_eq_expr_FU_1_0_1_103_i0_fu___float64_addif_12095_12370), .in1(out_ui_rshift_expr_FU_8_0_8_189_i0_fu___float64_addif_12095_30088), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(2), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12374 (.out1(out_ui_lshift_expr_FU_64_0_64_119_i0_fu___float64_addif_12095_12374), .in1(out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_addif_12095_31279), .in2(out_const_1));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12376 (.out1(out_UUdata_converter_FU_39_i0_fu___float64_addif_12095_12376), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i5_fu___float64_addif_12095_30812));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12377 (.out1(out_UUdata_converter_FU_36_i0_fu___float64_addif_12095_12377), .in1(out_ui_eq_expr_FU_8_0_8_107_i0_fu___float64_addif_12095_12366));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_addif_12095_12378 (.out1(out_ui_lshift_expr_FU_8_0_8_133_i0_fu___float64_addif_12095_12378), .in1(out_UUdata_converter_FU_36_i0_fu___float64_addif_12095_12377), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_addif_12095_12379 (.out1(out_ui_bit_ior_expr_FU_0_8_8_83_i0_fu___float64_addif_12095_12379), .in1(out_UUdata_converter_FU_39_i0_fu___float64_addif_12095_12376), .in2(out_ui_lshift_expr_FU_8_0_8_133_i0_fu___float64_addif_12095_12378));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12380 (.out1(out_UUdata_converter_FU_37_i0_fu___float64_addif_12095_12380), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i23_fu___float64_addif_12095_31032));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_addif_12095_12381 (.out1(out_ui_lshift_expr_FU_8_0_8_134_i0_fu___float64_addif_12095_12381), .in1(out_UUdata_converter_FU_37_i0_fu___float64_addif_12095_12380), .in2(out_const_14));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12382 (.out1(out_UUdata_converter_FU_38_i0_fu___float64_addif_12095_12382), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i22_fu___float64_addif_12095_31030));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(4), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12383 (.out1(out_ui_lshift_expr_FU_8_0_8_135_i0_fu___float64_addif_12095_12383), .in1(out_UUdata_converter_FU_38_i0_fu___float64_addif_12095_12382), .in2(out_const_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(5)) fu___float64_addif_12095_12384 (.out1(out_ui_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_addif_12095_12384), .in1(out_ui_lshift_expr_FU_8_0_8_135_i0_fu___float64_addif_12095_12383), .in2(out_ui_lshift_expr_FU_8_0_8_134_i0_fu___float64_addif_12095_12381));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12385 (.out1(out_UUdata_converter_FU_35_i0_fu___float64_addif_12095_12385), .in1(out_ui_eq_expr_FU_32_0_32_106_i0_fu___float64_addif_12095_12307));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(4), .BITSIZE_out1(6), .PRECISION(64)) fu___float64_addif_12095_12386 (.out1(out_ui_lshift_expr_FU_8_0_8_136_i0_fu___float64_addif_12095_12386), .in1(out_UUdata_converter_FU_35_i0_fu___float64_addif_12095_12385), .in2(out_const_9));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(6), .BITSIZE_out1(6)) fu___float64_addif_12095_12387 (.out1(out_ui_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_addif_12095_12387), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i23_fu___float64_addif_12095_31036), .in2(out_reg_64_reg_64));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(5), .BITSIZE_out1(6)) fu___float64_addif_12095_12388 (.out1(out_ui_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_addif_12095_12388), .in1(out_ui_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_addif_12095_12387), .in2(out_ui_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_addif_12095_12384));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(2), .BITSIZE_out1(6)) fu___float64_addif_12095_12389 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i10_fu___float64_addif_12095_12389), .in1(out_ui_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_addif_12095_12388), .in2(out_ui_bit_ior_expr_FU_0_8_8_83_i0_fu___float64_addif_12095_12379));
  UUconvert_expr_FU #(.BITSIZE_in1(6), .BITSIZE_out1(6)) fu___float64_addif_12095_12390 (.out1(out_UUconvert_expr_FU_40_i0_fu___float64_addif_12095_12390), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i10_fu___float64_addif_12095_12389));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_12391 (.out1(out_ui_rshift_expr_FU_64_0_64_160_i2_fu___float64_addif_12095_12391), .in1(out_ui_lshift_expr_FU_64_0_64_124_i5_fu___float64_addif_12095_31289), .in2(out_const_4));
  ui_eq_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(6), .BITSIZE_out1(1)) fu___float64_addif_12095_12392 (.out1(out_ui_eq_expr_FU_8_0_8_108_i0_fu___float64_addif_12095_12392), .in1(out_reg_84_reg_84), .in2(out_const_47));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_addif_12095_12394 (.out1(out_ui_bit_and_expr_FU_64_0_64_72_i0_fu___float64_addif_12095_12394), .in1(out_reg_56_reg_56), .in2(out_const_35));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12395 (.out1(out_ui_eq_expr_FU_1_0_1_104_i0_fu___float64_addif_12095_12395), .in1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_addif_12095_30094), .in2(out_const_0));
  ui_lt_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(6), .BITSIZE_out1(1)) fu___float64_addif_12095_12397 (.out1(out_ui_lt_expr_FU_16_16_16_138_i0_fu___float64_addif_12095_12397), .in1(out_reg_18_reg_18), .in2(out_reg_84_reg_84));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12398 (.out1(out_ui_bit_ior_expr_FU_1_1_1_88_i0_fu___float64_addif_12095_12398), .in1(out_ui_lt_expr_FU_16_16_16_138_i0_fu___float64_addif_12095_12397), .in2(out_ui_eq_expr_FU_8_0_8_108_i0_fu___float64_addif_12095_12392));
  ui_minus_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(6), .BITSIZE_out1(16)) fu___float64_addif_12095_12400 (.out1(out_ui_minus_expr_FU_16_16_16_141_i1_fu___float64_addif_12095_12400), .in1(out_reg_18_reg_18), .in2(out_reg_84_reg_84));
  UIdata_converter_FU #(.BITSIZE_in1(16), .BITSIZE_out1(12)) fu___float64_addif_12095_12401 (.out1(out_UIdata_converter_FU_41_i0_fu___float64_addif_12095_12401), .in1(out_ui_minus_expr_FU_16_16_16_141_i1_fu___float64_addif_12095_12400));
  plus_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(2), .BITSIZE_out1(13)) fu___float64_addif_12095_12402 (.out1(out_plus_expr_FU_16_0_16_54_i0_fu___float64_addif_12095_12402), .in1(out_UIdata_converter_FU_41_i0_fu___float64_addif_12095_12401), .in2(out_const_1));
  IUdata_converter_FU #(.BITSIZE_in1(13), .BITSIZE_out1(12)) fu___float64_addif_12095_12403 (.out1(out_IUdata_converter_FU_42_i0_fu___float64_addif_12095_12403), .in1(out_plus_expr_FU_16_0_16_54_i0_fu___float64_addif_12095_12402));
  UUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12404 (.out1(out_UUdata_converter_FU_43_i0_fu___float64_addif_12095_12404), .in1(out_IUdata_converter_FU_42_i0_fu___float64_addif_12095_12403));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_12405 (.out1(out_ui_lshift_expr_FU_64_0_64_110_i2_fu___float64_addif_12095_12405), .in1(out_UUdata_converter_FU_43_i0_fu___float64_addif_12095_12404), .in2(out_const_20));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(3), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_addif_12095_12407 (.out1(out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_addif_12095_12407), .in1(out_ui_rshift_expr_FU_64_0_64_160_i2_fu___float64_addif_12095_12391), .in2(out_const_14));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_addif_12095_12408 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_addif_12095_12408), .in1(out_ui_rshift_expr_FU_64_0_64_160_i2_fu___float64_addif_12095_12391), .in2(out_const_2));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_addif_12095_12409 (.out1(out_ui_rshift_expr_FU_64_0_64_163_i2_fu___float64_addif_12095_12409), .in1(out_ui_rshift_expr_FU_64_0_64_160_i2_fu___float64_addif_12095_12391), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(52), .BITSIZE_out1(2)) fu___float64_addif_12095_12410 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i11_fu___float64_addif_12095_12410), .in1(out_reg_86_reg_86), .in2(out_reg_85_reg_85));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12411 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i0_fu___float64_addif_12095_12411), .in1(out_ui_rshift_expr_FU_64_0_64_160_i2_fu___float64_addif_12095_12391), .in2(out_const_29));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12412 (.out1(out_UUdata_converter_FU_34_i0_fu___float64_addif_12095_12412), .in1(out_ui_ne_expr_FU_64_0_64_144_i0_fu___float64_addif_12095_12291));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12413 (.out1(out_ui_bit_ior_expr_FU_1_1_1_88_i1_fu___float64_addif_12095_12413), .in1(out_reg_87_reg_87), .in2(out_reg_55_reg_55));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(2)) fu___float64_addif_12095_12414 (.out1(out_ui_bit_ior_expr_FU_8_8_8_90_i12_fu___float64_addif_12095_12414), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i11_fu___float64_addif_12095_12410), .in2(out_ui_bit_ior_expr_FU_1_1_1_88_i1_fu___float64_addif_12095_12413));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12415 (.out1(out_ui_bit_and_expr_FU_1_0_1_66_i0_fu___float64_addif_12095_12415), .in1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_addif_12095_12408), .in2(out_const_29));
  ui_bit_and_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12416 (.out1(out_ui_bit_and_expr_FU_64_0_64_73_i0_fu___float64_addif_12095_12416), .in1(out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_addif_12095_12407), .in2(out_const_52));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(64)) fu___float64_addif_12095_12417 (.out1(out_ui_bit_ior_expr_FU_0_64_64_81_i0_fu___float64_addif_12095_12417), .in1(out_ui_lshift_expr_FU_64_0_64_131_i0_fu___float64_addif_12095_31305), .in2(out_reg_89_reg_89));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_addif_12095_12418 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i4_fu___float64_addif_12095_12418), .in1(out_reg_88_reg_88), .in2(out_ui_bit_ior_expr_FU_8_8_8_90_i12_fu___float64_addif_12095_12414));
  ui_plus_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(64)) fu___float64_addif_12095_12419 (.out1(out_ui_plus_expr_FU_64_64_64_145_i0_fu___float64_addif_12095_12419), .in1(out_reg_90_reg_90), .in2(out_reg_91_reg_91));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12420 (.out1(out_truth_not_expr_FU_1_1_58_i1_fu___float64_addif_12095_12420), .in1(out_ui_eq_expr_FU_16_0_16_100_i1_fu___float64_addif_12095_12120));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_addif_12095_12422 (.out1(out_ui_rshift_expr_FU_64_0_64_157_i2_fu___float64_addif_12095_12422), .in1(out_ui_plus_expr_FU_64_64_64_145_i0_fu___float64_addif_12095_12419), .in2(out_const_20));
  UUconvert_expr_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_addif_12095_12423 (.out1(out_UUconvert_expr_FU_44_i0_fu___float64_addif_12095_12423), .in1(out_ui_rshift_expr_FU_64_0_64_157_i2_fu___float64_addif_12095_12422));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12424 (.out1(out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_addif_12095_12424), .in1(out_UUconvert_expr_FU_44_i0_fu___float64_addif_12095_12423), .in2(out_const_50));
  UUdata_converter_FU #(.BITSIZE_in1(11), .BITSIZE_out1(11)) fu___float64_addif_12095_12425 (.out1(out_UUdata_converter_FU_45_i0_fu___float64_addif_12095_12425), .in1(out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_addif_12095_12424));
  ui_lshift_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(7), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12426 (.out1(out_ui_lshift_expr_FU_64_0_64_110_i3_fu___float64_addif_12095_12426), .in1(out_UUdata_converter_FU_45_i0_fu___float64_addif_12095_12425), .in2(out_const_20));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12428 (.out1(out_truth_not_expr_FU_1_1_58_i2_fu___float64_addif_12095_12428), .in1(out_ui_eq_expr_FU_16_0_16_100_i0_fu___float64_addif_12095_12116));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_addif_12095_12431 (.out1(out_ui_bit_and_expr_FU_64_0_64_73_i1_fu___float64_addif_12095_12431), .in1(out_ui_plus_expr_FU_64_64_64_145_i0_fu___float64_addif_12095_12419), .in2(out_const_52));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12434 (.out1(out_truth_not_expr_FU_1_1_58_i3_fu___float64_addif_12095_12434), .in1(out_truth_xor_expr_FU_1_1_1_60_i0_fu___float64_addif_12095_30065));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12438 (.out1(out_ui_bit_ior_expr_FU_1_1_1_88_i2_fu___float64_addif_12095_12438), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i0_fu___float64_addif_12095_12118), .in2(out_ui_bit_and_expr_FU_1_1_1_67_i1_fu___float64_addif_12095_12122));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12440 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i5_fu___float64_addif_12095_12440), .in1(out_ui_eq_expr_FU_16_0_16_100_i1_fu___float64_addif_12095_12120), .in2(out_truth_xor_expr_FU_1_1_1_60_i0_fu___float64_addif_12095_30065));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12441 (.out1(out_ui_bit_and_expr_FU_1_1_1_67_i6_fu___float64_addif_12095_12441), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i5_fu___float64_addif_12095_12440), .in2(out_ui_eq_expr_FU_16_0_16_100_i0_fu___float64_addif_12095_12116));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12442 (.out1(out_UUdata_converter_FU_18_i0_fu___float64_addif_12095_12442), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i6_fu___float64_addif_12095_12441));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_addif_12095_12443 (.out1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_addif_12095_12443), .in1(out_UUdata_converter_FU_18_i0_fu___float64_addif_12095_12442), .in2(out_const_19));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(64)) fu___float64_addif_12095_12444 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i16_fu___float64_addif_12095_12444), .in1(out_reg_92_reg_92), .in2(out_reg_13_reg_13));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_addif_12095_12446 (.out1(out_ui_bit_ior_expr_FU_0_64_64_82_i0_fu___float64_addif_12095_12446), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i10_fu___float64_addif_12095_30889), .in2(out_ui_lshift_expr_FU_64_0_64_131_i1_fu___float64_addif_12095_31337));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12447 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i17_fu___float64_addif_12095_12447), .in1(out_reg_97_reg_97), .in2(out_reg_96_reg_96));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_addif_12095_12448 (.out1(out_ui_view_convert_expr_FU_46_i0_fu___float64_addif_12095_12448), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i17_fu___float64_addif_12095_12447));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(16), .PRECISION(64)) fu___float64_addif_12095_12450 (.out1(out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_addif_12095_12450), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_18));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12452 (.out1(out_ui_bit_and_expr_FU_8_0_8_78_i0_fu___float64_addif_12095_12452), .in1(out_ui_lshift_expr_FU_8_0_8_137_i3_fu___float64_addif_12095_31269), .in2(out_const_32));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_12453 (.out1(out_ui_eq_expr_FU_1_0_1_103_i1_fu___float64_addif_12095_12453), .in1(out_ui_rshift_expr_FU_8_0_8_190_i0_fu___float64_addif_12095_30101), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12454 (.out1(out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_addif_12095_12454), .in1(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_addif_12095_12309), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(9), .PRECISION(64)) fu___float64_addif_12095_12455 (.out1(out_ui_rshift_expr_FU_64_0_64_160_i3_fu___float64_addif_12095_12455), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_4));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_addif_12095_12456 (.out1(out_ui_bit_and_expr_FU_8_0_8_75_i3_fu___float64_addif_12095_12456), .in1(out_ui_rshift_expr_FU_64_0_64_160_i3_fu___float64_addif_12095_12455), .in2(out_const_48));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12458 (.out1(out_ui_lshift_expr_FU_64_0_64_121_i1_fu___float64_addif_12095_12458), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(9), .PRECISION(64)) fu___float64_addif_12095_12459 (.out1(out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_addif_12095_12459), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_addif_12095_12460 (.out1(out_ui_bit_and_expr_FU_8_0_8_75_i4_fu___float64_addif_12095_12460), .in1(out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_addif_12095_12459), .in2(out_const_48));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12462 (.out1(out_ui_lshift_expr_FU_64_0_64_118_i1_fu___float64_addif_12095_12462), .in1(out_ui_lshift_expr_FU_64_0_64_121_i1_fu___float64_addif_12095_12458), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12463 (.out1(out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_addif_12095_12463), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_8));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12464 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i1_fu___float64_addif_12095_12464), .in1(out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_addif_12095_12463), .in2(out_const_46));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12466 (.out1(out_ui_lshift_expr_FU_64_0_64_118_i2_fu___float64_addif_12095_12466), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12467 (.out1(out_ui_rshift_expr_FU_64_0_64_157_i3_fu___float64_addif_12095_12467), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_20));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12468 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i2_fu___float64_addif_12095_12468), .in1(out_ui_rshift_expr_FU_64_0_64_157_i3_fu___float64_addif_12095_12467), .in2(out_const_46));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12470 (.out1(out_ui_lshift_expr_FU_64_0_64_118_i3_fu___float64_addif_12095_12470), .in1(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_addif_12095_12309), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12471 (.out1(out_ui_rshift_expr_FU_64_0_64_168_i0_fu___float64_addif_12095_12471), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_11));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12472 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_addif_12095_12472), .in1(out_ui_rshift_expr_FU_64_0_64_168_i0_fu___float64_addif_12095_12471), .in2(out_const_46));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12474 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i0_fu___float64_addif_12095_12474), .in1(out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_addif_12095_12454), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12475 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i1_fu___float64_addif_12095_12475), .in1(out_ui_lshift_expr_FU_64_0_64_121_i1_fu___float64_addif_12095_12458), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12476 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i2_fu___float64_addif_12095_12476), .in1(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_addif_12095_12309), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12477 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i3_fu___float64_addif_12095_12477), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12478 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i4_fu___float64_addif_12095_12478), .in1(out_ui_lshift_expr_FU_64_0_64_118_i1_fu___float64_addif_12095_12462), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12479 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i5_fu___float64_addif_12095_12479), .in1(out_ui_lshift_expr_FU_64_0_64_118_i3_fu___float64_addif_12095_12470), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_12480 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i6_fu___float64_addif_12095_12480), .in1(out_ui_lshift_expr_FU_64_0_64_118_i2_fu___float64_addif_12095_12466), .in2(out_const_3));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(9), .PRECISION(64)) fu___float64_addif_12095_12481 (.out1(out_ui_rshift_expr_FU_64_0_64_169_i0_fu___float64_addif_12095_12481), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_17));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_addif_12095_12482 (.out1(out_ui_bit_and_expr_FU_8_0_8_75_i5_fu___float64_addif_12095_12482), .in1(out_ui_rshift_expr_FU_64_0_64_169_i0_fu___float64_addif_12095_12481), .in2(out_const_48));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(8), .PRECISION(64)) fu___float64_addif_12095_12484 (.out1(out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_addif_12095_12484), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_23));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12486 (.out1(out_ui_rshift_expr_FU_64_0_64_171_i0_fu___float64_addif_12095_12486), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_16));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12487 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_addif_12095_12487), .in1(out_ui_rshift_expr_FU_64_0_64_171_i0_fu___float64_addif_12095_12486), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12489 (.out1(out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_addif_12095_12489), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12490 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_addif_12095_12490), .in1(out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_addif_12095_12489), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_addif_12095_12492 (.out1(out_ui_rshift_expr_FU_64_0_64_173_i0_fu___float64_addif_12095_12492), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_22));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_addif_12095_12493 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i6_fu___float64_addif_12095_12493), .in1(out_ui_rshift_expr_FU_64_0_64_173_i0_fu___float64_addif_12095_12492), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_addif_12095_12495 (.out1(out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_addif_12095_12495), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_24));
  ne_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29746 (.out1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_addif_12095_29746), .in1(out_cond_expr_FU_8_8_8_8_49_i0_fu___float64_addif_12095_30772), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29750 (.out1(out_ui_eq_expr_FU_16_0_16_101_i0_fu___float64_addif_12095_29750), .in1(out_ui_bit_and_expr_FU_16_0_16_61_i0_fu___float64_addif_12095_12311), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_addif_12095_29758 (.out1(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_addif_12095_29758), .in1(out_ui_bit_ior_expr_FU_16_16_16_87_i1_fu___float64_addif_12095_12159), .in2(out_const_49));
  ui_lt_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29762 (.out1(out_ui_lt_expr_FU_1_1_1_139_i0_fu___float64_addif_12095_29762), .in1(out_ui_eq_expr_FU_16_0_16_100_i0_fu___float64_addif_12095_12116), .in2(out_truth_not_expr_FU_1_1_58_i1_fu___float64_addif_12095_12420));
  ui_lt_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29764 (.out1(out_ui_lt_expr_FU_1_1_1_139_i1_fu___float64_addif_12095_29764), .in1(out_ui_bit_ior_expr_FU_1_1_1_88_i0_fu___float64_addif_12095_12398), .in2(out_reg_10_reg_10));
  ui_lt_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29766 (.out1(out_ui_lt_expr_FU_1_1_1_139_i2_fu___float64_addif_12095_29766), .in1(out_reg_5_reg_5), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i3_fu___float64_addif_12095_30794));
  ui_le_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29770 (.out1(out_ui_le_expr_FU_1_1_1_109_i0_fu___float64_addif_12095_29770), .in1(out_ui_bit_ior_expr_FU_1_1_1_88_i0_fu___float64_addif_12095_12398), .in2(out_reg_11_reg_11));
  ui_eq_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29774 (.out1(out_ui_eq_expr_FU_16_0_16_101_i1_fu___float64_addif_12095_29774), .in1(out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_addif_12095_12450), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29776 (.out1(out_ui_eq_expr_FU_8_0_8_107_i1_fu___float64_addif_12095_29776), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i3_fu___float64_addif_12095_12456), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29778 (.out1(out_ui_eq_expr_FU_8_0_8_107_i2_fu___float64_addif_12095_29778), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i4_fu___float64_addif_12095_12460), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29780 (.out1(out_ui_eq_expr_FU_8_0_8_107_i3_fu___float64_addif_12095_29780), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i1_fu___float64_addif_12095_12464), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29782 (.out1(out_ui_eq_expr_FU_8_0_8_107_i4_fu___float64_addif_12095_29782), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i2_fu___float64_addif_12095_12468), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29784 (.out1(out_ui_eq_expr_FU_8_0_8_107_i5_fu___float64_addif_12095_29784), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_addif_12095_12472), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29786 (.out1(out_ui_eq_expr_FU_8_0_8_107_i6_fu___float64_addif_12095_29786), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i5_fu___float64_addif_12095_12482), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29788 (.out1(out_ui_eq_expr_FU_8_0_8_107_i7_fu___float64_addif_12095_29788), .in1(out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_addif_12095_12484), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29790 (.out1(out_ui_eq_expr_FU_8_0_8_107_i8_fu___float64_addif_12095_29790), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_addif_12095_12487), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29792 (.out1(out_ui_eq_expr_FU_8_0_8_107_i9_fu___float64_addif_12095_29792), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_addif_12095_12490), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29794 (.out1(out_ui_eq_expr_FU_8_0_8_107_i10_fu___float64_addif_12095_29794), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i6_fu___float64_addif_12095_12493), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_29796 (.out1(out_ui_eq_expr_FU_8_0_8_107_i11_fu___float64_addif_12095_29796), .in1(out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_addif_12095_12495), .in2(out_const_0));
  truth_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30065 (.out1(out_truth_xor_expr_FU_1_1_1_60_i0_fu___float64_addif_12095_30065), .in1(out_ui_extract_bit_expr_FU_8_i0_fu___float64_addif_12095_30120), .in2(out_ui_extract_bit_expr_FU_9_i0_fu___float64_addif_12095_30124));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(61), .PRECISION(64)) fu___float64_addif_12095_30079 (.out1(out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_addif_12095_30079), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i15_fu___float64_addif_12095_12286), .in2(out_const_39));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_30088 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i0_fu___float64_addif_12095_30088), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i0_fu___float64_addif_12095_12369), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_30094 (.out1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_addif_12095_30094), .in1(out_ui_bit_and_expr_FU_64_0_64_72_i0_fu___float64_addif_12095_12394), .in2(out_const_44));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_30101 (.out1(out_ui_rshift_expr_FU_8_0_8_190_i0_fu___float64_addif_12095_30101), .in1(out_ui_bit_and_expr_FU_8_0_8_78_i0_fu___float64_addif_12095_12452), .in2(out_const_39));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_addif_12095_30120 (.out1(out_ui_extract_bit_expr_FU_8_i0_fu___float64_addif_12095_30120), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_addif_12095_12102), .in2(out_const_47));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_addif_12095_30124 (.out1(out_ui_extract_bit_expr_FU_9_i0_fu___float64_addif_12095_30124), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_addif_12095_12103), .in2(out_const_47));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(1), .BITSIZE_out1(64)) fu___float64_addif_12095_30632 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i0_fu___float64_addif_12095_30632), .in1(out_ui_le_expr_FU_1_1_1_109_i0_fu___float64_addif_12095_29770), .in2(out_const_36), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(13), .BITSIZE_in3(1), .BITSIZE_out1(13)) fu___float64_addif_12095_30635 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i0_fu___float64_addif_12095_30635), .in1(out_ui_le_expr_FU_1_1_1_109_i0_fu___float64_addif_12095_29770), .in2(out_const_37), .in3(out_const_29));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30641 (.out1(out_truth_not_expr_FU_1_1_58_i4_fu___float64_addif_12095_30641), .in1(out_ui_eq_expr_FU_32_0_32_106_i0_fu___float64_addif_12095_12307));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30644 (.out1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_addif_12095_30644), .in1(out_ui_eq_expr_FU_16_0_16_101_i1_fu___float64_addif_12095_29774), .in2(out_truth_not_expr_FU_1_1_58_i4_fu___float64_addif_12095_30641));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30648 (.out1(out_truth_not_expr_FU_1_1_58_i5_fu___float64_addif_12095_30648), .in1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_addif_12095_30644));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30651 (.out1(out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_addif_12095_30651), .in1(out_truth_not_expr_FU_1_1_58_i4_fu___float64_addif_12095_30641), .in2(out_truth_not_expr_FU_1_1_58_i5_fu___float64_addif_12095_30648));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30654 (.out1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_addif_12095_30654), .in1(out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_addif_12095_30651), .in2(out_ui_eq_expr_FU_8_0_8_107_i7_fu___float64_addif_12095_29788));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30658 (.out1(out_truth_not_expr_FU_1_1_58_i6_fu___float64_addif_12095_30658), .in1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_addif_12095_30654));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30661 (.out1(out_truth_and_expr_FU_1_1_1_57_i3_fu___float64_addif_12095_30661), .in1(out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_addif_12095_30651), .in2(out_truth_not_expr_FU_1_1_58_i6_fu___float64_addif_12095_30658));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30664 (.out1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_addif_12095_30664), .in1(out_truth_and_expr_FU_1_1_1_57_i3_fu___float64_addif_12095_30661), .in2(out_ui_eq_expr_FU_8_0_8_107_i11_fu___float64_addif_12095_29796));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30668 (.out1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_addif_12095_30668), .in1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_addif_12095_30654), .in2(out_ui_eq_expr_FU_8_0_8_107_i4_fu___float64_addif_12095_29782));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30671 (.out1(out_truth_not_expr_FU_1_1_58_i7_fu___float64_addif_12095_30671), .in1(out_ui_eq_expr_FU_8_0_8_107_i4_fu___float64_addif_12095_29782));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30674 (.out1(out_truth_and_expr_FU_1_1_1_57_i6_fu___float64_addif_12095_30674), .in1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_addif_12095_30654), .in2(out_truth_not_expr_FU_1_1_58_i7_fu___float64_addif_12095_30671));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30678 (.out1(out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_addif_12095_30678), .in1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_addif_12095_30644), .in2(out_ui_eq_expr_FU_8_0_8_107_i2_fu___float64_addif_12095_29778));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30681 (.out1(out_truth_not_expr_FU_1_1_58_i8_fu___float64_addif_12095_30681), .in1(out_ui_eq_expr_FU_8_0_8_107_i2_fu___float64_addif_12095_29778));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30684 (.out1(out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_addif_12095_30684), .in1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_addif_12095_30644), .in2(out_truth_not_expr_FU_1_1_58_i8_fu___float64_addif_12095_30681));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30688 (.out1(out_truth_and_expr_FU_1_1_1_57_i9_fu___float64_addif_12095_30688), .in1(out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_addif_12095_30684), .in2(out_ui_eq_expr_FU_8_0_8_107_i9_fu___float64_addif_12095_29792));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30691 (.out1(out_truth_not_expr_FU_1_1_58_i9_fu___float64_addif_12095_30691), .in1(out_ui_eq_expr_FU_8_0_8_107_i9_fu___float64_addif_12095_29792));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30694 (.out1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_addif_12095_30694), .in1(out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_addif_12095_30684), .in2(out_truth_not_expr_FU_1_1_58_i9_fu___float64_addif_12095_30691));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30698 (.out1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_addif_12095_30698), .in1(out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_addif_12095_30678), .in2(out_ui_eq_expr_FU_8_0_8_107_i3_fu___float64_addif_12095_29780));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30701 (.out1(out_truth_not_expr_FU_1_1_58_i10_fu___float64_addif_12095_30701), .in1(out_ui_eq_expr_FU_8_0_8_107_i3_fu___float64_addif_12095_29780));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30704 (.out1(out_truth_and_expr_FU_1_1_1_57_i12_fu___float64_addif_12095_30704), .in1(out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_addif_12095_30678), .in2(out_truth_not_expr_FU_1_1_58_i10_fu___float64_addif_12095_30701));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30708 (.out1(out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_addif_12095_30708), .in1(out_ui_eq_expr_FU_32_0_32_106_i0_fu___float64_addif_12095_12307), .in2(out_ui_eq_expr_FU_16_0_16_101_i0_fu___float64_addif_12095_29750));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30711 (.out1(out_truth_not_expr_FU_1_1_58_i11_fu___float64_addif_12095_30711), .in1(out_ui_eq_expr_FU_16_0_16_101_i0_fu___float64_addif_12095_29750));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30714 (.out1(out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_addif_12095_30714), .in1(out_ui_eq_expr_FU_32_0_32_106_i0_fu___float64_addif_12095_12307), .in2(out_truth_not_expr_FU_1_1_58_i11_fu___float64_addif_12095_30711));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30718 (.out1(out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_addif_12095_30718), .in1(out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_addif_12095_30714), .in2(out_ui_eq_expr_FU_8_0_8_107_i6_fu___float64_addif_12095_29786));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30721 (.out1(out_truth_not_expr_FU_1_1_58_i12_fu___float64_addif_12095_30721), .in1(out_ui_eq_expr_FU_8_0_8_107_i6_fu___float64_addif_12095_29786));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30724 (.out1(out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_addif_12095_30724), .in1(out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_addif_12095_30714), .in2(out_truth_not_expr_FU_1_1_58_i12_fu___float64_addif_12095_30721));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30728 (.out1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_addif_12095_30728), .in1(out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_addif_12095_30724), .in2(out_ui_eq_expr_FU_8_0_8_107_i10_fu___float64_addif_12095_29794));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30731 (.out1(out_truth_not_expr_FU_1_1_58_i13_fu___float64_addif_12095_30731), .in1(out_ui_eq_expr_FU_8_0_8_107_i10_fu___float64_addif_12095_29794));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30734 (.out1(out_truth_and_expr_FU_1_1_1_57_i18_fu___float64_addif_12095_30734), .in1(out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_addif_12095_30724), .in2(out_truth_not_expr_FU_1_1_58_i13_fu___float64_addif_12095_30731));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30738 (.out1(out_truth_and_expr_FU_1_1_1_57_i19_fu___float64_addif_12095_30738), .in1(out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_addif_12095_30718), .in2(out_ui_eq_expr_FU_8_0_8_107_i5_fu___float64_addif_12095_29784));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30741 (.out1(out_truth_not_expr_FU_1_1_58_i14_fu___float64_addif_12095_30741), .in1(out_ui_eq_expr_FU_8_0_8_107_i5_fu___float64_addif_12095_29784));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30744 (.out1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_addif_12095_30744), .in1(out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_addif_12095_30718), .in2(out_truth_not_expr_FU_1_1_58_i14_fu___float64_addif_12095_30741));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30748 (.out1(out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_addif_12095_30748), .in1(out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_addif_12095_30708), .in2(out_ui_eq_expr_FU_8_0_8_107_i1_fu___float64_addif_12095_29776));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30751 (.out1(out_truth_not_expr_FU_1_1_58_i15_fu___float64_addif_12095_30751), .in1(out_ui_eq_expr_FU_8_0_8_107_i1_fu___float64_addif_12095_29776));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30754 (.out1(out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_addif_12095_30754), .in1(out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_addif_12095_30708), .in2(out_truth_not_expr_FU_1_1_58_i15_fu___float64_addif_12095_30751));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30758 (.out1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_addif_12095_30758), .in1(out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_addif_12095_30754), .in2(out_ui_eq_expr_FU_8_0_8_107_i8_fu___float64_addif_12095_29790));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30761 (.out1(out_truth_not_expr_FU_1_1_58_i16_fu___float64_addif_12095_30761), .in1(out_ui_eq_expr_FU_8_0_8_107_i8_fu___float64_addif_12095_29790));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30764 (.out1(out_truth_and_expr_FU_1_1_1_57_i24_fu___float64_addif_12095_30764), .in1(out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_addif_12095_30754), .in2(out_truth_not_expr_FU_1_1_58_i16_fu___float64_addif_12095_30761));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30768 (.out1(out_truth_not_expr_FU_1_1_58_i17_fu___float64_addif_12095_30768), .in1(out_ui_lt_expr_FU_1_1_1_139_i1_fu___float64_addif_12095_29764));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30771 (.out1(out_truth_and_expr_FU_1_1_1_57_i25_fu___float64_addif_12095_30771), .in1(out_ui_lt_expr_FU_1_1_1_139_i1_fu___float64_addif_12095_29764), .in2(out_reg_65_reg_65));
  cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_in3(2), .BITSIZE_out1(2)) fu___float64_addif_12095_30772 (.out1(out_cond_expr_FU_8_8_8_8_49_i0_fu___float64_addif_12095_30772), .in1(out_reg_7_reg_7), .in2(out_const_1), .in3(out_UIconvert_expr_FU_12_i0_fu___float64_addif_12095_12135));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(16), .BITSIZE_in3(12), .BITSIZE_out1(12)) fu___float64_addif_12095_30774 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i1_fu___float64_addif_12095_30774), .in1(out_reg_7_reg_7), .in2(out_const_51), .in3(out_IUconvert_expr_FU_13_i0_fu___float64_addif_12095_12138));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(11), .BITSIZE_out1(11)) fu___float64_addif_12095_30776 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i2_fu___float64_addif_12095_30776), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_16_16_16_63_i0_fu___float64_addif_12095_12140));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(11), .BITSIZE_out1(11)) fu___float64_addif_12095_30778 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i3_fu___float64_addif_12095_30778), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_16_16_16_63_i1_fu___float64_addif_12095_12141));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(53), .BITSIZE_out1(53)) fu___float64_addif_12095_30780 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i1_fu___float64_addif_12095_30780), .in1(out_reg_7_reg_7), .in2(out_const_55), .in3(out_IUdata_converter_FU_15_i0_fu___float64_addif_12095_12145));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_addif_12095_30782 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i2_fu___float64_addif_12095_30782), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_64_64_64_74_i0_fu___float64_addif_12095_12147));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_addif_12095_30784 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i3_fu___float64_addif_12095_30784), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_64_64_64_74_i1_fu___float64_addif_12095_12148));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30786 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i0_fu___float64_addif_12095_30786), .in1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_addif_12095_29746), .in2(out_reg_6_reg_6), .in3(out_reg_4_reg_4));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30788 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i1_fu___float64_addif_12095_30788), .in1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_addif_12095_29746), .in2(out_reg_4_reg_4), .in3(out_reg_6_reg_6));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30790 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i2_fu___float64_addif_12095_30790), .in1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_addif_12095_29746), .in2(out_reg_17_reg_17), .in3(out_reg_16_reg_16));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_addif_12095_30792 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i4_fu___float64_addif_12095_30792), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i5_fu___float64_addif_12095_30812), .in2(out_ui_rshift_expr_FU_64_0_64_178_i8_fu___float64_addif_12095_31282), .in3(out_ui_rshift_expr_FU_64_0_64_178_i9_fu___float64_addif_12095_31285));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30794 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i3_fu___float64_addif_12095_30794), .in1(out_reg_32_reg_32), .in2(out_ui_eq_expr_FU_1_0_1_104_i0_fu___float64_addif_12095_12395), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(12), .BITSIZE_out1(12)) fu___float64_addif_12095_30796 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i4_fu___float64_addif_12095_30796), .in1(out_ui_bit_ior_expr_FU_1_1_1_88_i0_fu___float64_addif_12095_12398), .in2(out_const_0), .in3(out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_addif_12095_31300));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(11), .BITSIZE_in3(11), .BITSIZE_out1(11)) fu___float64_addif_12095_30798 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i5_fu___float64_addif_12095_30798), .in1(out_reg_14_reg_14), .in2(out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_addif_12095_31332), .in3(out_const_50));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30802 (.out1(out_truth_or_expr_FU_1_1_1_59_i0_fu___float64_addif_12095_30802), .in1(out_truth_not_expr_FU_1_1_58_i17_fu___float64_addif_12095_30768), .in2(out_truth_and_expr_FU_1_1_1_57_i25_fu___float64_addif_12095_30771));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_addif_12095_30803 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i5_fu___float64_addif_12095_30803), .in1(out_reg_93_reg_93), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_64_0_64_73_i1_fu___float64_addif_12095_12431));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30806 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i4_fu___float64_addif_12095_30806), .in1(out_reg_20_reg_20), .in2(out_ui_rshift_expr_FU_64_0_64_186_i0_fu___float64_addif_12095_31315), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(13), .BITSIZE_in3(1), .BITSIZE_out1(13)) fu___float64_addif_12095_30808 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i6_fu___float64_addif_12095_30808), .in1(out_reg_20_reg_20), .in2(out_ui_rshift_expr_FU_64_0_64_185_i0_fu___float64_addif_12095_31308), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(13), .BITSIZE_in3(13), .BITSIZE_out1(13)) fu___float64_addif_12095_30810 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i7_fu___float64_addif_12095_30810), .in1(out_reg_12_reg_12), .in2(out_reg_95_reg_95), .in3(out_ui_rshift_expr_FU_64_0_64_185_i2_fu___float64_addif_12095_31325));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30812 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i5_fu___float64_addif_12095_30812), .in1(out_ui_eq_expr_FU_8_0_8_107_i0_fu___float64_addif_12095_12366), .in2(out_ui_eq_expr_FU_1_0_1_103_i0_fu___float64_addif_12095_12370), .in3(out_ui_eq_expr_FU_1_0_1_103_i1_fu___float64_addif_12095_12453));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_addif_12095_30814 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i6_fu___float64_addif_12095_30814), .in1(out_ui_eq_expr_FU_8_0_8_107_i0_fu___float64_addif_12095_12366), .in2(out_ui_rshift_expr_FU_64_0_64_178_i6_fu___float64_addif_12095_31272), .in3(out_ui_rshift_expr_FU_64_0_64_178_i7_fu___float64_addif_12095_31275));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30818 (.out1(out_truth_or_expr_FU_1_1_1_59_i1_fu___float64_addif_12095_30818), .in1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_addif_12095_30758), .in2(out_truth_and_expr_FU_1_1_1_57_i24_fu___float64_addif_12095_30764));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___float64_addif_12095_30820 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i0_fu___float64_addif_12095_30820), .in1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_addif_12095_30758), .in2(out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_addif_12095_31106), .in3(out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_addif_12095_31110));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(16), .BITSIZE_out1(3)) fu___float64_addif_12095_30824 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i1_fu___float64_addif_12095_30824), .in1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_addif_12095_30758), .in2(out_const_31), .in3(out_ui_bit_and_expr_FU_16_0_16_61_i0_fu___float64_addif_12095_12311));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30827 (.out1(out_truth_or_expr_FU_1_1_1_59_i2_fu___float64_addif_12095_30827), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_addif_12095_30694), .in2(out_truth_and_expr_FU_1_1_1_57_i9_fu___float64_addif_12095_30688));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(39), .BITSIZE_in3(39), .BITSIZE_out1(39)) fu___float64_addif_12095_30829 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i7_fu___float64_addif_12095_30829), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_addif_12095_30694), .in2(out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_addif_12095_31091), .in3(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_addif_12095_31095));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(16), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30833 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i2_fu___float64_addif_12095_30833), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_addif_12095_30694), .in2(out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_addif_12095_12450), .in3(out_const_31));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30836 (.out1(out_truth_or_expr_FU_1_1_1_59_i3_fu___float64_addif_12095_30836), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_addif_12095_30728), .in2(out_truth_and_expr_FU_1_1_1_57_i18_fu___float64_addif_12095_30734));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(23), .BITSIZE_in3(23), .BITSIZE_out1(23)) fu___float64_addif_12095_30838 (.out1(out_ui_cond_expr_FU_32_32_32_32_97_i0_fu___float64_addif_12095_30838), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_addif_12095_30728), .in2(out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_addif_12095_31073), .in3(out_ui_rshift_expr_FU_64_0_64_179_i1_fu___float64_addif_12095_31077));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(1), .BITSIZE_out1(3)) fu___float64_addif_12095_30842 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i3_fu___float64_addif_12095_30842), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_addif_12095_30728), .in2(out_const_31), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_addif_12095_30844 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i8_fu___float64_addif_12095_30844), .in1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_addif_12095_30664), .in2(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_addif_12095_31058), .in3(out_ui_rshift_expr_FU_64_0_64_178_i1_fu___float64_addif_12095_31061));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(1), .BITSIZE_out1(3)) fu___float64_addif_12095_30848 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i4_fu___float64_addif_12095_30848), .in1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_addif_12095_30664), .in2(out_const_31), .in3(out_const_0));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30851 (.out1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_addif_12095_30698), .in2(out_truth_and_expr_FU_1_1_1_57_i12_fu___float64_addif_12095_30704));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(31), .BITSIZE_in3(31), .BITSIZE_out1(31)) fu___float64_addif_12095_30861 (.out1(out_ui_cond_expr_FU_32_32_32_32_97_i1_fu___float64_addif_12095_30861), .in1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_addif_12095_30698), .in2(out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_addif_12095_31040), .in3(out_ui_rshift_expr_FU_64_0_64_177_i1_fu___float64_addif_12095_31044));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(8), .BITSIZE_out1(3)) fu___float64_addif_12095_30867 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i5_fu___float64_addif_12095_30867), .in1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_addif_12095_30698), .in2(out_const_31), .in3(out_ui_bit_and_expr_FU_8_0_8_75_i4_fu___float64_addif_12095_12460));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30872 (.out1(out_truth_or_expr_FU_1_1_1_59_i5_fu___float64_addif_12095_30872), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_addif_12095_30744), .in2(out_truth_and_expr_FU_1_1_1_57_i19_fu___float64_addif_12095_30738));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(15), .BITSIZE_in3(15), .BITSIZE_out1(15)) fu___float64_addif_12095_30874 (.out1(out_ui_cond_expr_FU_16_16_16_16_95_i8_fu___float64_addif_12095_30874), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_addif_12095_30744), .in2(out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_addif_12095_31139), .in3(out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_addif_12095_31143));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30878 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i6_fu___float64_addif_12095_30878), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_addif_12095_30744), .in2(out_ui_bit_and_expr_FU_8_0_8_75_i5_fu___float64_addif_12095_12482), .in3(out_const_31));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30881 (.out1(out_truth_or_expr_FU_1_1_1_59_i6_fu___float64_addif_12095_30881), .in1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_addif_12095_30668), .in2(out_truth_and_expr_FU_1_1_1_57_i6_fu___float64_addif_12095_30674));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_addif_12095_30883 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i9_fu___float64_addif_12095_30883), .in1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_addif_12095_30668), .in2(out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_addif_12095_31121), .in3(out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_addif_12095_31125));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(8), .BITSIZE_out1(3)) fu___float64_addif_12095_30887 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i7_fu___float64_addif_12095_30887), .in1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_addif_12095_30668), .in2(out_const_31), .in3(out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_addif_12095_12484));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(52), .BITSIZE_in3(1), .BITSIZE_out1(52)) fu___float64_addif_12095_30889 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i10_fu___float64_addif_12095_30889), .in1(out_reg_94_reg_94), .in2(out_ui_cond_expr_FU_64_64_64_64_98_i5_fu___float64_addif_12095_30803), .in3(out_const_0));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30892 (.out1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in2(out_truth_or_expr_FU_1_1_1_59_i5_fu___float64_addif_12095_30872));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___float64_addif_12095_30893 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i8_fu___float64_addif_12095_30893), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in2(out_ui_rshift_expr_FU_8_0_8_189_i1_fu___float64_addif_12095_31150), .in3(out_ui_rshift_expr_FU_8_0_8_189_i2_fu___float64_addif_12095_31153));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(31), .BITSIZE_in3(31), .BITSIZE_out1(31)) fu___float64_addif_12095_30902 (.out1(out_ui_cond_expr_FU_32_32_32_32_97_i2_fu___float64_addif_12095_30902), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in2(out_ui_rshift_expr_FU_64_0_64_177_i2_fu___float64_addif_12095_31163), .in3(out_ui_rshift_expr_FU_64_0_64_177_i3_fu___float64_addif_12095_31166));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30905 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i6_fu___float64_addif_12095_30905), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in2(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_addif_12095_30698), .in3(out_truth_not_expr_FU_1_1_58_i20_fu___float64_addif_12095_31132));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30908 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i9_fu___float64_addif_12095_30908), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i5_fu___float64_addif_12095_30867), .in3(out_ui_cond_expr_FU_8_8_8_8_99_i6_fu___float64_addif_12095_30878));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30913 (.out1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in2(out_truth_or_expr_FU_1_1_1_59_i6_fu___float64_addif_12095_30881));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___float64_addif_12095_30914 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i10_fu___float64_addif_12095_30914), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in2(out_ui_rshift_expr_FU_8_0_8_189_i3_fu___float64_addif_12095_31173), .in3(out_ui_rshift_expr_FU_8_0_8_189_i4_fu___float64_addif_12095_31176));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30917 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i7_fu___float64_addif_12095_30917), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in2(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_addif_12095_30851), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_addif_12095_30923 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i11_fu___float64_addif_12095_30923), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in2(out_ui_rshift_expr_FU_64_0_64_182_i2_fu___float64_addif_12095_31183), .in3(out_ui_rshift_expr_FU_64_0_64_182_i3_fu___float64_addif_12095_31186));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30926 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i8_fu___float64_addif_12095_30926), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i6_fu___float64_addif_12095_30905), .in3(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_addif_12095_30668));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30929 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i11_fu___float64_addif_12095_30929), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_addif_12095_30892), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i9_fu___float64_addif_12095_30908), .in3(out_ui_cond_expr_FU_8_8_8_8_99_i7_fu___float64_addif_12095_30887));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30934 (.out1(out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_addif_12095_30934), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913), .in2(out_truth_or_expr_FU_1_1_1_59_i1_fu___float64_addif_12095_30818));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_addif_12095_30935 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i12_fu___float64_addif_12095_30935), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913), .in2(out_ui_lshift_expr_FU_8_0_8_137_i1_fu___float64_addif_12095_31180), .in3(out_ui_bit_and_expr_FU_8_0_8_75_i3_fu___float64_addif_12095_12456));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30938 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i9_fu___float64_addif_12095_30938), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i7_fu___float64_addif_12095_30917), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_addif_12095_30944 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i12_fu___float64_addif_12095_30944), .in1(out_reg_70_reg_70), .in2(out_reg_79_reg_79), .in3(out_reg_80_reg_80));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30947 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i10_fu___float64_addif_12095_30947), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i8_fu___float64_addif_12095_30926), .in3(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_addif_12095_30758));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30950 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i13_fu___float64_addif_12095_30950), .in1(out_reg_70_reg_70), .in2(out_reg_71_reg_71), .in3(out_reg_60_reg_60));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30955 (.out1(out_truth_or_expr_FU_1_1_1_59_i10_fu___float64_addif_12095_30955), .in1(out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_addif_12095_30934), .in2(out_truth_or_expr_FU_1_1_1_59_i2_fu___float64_addif_12095_30827));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_addif_12095_30956 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i14_fu___float64_addif_12095_30956), .in1(out_reg_72_reg_72), .in2(out_reg_73_reg_73), .in3(out_reg_57_reg_57));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30959 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i11_fu___float64_addif_12095_30959), .in1(out_reg_72_reg_72), .in2(out_reg_74_reg_74), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30962 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i12_fu___float64_addif_12095_30962), .in1(out_reg_72_reg_72), .in2(out_reg_70_reg_70), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_addif_12095_30965 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i13_fu___float64_addif_12095_30965), .in1(out_reg_72_reg_72), .in2(out_ui_rshift_expr_FU_64_0_64_182_i6_fu___float64_addif_12095_31206), .in3(out_reg_81_reg_81));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30968 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i13_fu___float64_addif_12095_30968), .in1(out_reg_72_reg_72), .in2(out_reg_75_reg_75), .in3(out_reg_78_reg_78));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30971 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i15_fu___float64_addif_12095_30971), .in1(out_reg_72_reg_72), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i13_fu___float64_addif_12095_30950), .in3(out_reg_61_reg_61));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30976 (.out1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in1(out_reg_76_reg_76), .in2(out_reg_69_reg_69));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_addif_12095_30977 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i16_fu___float64_addif_12095_30977), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i14_fu___float64_addif_12095_30956), .in3(out_reg_58_reg_58));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30980 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i14_fu___float64_addif_12095_30980), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i11_fu___float64_addif_12095_30959), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30983 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i15_fu___float64_addif_12095_30983), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i12_fu___float64_addif_12095_30962), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_addif_12095_30986 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i14_fu___float64_addif_12095_30986), .in1(out_reg_76_reg_76), .in2(out_ui_rshift_expr_FU_64_0_64_182_i8_fu___float64_addif_12095_31216), .in3(out_reg_82_reg_82));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30989 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i16_fu___float64_addif_12095_30989), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i13_fu___float64_addif_12095_30968), .in3(out_reg_67_reg_67));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_30992 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i17_fu___float64_addif_12095_30992), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i15_fu___float64_addif_12095_30971), .in3(out_reg_62_reg_62));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_addif_12095_30996 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i18_fu___float64_addif_12095_30996), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i16_fu___float64_addif_12095_30977), .in3(out_reg_59_reg_59));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_30998 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i17_fu___float64_addif_12095_30998), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i14_fu___float64_addif_12095_30980), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31000 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i18_fu___float64_addif_12095_31000), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i15_fu___float64_addif_12095_30983), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_addif_12095_31002 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i15_fu___float64_addif_12095_31002), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in2(out_ui_rshift_expr_FU_64_0_64_178_i2_fu___float64_addif_12095_31226), .in3(out_reg_83_reg_83));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31004 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i19_fu___float64_addif_12095_31004), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i16_fu___float64_addif_12095_30989), .in3(out_reg_66_reg_66));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_31006 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i19_fu___float64_addif_12095_31006), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_addif_12095_30976), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i17_fu___float64_addif_12095_30992), .in3(out_reg_63_reg_63));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31010 (.out1(out_truth_not_expr_FU_1_1_58_i18_fu___float64_addif_12095_31010), .in1(out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_addif_12095_30748));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31013 (.out1(out_truth_and_expr_FU_1_1_1_57_i26_fu___float64_addif_12095_31013), .in1(out_reg_77_reg_77), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i19_fu___float64_addif_12095_31004));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31016 (.out1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016), .in1(out_reg_68_reg_68), .in2(out_truth_and_expr_FU_1_1_1_57_i26_fu___float64_addif_12095_31013));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_31018 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i20_fu___float64_addif_12095_31018), .in1(out_reg_68_reg_68), .in2(out_const_0), .in3(out_ui_rshift_expr_FU_8_0_8_189_i5_fu___float64_addif_12095_31243));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31020 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i20_fu___float64_addif_12095_31020), .in1(out_reg_68_reg_68), .in2(out_const_29), .in3(out_ui_cond_expr_FU_1_1_1_1_96_i17_fu___float64_addif_12095_30998));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31022 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i21_fu___float64_addif_12095_31022), .in1(out_reg_68_reg_68), .in2(out_const_29), .in3(out_ui_cond_expr_FU_1_1_1_1_96_i18_fu___float64_addif_12095_31000));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_addif_12095_31024 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i16_fu___float64_addif_12095_31024), .in1(out_reg_68_reg_68), .in2(out_const_0), .in3(out_ui_rshift_expr_FU_64_0_64_178_i4_fu___float64_addif_12095_31236));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_31026 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i21_fu___float64_addif_12095_31026), .in1(out_reg_68_reg_68), .in2(out_const_31), .in3(out_ui_cond_expr_FU_8_8_8_8_99_i19_fu___float64_addif_12095_31006));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_31028 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i22_fu___float64_addif_12095_31028), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016), .in2(out_ui_rshift_expr_FU_8_0_8_189_i6_fu___float64_addif_12095_31261), .in3(out_ui_rshift_expr_FU_8_0_8_189_i7_fu___float64_addif_12095_31265));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31030 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i22_fu___float64_addif_12095_31030), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i20_fu___float64_addif_12095_31020), .in3(out_ui_cond_expr_FU_1_1_1_1_96_i17_fu___float64_addif_12095_30998));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31032 (.out1(out_ui_cond_expr_FU_1_1_1_1_96_i23_fu___float64_addif_12095_31032), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016), .in2(out_ui_cond_expr_FU_1_1_1_1_96_i21_fu___float64_addif_12095_31022), .in3(out_ui_cond_expr_FU_1_1_1_1_96_i18_fu___float64_addif_12095_31000));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_addif_12095_31034 (.out1(out_ui_cond_expr_FU_64_64_64_64_98_i17_fu___float64_addif_12095_31034), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016), .in2(out_ui_rshift_expr_FU_64_0_64_178_i5_fu___float64_addif_12095_31251), .in3(out_ui_rshift_expr_FU_64_0_64_178_i4_fu___float64_addif_12095_31236));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_addif_12095_31036 (.out1(out_ui_cond_expr_FU_8_8_8_8_99_i23_fu___float64_addif_12095_31036), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_addif_12095_31016), .in2(out_ui_cond_expr_FU_8_8_8_8_99_i21_fu___float64_addif_12095_31026), .in3(out_ui_cond_expr_FU_8_8_8_8_99_i19_fu___float64_addif_12095_31006));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_addif_12095_31040 (.out1(out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_addif_12095_31040), .in1(out_ui_lshift_expr_FU_64_0_64_122_i4_fu___float64_addif_12095_12478), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_addif_12095_31044 (.out1(out_ui_rshift_expr_FU_64_0_64_177_i1_fu___float64_addif_12095_31044), .in1(out_ui_lshift_expr_FU_64_0_64_118_i1_fu___float64_addif_12095_12462), .in2(out_const_34));
  ui_lshift_expr_FU #(.BITSIZE_in1(31), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31048 (.out1(out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_addif_12095_31048), .in1(out_ui_cond_expr_FU_32_32_32_32_97_i1_fu___float64_addif_12095_30861), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31058 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_addif_12095_31058), .in1(out_ui_lshift_expr_FU_64_0_64_122_i3_fu___float64_addif_12095_12477), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31061 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i1_fu___float64_addif_12095_31061), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_addif_12095_12305), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31066 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i0_fu___float64_addif_12095_31066), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i8_fu___float64_addif_12095_30844), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_addif_12095_31073 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_addif_12095_31073), .in1(out_ui_lshift_expr_FU_64_0_64_122_i2_fu___float64_addif_12095_12476), .in2(out_const_38));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_addif_12095_31077 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i1_fu___float64_addif_12095_31077), .in1(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_addif_12095_12309), .in2(out_const_38));
  ui_lshift_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31081 (.out1(out_ui_lshift_expr_FU_64_0_64_125_i0_fu___float64_addif_12095_31081), .in1(out_ui_cond_expr_FU_32_32_32_32_97_i0_fu___float64_addif_12095_30838), .in2(out_const_38));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31084 (.out1(out_truth_not_expr_FU_1_1_58_i19_fu___float64_addif_12095_31084), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_addif_12095_30694));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(39), .PRECISION(64)) fu___float64_addif_12095_31091 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_addif_12095_31091), .in1(out_ui_lshift_expr_FU_64_0_64_121_i1_fu___float64_addif_12095_12458), .in2(out_const_40));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(39), .PRECISION(64)) fu___float64_addif_12095_31095 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_addif_12095_31095), .in1(out_ui_lshift_expr_FU_64_0_64_122_i1_fu___float64_addif_12095_12475), .in2(out_const_40));
  ui_lshift_expr_FU #(.BITSIZE_in1(39), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31099 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i0_fu___float64_addif_12095_31099), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i7_fu___float64_addif_12095_30829), .in2(out_const_40));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_addif_12095_31106 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_addif_12095_31106), .in1(out_ui_lshift_expr_FU_64_0_64_122_i0_fu___float64_addif_12095_12474), .in2(out_const_45));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_addif_12095_31110 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_addif_12095_31110), .in1(out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_addif_12095_12454), .in2(out_const_45));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31114 (.out1(out_ui_lshift_expr_FU_64_0_64_127_i0_fu___float64_addif_12095_31114), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i0_fu___float64_addif_12095_30820), .in2(out_const_45));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31121 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_addif_12095_31121), .in1(out_ui_lshift_expr_FU_64_0_64_122_i6_fu___float64_addif_12095_12480), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31125 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_addif_12095_31125), .in1(out_ui_lshift_expr_FU_64_0_64_118_i2_fu___float64_addif_12095_12466), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31129 (.out1(out_ui_lshift_expr_FU_64_0_64_128_i0_fu___float64_addif_12095_31129), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i9_fu___float64_addif_12095_30883), .in2(out_const_33));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_addif_12095_31132 (.out1(out_truth_not_expr_FU_1_1_58_i20_fu___float64_addif_12095_31132), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_addif_12095_30744));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(15), .PRECISION(64)) fu___float64_addif_12095_31139 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_addif_12095_31139), .in1(out_ui_lshift_expr_FU_64_0_64_118_i3_fu___float64_addif_12095_12470), .in2(out_const_41));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(15), .PRECISION(64)) fu___float64_addif_12095_31143 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_addif_12095_31143), .in1(out_ui_lshift_expr_FU_64_0_64_122_i5_fu___float64_addif_12095_12479), .in2(out_const_41));
  ui_lshift_expr_FU #(.BITSIZE_in1(15), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31147 (.out1(out_ui_lshift_expr_FU_64_0_64_129_i0_fu___float64_addif_12095_31147), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i8_fu___float64_addif_12095_30874), .in2(out_const_41));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_addif_12095_31150 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i1_fu___float64_addif_12095_31150), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i0_fu___float64_addif_12095_12316), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_addif_12095_31153 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i2_fu___float64_addif_12095_31153), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i1_fu___float64_addif_12095_12321), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(64)) fu___float64_addif_12095_31157 (.out1(out_ui_lshift_expr_FU_8_0_8_137_i0_fu___float64_addif_12095_31157), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i8_fu___float64_addif_12095_30893), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_addif_12095_31163 (.out1(out_ui_rshift_expr_FU_64_0_64_177_i2_fu___float64_addif_12095_31163), .in1(out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_addif_12095_31048), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_addif_12095_31166 (.out1(out_ui_rshift_expr_FU_64_0_64_177_i3_fu___float64_addif_12095_31166), .in1(out_ui_lshift_expr_FU_64_0_64_129_i0_fu___float64_addif_12095_31147), .in2(out_const_34));
  ui_lshift_expr_FU #(.BITSIZE_in1(31), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31170 (.out1(out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_addif_12095_31170), .in1(out_ui_cond_expr_FU_32_32_32_32_97_i2_fu___float64_addif_12095_30902), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_addif_12095_31173 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i3_fu___float64_addif_12095_31173), .in1(out_ui_lshift_expr_FU_8_0_8_137_i0_fu___float64_addif_12095_31157), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_addif_12095_31176 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i4_fu___float64_addif_12095_31176), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i2_fu___float64_addif_12095_12326), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(64)) fu___float64_addif_12095_31180 (.out1(out_ui_lshift_expr_FU_8_0_8_137_i1_fu___float64_addif_12095_31180), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i10_fu___float64_addif_12095_30914), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31183 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i2_fu___float64_addif_12095_31183), .in1(out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_addif_12095_31170), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31186 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i3_fu___float64_addif_12095_31186), .in1(out_ui_lshift_expr_FU_64_0_64_128_i0_fu___float64_addif_12095_31129), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31190 (.out1(out_ui_lshift_expr_FU_64_0_64_128_i1_fu___float64_addif_12095_31190), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i11_fu___float64_addif_12095_30923), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31196 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i4_fu___float64_addif_12095_31196), .in1(out_ui_lshift_expr_FU_64_0_64_128_i1_fu___float64_addif_12095_31190), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31199 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i5_fu___float64_addif_12095_31199), .in1(out_ui_lshift_expr_FU_64_0_64_127_i0_fu___float64_addif_12095_31114), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31203 (.out1(out_ui_lshift_expr_FU_64_0_64_128_i2_fu___float64_addif_12095_31203), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i12_fu___float64_addif_12095_30944), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31206 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i6_fu___float64_addif_12095_31206), .in1(out_ui_lshift_expr_FU_64_0_64_128_i2_fu___float64_addif_12095_31203), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31209 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i7_fu___float64_addif_12095_31209), .in1(out_ui_lshift_expr_FU_64_0_64_126_i0_fu___float64_addif_12095_31099), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31213 (.out1(out_ui_lshift_expr_FU_64_0_64_128_i3_fu___float64_addif_12095_31213), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i13_fu___float64_addif_12095_30965), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31216 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i8_fu___float64_addif_12095_31216), .in1(out_ui_lshift_expr_FU_64_0_64_128_i3_fu___float64_addif_12095_31213), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_addif_12095_31219 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i9_fu___float64_addif_12095_31219), .in1(out_ui_lshift_expr_FU_64_0_64_125_i0_fu___float64_addif_12095_31081), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31223 (.out1(out_ui_lshift_expr_FU_64_0_64_128_i4_fu___float64_addif_12095_31223), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i14_fu___float64_addif_12095_30986), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31226 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i2_fu___float64_addif_12095_31226), .in1(out_ui_lshift_expr_FU_64_0_64_128_i4_fu___float64_addif_12095_31223), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31229 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i3_fu___float64_addif_12095_31229), .in1(out_ui_lshift_expr_FU_64_0_64_124_i0_fu___float64_addif_12095_31066), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31233 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i1_fu___float64_addif_12095_31233), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i15_fu___float64_addif_12095_31002), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31236 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i4_fu___float64_addif_12095_31236), .in1(out_ui_lshift_expr_FU_64_0_64_124_i1_fu___float64_addif_12095_31233), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31240 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i2_fu___float64_addif_12095_31240), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i16_fu___float64_addif_12095_31024), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___float64_addif_12095_31243 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i5_fu___float64_addif_12095_31243), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i18_fu___float64_addif_12095_30996), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_addif_12095_31248 (.out1(out_ui_lshift_expr_FU_8_0_8_137_i2_fu___float64_addif_12095_31248), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i20_fu___float64_addif_12095_31018), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31251 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i5_fu___float64_addif_12095_31251), .in1(out_ui_lshift_expr_FU_64_0_64_124_i2_fu___float64_addif_12095_31240), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31258 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_addif_12095_31258), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i17_fu___float64_addif_12095_31034), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___float64_addif_12095_31261 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i6_fu___float64_addif_12095_31261), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i0_fu___float64_addif_12095_12358), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___float64_addif_12095_31265 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i7_fu___float64_addif_12095_31265), .in1(out_ui_rshift_expr_FU_8_0_8_187_i0_fu___float64_addif_12095_12359), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_addif_12095_31269 (.out1(out_ui_lshift_expr_FU_8_0_8_137_i3_fu___float64_addif_12095_31269), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i22_fu___float64_addif_12095_31028), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31272 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i6_fu___float64_addif_12095_31272), .in1(out_ui_lshift_expr_FU_64_0_64_111_i2_fu___float64_addif_12095_12368), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31275 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i7_fu___float64_addif_12095_31275), .in1(out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_addif_12095_31258), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31279 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_addif_12095_31279), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i6_fu___float64_addif_12095_30814), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31282 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i8_fu___float64_addif_12095_31282), .in1(out_ui_lshift_expr_FU_64_0_64_119_i0_fu___float64_addif_12095_12374), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_addif_12095_31285 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i9_fu___float64_addif_12095_31285), .in1(out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_addif_12095_31279), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31289 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i5_fu___float64_addif_12095_31289), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i4_fu___float64_addif_12095_30792), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_31296 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i0_fu___float64_addif_12095_31296), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i0_fu___float64_addif_12095_30635), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_addif_12095_31300 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_addif_12095_31300), .in1(out_ui_lshift_expr_FU_64_0_64_110_i2_fu___float64_addif_12095_12405), .in2(out_const_43));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_31305 (.out1(out_ui_lshift_expr_FU_64_0_64_131_i0_fu___float64_addif_12095_31305), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i4_fu___float64_addif_12095_30796), .in2(out_const_43));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(13), .PRECISION(64)) fu___float64_addif_12095_31308 (.out1(out_ui_rshift_expr_FU_64_0_64_185_i0_fu___float64_addif_12095_31308), .in1(out_ui_lshift_expr_FU_64_0_64_130_i0_fu___float64_addif_12095_31296), .in2(out_const_42));
  ui_lshift_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_31312 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i1_fu___float64_addif_12095_31312), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i6_fu___float64_addif_12095_30808), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_addif_12095_31315 (.out1(out_ui_rshift_expr_FU_64_0_64_186_i0_fu___float64_addif_12095_31315), .in1(out_ui_cond_expr_FU_64_64_64_64_98_i0_fu___float64_addif_12095_30632), .in2(out_const_47));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_31319 (.out1(out_ui_lshift_expr_FU_64_0_64_132_i0_fu___float64_addif_12095_31319), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i4_fu___float64_addif_12095_30806), .in2(out_const_47));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(13), .PRECISION(64)) fu___float64_addif_12095_31322 (.out1(out_ui_rshift_expr_FU_64_0_64_185_i1_fu___float64_addif_12095_31322), .in1(out_ui_lshift_expr_FU_64_0_64_130_i1_fu___float64_addif_12095_31312), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(13), .PRECISION(64)) fu___float64_addif_12095_31325 (.out1(out_ui_rshift_expr_FU_64_0_64_185_i2_fu___float64_addif_12095_31325), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i16_fu___float64_addif_12095_12444), .in2(out_const_42));
  ui_lshift_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_addif_12095_31329 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i2_fu___float64_addif_12095_31329), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i7_fu___float64_addif_12095_30810), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(11), .PRECISION(64)) fu___float64_addif_12095_31332 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_addif_12095_31332), .in1(out_ui_lshift_expr_FU_64_0_64_110_i3_fu___float64_addif_12095_12426), .in2(out_const_43));
  ui_lshift_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_addif_12095_31337 (.out1(out_ui_lshift_expr_FU_64_0_64_131_i1_fu___float64_addif_12095_31337), .in1(out_ui_cond_expr_FU_16_16_16_16_95_i5_fu___float64_addif_12095_30798), .in2(out_const_43));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_69_i0_fu___float64_addif_12095_12106), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_5_i0_fu___float64_addif_12095_12110), .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i2_fu___float64_addif_12095_12428), .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i3_fu___float64_addif_12095_12434), .wenable(wrenable_reg_11));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_1_1_1_88_i2_fu___float64_addif_12095_12438), .wenable(wrenable_reg_12));
  register_SE #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_addif_12095_12443), .wenable(wrenable_reg_13));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_ui_lt_expr_FU_1_1_1_139_i0_fu___float64_addif_12095_29762), .wenable(wrenable_reg_14));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_truth_xor_expr_FU_1_1_1_60_i0_fu___float64_addif_12095_30065), .wenable(wrenable_reg_15));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_8_i0_fu___float64_addif_12095_30120), .wenable(wrenable_reg_16));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_9_i0_fu___float64_addif_12095_30124), .wenable(wrenable_reg_17));
  register_SE #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_16_16_16_87_i1_fu___float64_addif_12095_12159), .wenable(wrenable_reg_18));
  register_STD #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_19 (.out1(out_reg_19_reg_19), .clock(clock), .reset(reset), .in1(out_ui_minus_expr_FU_16_16_16_141_i0_fu___float64_addif_12095_12160), .wenable(wrenable_reg_19));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_69_i1_fu___float64_addif_12095_12111), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_20 (.out1(out_reg_20_reg_20), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i2_fu___float64_addif_12095_30790), .wenable(wrenable_reg_20));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_21 (.out1(out_reg_21_reg_21), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_111_i0_fu___float64_addif_12095_12174), .wenable(wrenable_reg_21));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_22 (.out1(out_reg_22_reg_22), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_111_i1_fu___float64_addif_12095_12178), .wenable(wrenable_reg_22));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_23 (.out1(out_reg_23_reg_23), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_8_8_8_90_i2_fu___float64_addif_12095_12185), .wenable(wrenable_reg_23));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_24 (.out1(out_reg_24_reg_24), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_150_i0_fu___float64_addif_12095_12186), .wenable(wrenable_reg_24));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_25 (.out1(out_reg_25_reg_25), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_151_i0_fu___float64_addif_12095_12188), .wenable(wrenable_reg_25));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_26 (.out1(out_reg_26_reg_26), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_addif_12095_12195), .wenable(wrenable_reg_26));
  register_STD #(.BITSIZE_in1(23), .BITSIZE_out1(23)) reg_27 (.out1(out_reg_27_reg_27), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_158_i0_fu___float64_addif_12095_12197), .wenable(wrenable_reg_27));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_28 (.out1(out_reg_28_reg_28), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_152_i0_fu___float64_addif_12095_12202), .wenable(wrenable_reg_28));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_29 (.out1(out_reg_29_reg_29), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_153_i0_fu___float64_addif_12095_12220), .wenable(wrenable_reg_29));
  register_STD #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_7_i0_fu___float64_addif_12095_12115), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_30 (.out1(out_reg_30_reg_30), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_154_i0_fu___float64_addif_12095_12238), .wenable(wrenable_reg_30));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_31 (.out1(out_reg_31_reg_31), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_155_i0_fu___float64_addif_12095_12256), .wenable(wrenable_reg_31));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_32 (.out1(out_reg_32_reg_32), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_addif_12095_29758), .wenable(wrenable_reg_32));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_33 (.out1(out_reg_33_reg_33), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i6_fu___float64_addif_12095_12212), .wenable(wrenable_reg_33));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_34 (.out1(out_reg_34_reg_34), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i7_fu___float64_addif_12095_12214), .wenable(wrenable_reg_34));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_35 (.out1(out_reg_35_reg_35), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i4_fu___float64_addif_12095_12219), .wenable(wrenable_reg_35));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_36 (.out1(out_reg_36_reg_36), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_24_i0_fu___float64_addif_12095_12226), .wenable(wrenable_reg_36));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_37 (.out1(out_reg_37_reg_37), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_addif_12095_12227), .wenable(wrenable_reg_37));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_38 (.out1(out_reg_38_reg_38), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_92_i3_fu___float64_addif_12095_12231), .wenable(wrenable_reg_38));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_39 (.out1(out_reg_39_reg_39), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_addif_12095_12234), .wenable(wrenable_reg_39));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_ui_ne_expr_FU_16_0_16_142_i0_fu___float64_addif_12095_12119), .wenable(wrenable_reg_4));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_40 (.out1(out_reg_40_reg_40), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_26_i0_fu___float64_addif_12095_12244), .wenable(wrenable_reg_40));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_41 (.out1(out_reg_41_reg_41), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_92_i4_fu___float64_addif_12095_12249), .wenable(wrenable_reg_41));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_42 (.out1(out_reg_42_reg_42), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_28_i0_fu___float64_addif_12095_12262), .wenable(wrenable_reg_42));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_43 (.out1(out_reg_43_reg_43), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_92_i5_fu___float64_addif_12095_12267), .wenable(wrenable_reg_43));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_44 (.out1(out_reg_44_reg_44), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_30_i0_fu___float64_addif_12095_12279), .wenable(wrenable_reg_44));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_45 (.out1(out_reg_45_reg_45), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_92_i6_fu___float64_addif_12095_12284), .wenable(wrenable_reg_45));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_46 (.out1(out_reg_46_reg_46), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_64_64_89_i9_fu___float64_addif_12095_12251), .wenable(wrenable_reg_46));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_47 (.out1(out_reg_47_reg_47), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_addif_12095_12263), .wenable(wrenable_reg_47));
  register_STD #(.BITSIZE_in1(62), .BITSIZE_out1(62)) reg_48 (.out1(out_reg_48_reg_48), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_162_i0_fu___float64_addif_12095_12264), .wenable(wrenable_reg_48));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_49 (.out1(out_reg_49_reg_49), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_addif_12095_12280), .wenable(wrenable_reg_49));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_16_0_16_100_i1_fu___float64_addif_12095_12120), .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(54), .BITSIZE_out1(54)) reg_50 (.out1(out_reg_50_reg_50), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i24_fu___float64_addif_12095_12288), .wenable(wrenable_reg_50));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_51 (.out1(out_reg_51_reg_51), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_74_i25_fu___float64_addif_12095_12289), .wenable(wrenable_reg_51));
  register_SE #(.BITSIZE_in1(56), .BITSIZE_out1(56)) reg_52 (.out1(out_reg_52_reg_52), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_71_i0_fu___float64_addif_12095_12298), .wenable(wrenable_reg_52));
  register_STD #(.BITSIZE_in1(61), .BITSIZE_out1(61)) reg_53 (.out1(out_reg_53_reg_53), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_addif_12095_30079), .wenable(wrenable_reg_53));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_54 (.out1(out_reg_54_reg_54), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_33_i0_fu___float64_addif_12095_12301), .wenable(wrenable_reg_54));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_55 (.out1(out_reg_55_reg_55), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_34_i0_fu___float64_addif_12095_12412), .wenable(wrenable_reg_55));
  register_STD #(.BITSIZE_in1(57), .BITSIZE_out1(57)) reg_56 (.out1(out_reg_56_reg_56), .clock(clock), .reset(reset), .in1(out_ui_ternary_plus_expr_FU_64_64_64_64_191_i0_fu___float64_addif_12095_12303), .wenable(wrenable_reg_56));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_57 (.out1(out_reg_57_reg_57), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i4_fu___float64_addif_12095_12460), .wenable(wrenable_reg_57));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_58 (.out1(out_reg_58_reg_58), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_8_0_8_75_i5_fu___float64_addif_12095_12482), .wenable(wrenable_reg_58));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_59 (.out1(out_reg_59_reg_59), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_addif_12095_12484), .wenable(wrenable_reg_59));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_ne_expr_FU_16_0_16_142_i1_fu___float64_addif_12095_12123), .wenable(wrenable_reg_6));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_60 (.out1(out_reg_60_reg_60), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i1_fu___float64_addif_12095_30824), .wenable(wrenable_reg_60));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_61 (.out1(out_reg_61_reg_61), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i2_fu___float64_addif_12095_30833), .wenable(wrenable_reg_61));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_62 (.out1(out_reg_62_reg_62), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i3_fu___float64_addif_12095_30842), .wenable(wrenable_reg_62));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_63 (.out1(out_reg_63_reg_63), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i4_fu___float64_addif_12095_30848), .wenable(wrenable_reg_63));
  register_STD #(.BITSIZE_in1(6), .BITSIZE_out1(6)) reg_64 (.out1(out_reg_64_reg_64), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_8_0_8_136_i0_fu___float64_addif_12095_12386), .wenable(wrenable_reg_64));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_65 (.out1(out_reg_65_reg_65), .clock(clock), .reset(reset), .in1(out_ui_lt_expr_FU_1_1_1_139_i2_fu___float64_addif_12095_29766), .wenable(wrenable_reg_65));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_66 (.out1(out_reg_66_reg_66), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_addif_12095_30664), .wenable(wrenable_reg_66));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_67 (.out1(out_reg_67_reg_67), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_addif_12095_30728), .wenable(wrenable_reg_67));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_68 (.out1(out_reg_68_reg_68), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_addif_12095_30748), .wenable(wrenable_reg_68));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_69 (.out1(out_reg_69_reg_69), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i3_fu___float64_addif_12095_30836), .wenable(wrenable_reg_69));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i2_fu___float64_addif_12095_12130), .wenable(wrenable_reg_7));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_70 (.out1(out_reg_70_reg_70), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_addif_12095_30913), .wenable(wrenable_reg_70));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_71 (.out1(out_reg_71_reg_71), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i11_fu___float64_addif_12095_30929), .wenable(wrenable_reg_71));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_72 (.out1(out_reg_72_reg_72), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_addif_12095_30934), .wenable(wrenable_reg_72));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_73 (.out1(out_reg_73_reg_73), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_99_i12_fu___float64_addif_12095_30935), .wenable(wrenable_reg_73));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_74 (.out1(out_reg_74_reg_74), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i9_fu___float64_addif_12095_30938), .wenable(wrenable_reg_74));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_75 (.out1(out_reg_75_reg_75), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_96_i10_fu___float64_addif_12095_30947), .wenable(wrenable_reg_75));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_76 (.out1(out_reg_76_reg_76), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i10_fu___float64_addif_12095_30955), .wenable(wrenable_reg_76));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_77 (.out1(out_reg_77_reg_77), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i18_fu___float64_addif_12095_31010), .wenable(wrenable_reg_77));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_78 (.out1(out_reg_78_reg_78), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i19_fu___float64_addif_12095_31084), .wenable(wrenable_reg_78));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_79 (.out1(out_reg_79_reg_79), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_182_i4_fu___float64_addif_12095_31196), .wenable(wrenable_reg_79));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_lt_expr_FU_8_8_8_52_i0_fu___float64_addif_12095_12134), .wenable(wrenable_reg_8));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_80 (.out1(out_reg_80_reg_80), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_182_i5_fu___float64_addif_12095_31199), .wenable(wrenable_reg_80));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_81 (.out1(out_reg_81_reg_81), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_182_i7_fu___float64_addif_12095_31209), .wenable(wrenable_reg_81));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_82 (.out1(out_reg_82_reg_82), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_182_i9_fu___float64_addif_12095_31219), .wenable(wrenable_reg_82));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_83 (.out1(out_reg_83_reg_83), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_178_i3_fu___float64_addif_12095_31229), .wenable(wrenable_reg_83));
  register_STD #(.BITSIZE_in1(6), .BITSIZE_out1(6)) reg_84 (.out1(out_reg_84_reg_84), .clock(clock), .reset(reset), .in1(out_UUconvert_expr_FU_40_i0_fu___float64_addif_12095_12390), .wenable(wrenable_reg_84));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_85 (.out1(out_reg_85_reg_85), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_addif_12095_12407), .wenable(wrenable_reg_85));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_86 (.out1(out_reg_86_reg_86), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_163_i2_fu___float64_addif_12095_12409), .wenable(wrenable_reg_86));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_87 (.out1(out_reg_87_reg_87), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i0_fu___float64_addif_12095_12411), .wenable(wrenable_reg_87));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_88 (.out1(out_reg_88_reg_88), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_0_1_66_i0_fu___float64_addif_12095_12415), .wenable(wrenable_reg_88));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_89 (.out1(out_reg_89_reg_89), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_73_i0_fu___float64_addif_12095_12416), .wenable(wrenable_reg_89));
  register_SE #(.BITSIZE_in1(57), .BITSIZE_out1(57)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_17_i0_fu___float64_addif_12095_12296), .wenable(wrenable_reg_9));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_90 (.out1(out_reg_90_reg_90), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_81_i0_fu___float64_addif_12095_12417), .wenable(wrenable_reg_90));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_91 (.out1(out_reg_91_reg_91), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_67_i4_fu___float64_addif_12095_12418), .wenable(wrenable_reg_91));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_92 (.out1(out_reg_92_reg_92), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_132_i0_fu___float64_addif_12095_31319), .wenable(wrenable_reg_92));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_93 (.out1(out_reg_93_reg_93), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i17_fu___float64_addif_12095_30768), .wenable(wrenable_reg_93));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_94 (.out1(out_reg_94_reg_94), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i0_fu___float64_addif_12095_30802), .wenable(wrenable_reg_94));
  register_STD #(.BITSIZE_in1(13), .BITSIZE_out1(13)) reg_95 (.out1(out_reg_95_reg_95), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_185_i1_fu___float64_addif_12095_31322), .wenable(wrenable_reg_95));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_96 (.out1(out_reg_96_reg_96), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_130_i2_fu___float64_addif_12095_31329), .wenable(wrenable_reg_96));
  register_STD #(.BITSIZE_in1(63), .BITSIZE_out1(63)) reg_97 (.out1(out_reg_97_reg_97), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_82_i0_fu___float64_addif_12095_12446), .wenable(wrenable_reg_97));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) ui_bit_ior_expr_FU_64_64_64_89_i18 (.out1(out_ui_bit_ior_expr_FU_64_64_64_89_i18_ui_bit_ior_expr_FU_64_64_64_89_i18), .in1(out_reg_33_reg_33), .in2(out_reg_34_reg_34));
  // io-signal post fix
  assign return_port = out_ui_view_convert_expr_FU_46_i0_fu___float64_addif_12095_12448;

endmodule

// FSM based controller description for __float64_addif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_addif(done_port, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_54, wrenable_reg_55, wrenable_reg_56, wrenable_reg_57, wrenable_reg_58, wrenable_reg_59, wrenable_reg_6, wrenable_reg_60, wrenable_reg_61, wrenable_reg_62, wrenable_reg_63, wrenable_reg_64, wrenable_reg_65, wrenable_reg_66, wrenable_reg_67, wrenable_reg_68, wrenable_reg_69, wrenable_reg_7, wrenable_reg_70, wrenable_reg_71, wrenable_reg_72, wrenable_reg_73, wrenable_reg_74, wrenable_reg_75, wrenable_reg_76, wrenable_reg_77, wrenable_reg_78, wrenable_reg_79, wrenable_reg_8, wrenable_reg_80, wrenable_reg_81, wrenable_reg_82, wrenable_reg_83, wrenable_reg_84, wrenable_reg_85, wrenable_reg_86, wrenable_reg_87, wrenable_reg_88, wrenable_reg_89, wrenable_reg_9, wrenable_reg_90, wrenable_reg_91, wrenable_reg_92, wrenable_reg_93, wrenable_reg_94, wrenable_reg_95, wrenable_reg_96, wrenable_reg_97, clock, reset, start_port);
  // IN
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_24;
  output wrenable_reg_25;
  output wrenable_reg_26;
  output wrenable_reg_27;
  output wrenable_reg_28;
  output wrenable_reg_29;
  output wrenable_reg_3;
  output wrenable_reg_30;
  output wrenable_reg_31;
  output wrenable_reg_32;
  output wrenable_reg_33;
  output wrenable_reg_34;
  output wrenable_reg_35;
  output wrenable_reg_36;
  output wrenable_reg_37;
  output wrenable_reg_38;
  output wrenable_reg_39;
  output wrenable_reg_4;
  output wrenable_reg_40;
  output wrenable_reg_41;
  output wrenable_reg_42;
  output wrenable_reg_43;
  output wrenable_reg_44;
  output wrenable_reg_45;
  output wrenable_reg_46;
  output wrenable_reg_47;
  output wrenable_reg_48;
  output wrenable_reg_49;
  output wrenable_reg_5;
  output wrenable_reg_50;
  output wrenable_reg_51;
  output wrenable_reg_52;
  output wrenable_reg_53;
  output wrenable_reg_54;
  output wrenable_reg_55;
  output wrenable_reg_56;
  output wrenable_reg_57;
  output wrenable_reg_58;
  output wrenable_reg_59;
  output wrenable_reg_6;
  output wrenable_reg_60;
  output wrenable_reg_61;
  output wrenable_reg_62;
  output wrenable_reg_63;
  output wrenable_reg_64;
  output wrenable_reg_65;
  output wrenable_reg_66;
  output wrenable_reg_67;
  output wrenable_reg_68;
  output wrenable_reg_69;
  output wrenable_reg_7;
  output wrenable_reg_70;
  output wrenable_reg_71;
  output wrenable_reg_72;
  output wrenable_reg_73;
  output wrenable_reg_74;
  output wrenable_reg_75;
  output wrenable_reg_76;
  output wrenable_reg_77;
  output wrenable_reg_78;
  output wrenable_reg_79;
  output wrenable_reg_8;
  output wrenable_reg_80;
  output wrenable_reg_81;
  output wrenable_reg_82;
  output wrenable_reg_83;
  output wrenable_reg_84;
  output wrenable_reg_85;
  output wrenable_reg_86;
  output wrenable_reg_87;
  output wrenable_reg_88;
  output wrenable_reg_89;
  output wrenable_reg_9;
  output wrenable_reg_90;
  output wrenable_reg_91;
  output wrenable_reg_92;
  output wrenable_reg_93;
  output wrenable_reg_94;
  output wrenable_reg_95;
  output wrenable_reg_96;
  output wrenable_reg_97;
  parameter [12:0] S_0 = 13'b0000000000001,
    S_1 = 13'b0000000000010,
    S_2 = 13'b0000000000100,
    S_3 = 13'b0000000001000,
    S_4 = 13'b0000000010000,
    S_5 = 13'b0000000100000,
    S_6 = 13'b0000001000000,
    S_7 = 13'b0000010000000,
    S_8 = 13'b0000100000000,
    S_9 = 13'b0001000000000,
    S_10 = 13'b0010000000000,
    S_11 = 13'b0100000000000,
    S_12 = 13'b1000000000000;
  reg [12:0] _present_state, _next_state;
  reg done_port;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_24;
  reg wrenable_reg_25;
  reg wrenable_reg_26;
  reg wrenable_reg_27;
  reg wrenable_reg_28;
  reg wrenable_reg_29;
  reg wrenable_reg_3;
  reg wrenable_reg_30;
  reg wrenable_reg_31;
  reg wrenable_reg_32;
  reg wrenable_reg_33;
  reg wrenable_reg_34;
  reg wrenable_reg_35;
  reg wrenable_reg_36;
  reg wrenable_reg_37;
  reg wrenable_reg_38;
  reg wrenable_reg_39;
  reg wrenable_reg_4;
  reg wrenable_reg_40;
  reg wrenable_reg_41;
  reg wrenable_reg_42;
  reg wrenable_reg_43;
  reg wrenable_reg_44;
  reg wrenable_reg_45;
  reg wrenable_reg_46;
  reg wrenable_reg_47;
  reg wrenable_reg_48;
  reg wrenable_reg_49;
  reg wrenable_reg_5;
  reg wrenable_reg_50;
  reg wrenable_reg_51;
  reg wrenable_reg_52;
  reg wrenable_reg_53;
  reg wrenable_reg_54;
  reg wrenable_reg_55;
  reg wrenable_reg_56;
  reg wrenable_reg_57;
  reg wrenable_reg_58;
  reg wrenable_reg_59;
  reg wrenable_reg_6;
  reg wrenable_reg_60;
  reg wrenable_reg_61;
  reg wrenable_reg_62;
  reg wrenable_reg_63;
  reg wrenable_reg_64;
  reg wrenable_reg_65;
  reg wrenable_reg_66;
  reg wrenable_reg_67;
  reg wrenable_reg_68;
  reg wrenable_reg_69;
  reg wrenable_reg_7;
  reg wrenable_reg_70;
  reg wrenable_reg_71;
  reg wrenable_reg_72;
  reg wrenable_reg_73;
  reg wrenable_reg_74;
  reg wrenable_reg_75;
  reg wrenable_reg_76;
  reg wrenable_reg_77;
  reg wrenable_reg_78;
  reg wrenable_reg_79;
  reg wrenable_reg_8;
  reg wrenable_reg_80;
  reg wrenable_reg_81;
  reg wrenable_reg_82;
  reg wrenable_reg_83;
  reg wrenable_reg_84;
  reg wrenable_reg_85;
  reg wrenable_reg_86;
  reg wrenable_reg_87;
  reg wrenable_reg_88;
  reg wrenable_reg_89;
  reg wrenable_reg_9;
  reg wrenable_reg_90;
  reg wrenable_reg_91;
  reg wrenable_reg_92;
  reg wrenable_reg_93;
  reg wrenable_reg_94;
  reg wrenable_reg_95;
  reg wrenable_reg_96;
  reg wrenable_reg_97;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_24 = 1'b0;
    wrenable_reg_25 = 1'b0;
    wrenable_reg_26 = 1'b0;
    wrenable_reg_27 = 1'b0;
    wrenable_reg_28 = 1'b0;
    wrenable_reg_29 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_30 = 1'b0;
    wrenable_reg_31 = 1'b0;
    wrenable_reg_32 = 1'b0;
    wrenable_reg_33 = 1'b0;
    wrenable_reg_34 = 1'b0;
    wrenable_reg_35 = 1'b0;
    wrenable_reg_36 = 1'b0;
    wrenable_reg_37 = 1'b0;
    wrenable_reg_38 = 1'b0;
    wrenable_reg_39 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_40 = 1'b0;
    wrenable_reg_41 = 1'b0;
    wrenable_reg_42 = 1'b0;
    wrenable_reg_43 = 1'b0;
    wrenable_reg_44 = 1'b0;
    wrenable_reg_45 = 1'b0;
    wrenable_reg_46 = 1'b0;
    wrenable_reg_47 = 1'b0;
    wrenable_reg_48 = 1'b0;
    wrenable_reg_49 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_50 = 1'b0;
    wrenable_reg_51 = 1'b0;
    wrenable_reg_52 = 1'b0;
    wrenable_reg_53 = 1'b0;
    wrenable_reg_54 = 1'b0;
    wrenable_reg_55 = 1'b0;
    wrenable_reg_56 = 1'b0;
    wrenable_reg_57 = 1'b0;
    wrenable_reg_58 = 1'b0;
    wrenable_reg_59 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_60 = 1'b0;
    wrenable_reg_61 = 1'b0;
    wrenable_reg_62 = 1'b0;
    wrenable_reg_63 = 1'b0;
    wrenable_reg_64 = 1'b0;
    wrenable_reg_65 = 1'b0;
    wrenable_reg_66 = 1'b0;
    wrenable_reg_67 = 1'b0;
    wrenable_reg_68 = 1'b0;
    wrenable_reg_69 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_70 = 1'b0;
    wrenable_reg_71 = 1'b0;
    wrenable_reg_72 = 1'b0;
    wrenable_reg_73 = 1'b0;
    wrenable_reg_74 = 1'b0;
    wrenable_reg_75 = 1'b0;
    wrenable_reg_76 = 1'b0;
    wrenable_reg_77 = 1'b0;
    wrenable_reg_78 = 1'b0;
    wrenable_reg_79 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_80 = 1'b0;
    wrenable_reg_81 = 1'b0;
    wrenable_reg_82 = 1'b0;
    wrenable_reg_83 = 1'b0;
    wrenable_reg_84 = 1'b0;
    wrenable_reg_85 = 1'b0;
    wrenable_reg_86 = 1'b0;
    wrenable_reg_87 = 1'b0;
    wrenable_reg_88 = 1'b0;
    wrenable_reg_89 = 1'b0;
    wrenable_reg_9 = 1'b0;
    wrenable_reg_90 = 1'b0;
    wrenable_reg_91 = 1'b0;
    wrenable_reg_92 = 1'b0;
    wrenable_reg_93 = 1'b0;
    wrenable_reg_94 = 1'b0;
    wrenable_reg_95 = 1'b0;
    wrenable_reg_96 = 1'b0;
    wrenable_reg_97 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          _next_state = S_1;
        end
        else
        begin
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_54 = 1'bX;
          wrenable_reg_55 = 1'bX;
          wrenable_reg_56 = 1'bX;
          wrenable_reg_57 = 1'bX;
          wrenable_reg_58 = 1'bX;
          wrenable_reg_59 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_60 = 1'bX;
          wrenable_reg_61 = 1'bX;
          wrenable_reg_62 = 1'bX;
          wrenable_reg_63 = 1'bX;
          wrenable_reg_64 = 1'bX;
          wrenable_reg_65 = 1'bX;
          wrenable_reg_66 = 1'bX;
          wrenable_reg_67 = 1'bX;
          wrenable_reg_68 = 1'bX;
          wrenable_reg_69 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_70 = 1'bX;
          wrenable_reg_71 = 1'bX;
          wrenable_reg_72 = 1'bX;
          wrenable_reg_73 = 1'bX;
          wrenable_reg_74 = 1'bX;
          wrenable_reg_75 = 1'bX;
          wrenable_reg_76 = 1'bX;
          wrenable_reg_77 = 1'bX;
          wrenable_reg_78 = 1'bX;
          wrenable_reg_79 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_80 = 1'bX;
          wrenable_reg_81 = 1'bX;
          wrenable_reg_82 = 1'bX;
          wrenable_reg_83 = 1'bX;
          wrenable_reg_84 = 1'bX;
          wrenable_reg_85 = 1'bX;
          wrenable_reg_86 = 1'bX;
          wrenable_reg_87 = 1'bX;
          wrenable_reg_88 = 1'bX;
          wrenable_reg_89 = 1'bX;
          wrenable_reg_9 = 1'bX;
          wrenable_reg_90 = 1'bX;
          wrenable_reg_91 = 1'bX;
          wrenable_reg_92 = 1'bX;
          wrenable_reg_93 = 1'bX;
          wrenable_reg_94 = 1'bX;
          wrenable_reg_95 = 1'bX;
          wrenable_reg_96 = 1'bX;
          wrenable_reg_97 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_15 = 1'b1;
          wrenable_reg_16 = 1'b1;
          wrenable_reg_17 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          wrenable_reg_18 = 1'b1;
          wrenable_reg_19 = 1'b1;
          wrenable_reg_20 = 1'b1;
          wrenable_reg_21 = 1'b1;
          wrenable_reg_22 = 1'b1;
          wrenable_reg_23 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_25 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_27 = 1'b1;
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          wrenable_reg_31 = 1'b1;
          wrenable_reg_32 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          wrenable_reg_33 = 1'b1;
          wrenable_reg_34 = 1'b1;
          wrenable_reg_35 = 1'b1;
          wrenable_reg_36 = 1'b1;
          wrenable_reg_37 = 1'b1;
          wrenable_reg_38 = 1'b1;
          wrenable_reg_39 = 1'b1;
          wrenable_reg_40 = 1'b1;
          wrenable_reg_41 = 1'b1;
          wrenable_reg_42 = 1'b1;
          wrenable_reg_43 = 1'b1;
          wrenable_reg_44 = 1'b1;
          wrenable_reg_45 = 1'b1;
          _next_state = S_4;
        end
      S_4 :
        begin
          wrenable_reg_46 = 1'b1;
          wrenable_reg_47 = 1'b1;
          wrenable_reg_48 = 1'b1;
          wrenable_reg_49 = 1'b1;
          wrenable_reg_50 = 1'b1;
          wrenable_reg_51 = 1'b1;
          _next_state = S_5;
        end
      S_5 :
        begin
          wrenable_reg_52 = 1'b1;
          wrenable_reg_53 = 1'b1;
          _next_state = S_6;
        end
      S_6 :
        begin
          wrenable_reg_54 = 1'b1;
          wrenable_reg_55 = 1'b1;
          _next_state = S_7;
        end
      S_7 :
        begin
          wrenable_reg_56 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          wrenable_reg_57 = 1'b1;
          wrenable_reg_58 = 1'b1;
          wrenable_reg_59 = 1'b1;
          wrenable_reg_60 = 1'b1;
          wrenable_reg_61 = 1'b1;
          wrenable_reg_62 = 1'b1;
          wrenable_reg_63 = 1'b1;
          wrenable_reg_64 = 1'b1;
          wrenable_reg_65 = 1'b1;
          wrenable_reg_66 = 1'b1;
          wrenable_reg_67 = 1'b1;
          wrenable_reg_68 = 1'b1;
          wrenable_reg_69 = 1'b1;
          wrenable_reg_70 = 1'b1;
          wrenable_reg_71 = 1'b1;
          wrenable_reg_72 = 1'b1;
          wrenable_reg_73 = 1'b1;
          wrenable_reg_74 = 1'b1;
          wrenable_reg_75 = 1'b1;
          wrenable_reg_76 = 1'b1;
          wrenable_reg_77 = 1'b1;
          wrenable_reg_78 = 1'b1;
          wrenable_reg_79 = 1'b1;
          wrenable_reg_80 = 1'b1;
          wrenable_reg_81 = 1'b1;
          wrenable_reg_82 = 1'b1;
          wrenable_reg_83 = 1'b1;
          _next_state = S_9;
        end
      S_9 :
        begin
          wrenable_reg_84 = 1'b1;
          wrenable_reg_85 = 1'b1;
          wrenable_reg_86 = 1'b1;
          wrenable_reg_87 = 1'b1;
          wrenable_reg_88 = 1'b1;
          wrenable_reg_89 = 1'b1;
          _next_state = S_10;
        end
      S_10 :
        begin
          wrenable_reg_90 = 1'b1;
          wrenable_reg_91 = 1'b1;
          wrenable_reg_92 = 1'b1;
          wrenable_reg_93 = 1'b1;
          wrenable_reg_94 = 1'b1;
          wrenable_reg_95 = 1'b1;
          _next_state = S_11;
        end
      S_11 :
        begin
          wrenable_reg_96 = 1'b1;
          wrenable_reg_97 = 1'b1;
          _next_state = S_12;
          done_port = 1'b1;
        end
      S_12 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_54 = 1'bX;
          wrenable_reg_55 = 1'bX;
          wrenable_reg_56 = 1'bX;
          wrenable_reg_57 = 1'bX;
          wrenable_reg_58 = 1'bX;
          wrenable_reg_59 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_60 = 1'bX;
          wrenable_reg_61 = 1'bX;
          wrenable_reg_62 = 1'bX;
          wrenable_reg_63 = 1'bX;
          wrenable_reg_64 = 1'bX;
          wrenable_reg_65 = 1'bX;
          wrenable_reg_66 = 1'bX;
          wrenable_reg_67 = 1'bX;
          wrenable_reg_68 = 1'bX;
          wrenable_reg_69 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_70 = 1'bX;
          wrenable_reg_71 = 1'bX;
          wrenable_reg_72 = 1'bX;
          wrenable_reg_73 = 1'bX;
          wrenable_reg_74 = 1'bX;
          wrenable_reg_75 = 1'bX;
          wrenable_reg_76 = 1'bX;
          wrenable_reg_77 = 1'bX;
          wrenable_reg_78 = 1'bX;
          wrenable_reg_79 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_80 = 1'bX;
          wrenable_reg_81 = 1'bX;
          wrenable_reg_82 = 1'bX;
          wrenable_reg_83 = 1'bX;
          wrenable_reg_84 = 1'bX;
          wrenable_reg_85 = 1'bX;
          wrenable_reg_86 = 1'bX;
          wrenable_reg_87 = 1'bX;
          wrenable_reg_88 = 1'bX;
          wrenable_reg_89 = 1'bX;
          wrenable_reg_9 = 1'bX;
          wrenable_reg_90 = 1'bX;
          wrenable_reg_91 = 1'bX;
          wrenable_reg_92 = 1'bX;
          wrenable_reg_93 = 1'bX;
          wrenable_reg_94 = 1'bX;
          wrenable_reg_95 = 1'bX;
          wrenable_reg_96 = 1'bX;
          wrenable_reg_97 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_addif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_addif(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output [63:0] return_port;
  // Component and signal declarations
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire [63:0] in_port_a_SIGI1;
  wire [63:0] in_port_a_SIGI2;
  wire [63:0] in_port_b_SIGI1;
  wire [63:0] in_port_b_SIGI2;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_24;
  wire wrenable_reg_25;
  wire wrenable_reg_26;
  wire wrenable_reg_27;
  wire wrenable_reg_28;
  wire wrenable_reg_29;
  wire wrenable_reg_3;
  wire wrenable_reg_30;
  wire wrenable_reg_31;
  wire wrenable_reg_32;
  wire wrenable_reg_33;
  wire wrenable_reg_34;
  wire wrenable_reg_35;
  wire wrenable_reg_36;
  wire wrenable_reg_37;
  wire wrenable_reg_38;
  wire wrenable_reg_39;
  wire wrenable_reg_4;
  wire wrenable_reg_40;
  wire wrenable_reg_41;
  wire wrenable_reg_42;
  wire wrenable_reg_43;
  wire wrenable_reg_44;
  wire wrenable_reg_45;
  wire wrenable_reg_46;
  wire wrenable_reg_47;
  wire wrenable_reg_48;
  wire wrenable_reg_49;
  wire wrenable_reg_5;
  wire wrenable_reg_50;
  wire wrenable_reg_51;
  wire wrenable_reg_52;
  wire wrenable_reg_53;
  wire wrenable_reg_54;
  wire wrenable_reg_55;
  wire wrenable_reg_56;
  wire wrenable_reg_57;
  wire wrenable_reg_58;
  wire wrenable_reg_59;
  wire wrenable_reg_6;
  wire wrenable_reg_60;
  wire wrenable_reg_61;
  wire wrenable_reg_62;
  wire wrenable_reg_63;
  wire wrenable_reg_64;
  wire wrenable_reg_65;
  wire wrenable_reg_66;
  wire wrenable_reg_67;
  wire wrenable_reg_68;
  wire wrenable_reg_69;
  wire wrenable_reg_7;
  wire wrenable_reg_70;
  wire wrenable_reg_71;
  wire wrenable_reg_72;
  wire wrenable_reg_73;
  wire wrenable_reg_74;
  wire wrenable_reg_75;
  wire wrenable_reg_76;
  wire wrenable_reg_77;
  wire wrenable_reg_78;
  wire wrenable_reg_79;
  wire wrenable_reg_8;
  wire wrenable_reg_80;
  wire wrenable_reg_81;
  wire wrenable_reg_82;
  wire wrenable_reg_83;
  wire wrenable_reg_84;
  wire wrenable_reg_85;
  wire wrenable_reg_86;
  wire wrenable_reg_87;
  wire wrenable_reg_88;
  wire wrenable_reg_89;
  wire wrenable_reg_9;
  wire wrenable_reg_90;
  wire wrenable_reg_91;
  wire wrenable_reg_92;
  wire wrenable_reg_93;
  wire wrenable_reg_94;
  wire wrenable_reg_95;
  wire wrenable_reg_96;
  wire wrenable_reg_97;
  
  controller___float64_addif Controller_i (.done_port(done_delayed_REG_signal_in), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_54(wrenable_reg_54), .wrenable_reg_55(wrenable_reg_55), .wrenable_reg_56(wrenable_reg_56), .wrenable_reg_57(wrenable_reg_57), .wrenable_reg_58(wrenable_reg_58), .wrenable_reg_59(wrenable_reg_59), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_60(wrenable_reg_60), .wrenable_reg_61(wrenable_reg_61), .wrenable_reg_62(wrenable_reg_62), .wrenable_reg_63(wrenable_reg_63), .wrenable_reg_64(wrenable_reg_64), .wrenable_reg_65(wrenable_reg_65), .wrenable_reg_66(wrenable_reg_66), .wrenable_reg_67(wrenable_reg_67), .wrenable_reg_68(wrenable_reg_68), .wrenable_reg_69(wrenable_reg_69), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_70(wrenable_reg_70), .wrenable_reg_71(wrenable_reg_71), .wrenable_reg_72(wrenable_reg_72), .wrenable_reg_73(wrenable_reg_73), .wrenable_reg_74(wrenable_reg_74), .wrenable_reg_75(wrenable_reg_75), .wrenable_reg_76(wrenable_reg_76), .wrenable_reg_77(wrenable_reg_77), .wrenable_reg_78(wrenable_reg_78), .wrenable_reg_79(wrenable_reg_79), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_80(wrenable_reg_80), .wrenable_reg_81(wrenable_reg_81), .wrenable_reg_82(wrenable_reg_82), .wrenable_reg_83(wrenable_reg_83), .wrenable_reg_84(wrenable_reg_84), .wrenable_reg_85(wrenable_reg_85), .wrenable_reg_86(wrenable_reg_86), .wrenable_reg_87(wrenable_reg_87), .wrenable_reg_88(wrenable_reg_88), .wrenable_reg_89(wrenable_reg_89), .wrenable_reg_9(wrenable_reg_9), .wrenable_reg_90(wrenable_reg_90), .wrenable_reg_91(wrenable_reg_91), .wrenable_reg_92(wrenable_reg_92), .wrenable_reg_93(wrenable_reg_93), .wrenable_reg_94(wrenable_reg_94), .wrenable_reg_95(wrenable_reg_95), .wrenable_reg_96(wrenable_reg_96), .wrenable_reg_97(wrenable_reg_97), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_addif Datapath_i (.return_port(return_port), .clock(clock), .reset(reset), .in_port_a(in_port_a_SIGI2), .in_port_b(in_port_b_SIGI2), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_54(wrenable_reg_54), .wrenable_reg_55(wrenable_reg_55), .wrenable_reg_56(wrenable_reg_56), .wrenable_reg_57(wrenable_reg_57), .wrenable_reg_58(wrenable_reg_58), .wrenable_reg_59(wrenable_reg_59), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_60(wrenable_reg_60), .wrenable_reg_61(wrenable_reg_61), .wrenable_reg_62(wrenable_reg_62), .wrenable_reg_63(wrenable_reg_63), .wrenable_reg_64(wrenable_reg_64), .wrenable_reg_65(wrenable_reg_65), .wrenable_reg_66(wrenable_reg_66), .wrenable_reg_67(wrenable_reg_67), .wrenable_reg_68(wrenable_reg_68), .wrenable_reg_69(wrenable_reg_69), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_70(wrenable_reg_70), .wrenable_reg_71(wrenable_reg_71), .wrenable_reg_72(wrenable_reg_72), .wrenable_reg_73(wrenable_reg_73), .wrenable_reg_74(wrenable_reg_74), .wrenable_reg_75(wrenable_reg_75), .wrenable_reg_76(wrenable_reg_76), .wrenable_reg_77(wrenable_reg_77), .wrenable_reg_78(wrenable_reg_78), .wrenable_reg_79(wrenable_reg_79), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_80(wrenable_reg_80), .wrenable_reg_81(wrenable_reg_81), .wrenable_reg_82(wrenable_reg_82), .wrenable_reg_83(wrenable_reg_83), .wrenable_reg_84(wrenable_reg_84), .wrenable_reg_85(wrenable_reg_85), .wrenable_reg_86(wrenable_reg_86), .wrenable_reg_87(wrenable_reg_87), .wrenable_reg_88(wrenable_reg_88), .wrenable_reg_89(wrenable_reg_89), .wrenable_reg_9(wrenable_reg_9), .wrenable_reg_90(wrenable_reg_90), .wrenable_reg_91(wrenable_reg_91), .wrenable_reg_92(wrenable_reg_92), .wrenable_reg_93(wrenable_reg_93), .wrenable_reg_94(wrenable_reg_94), .wrenable_reg_95(wrenable_reg_95), .wrenable_reg_96(wrenable_reg_96), .wrenable_reg_97(wrenable_reg_97));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_a_REG (.out1(in_port_a_SIGI2), .clock(clock), .reset(reset), .in1(in_port_a_SIGI1));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) in_port_b_REG (.out1(in_port_b_SIGI2), .clock(clock), .reset(reset), .in1(in_port_b_SIGI1));
  // io-signal post fix
  assign in_port_a_SIGI1 = a;
  assign in_port_b_SIGI1 = b;
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Datapath RTL description for __float64_geif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_geif(clock, reset, in_port_a, in_port_b, return_port, selector_MUX_13_gimple_return_FU_9_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, OUT_MULTIIF___float64_geif_18111_31464);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input selector_MUX_13_gimple_return_FU_9_i0_0_0_0;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_2;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  // OUT
  output return_port;
  output OUT_MULTIIF___float64_geif_18111_31464;
  // Component and signal declarations
  wire out_MUX_13_gimple_return_FU_9_i0_0_0_0;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_geif_18111_18119;
  wire signed [11:0] out_UIdata_converter_FU_5_i0_fu___float64_geif_18111_18125;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_10_i0_fu___float64_geif_18111_18120;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_10_i1_fu___float64_geif_18111_18126;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [6:0] out_const_2;
  wire [11:0] out_const_3;
  wire out_const_4;
  wire [5:0] out_const_5;
  wire [51:0] out_const_6;
  wire out_eq_expr_FU_16_0_16_11_i0_fu___float64_geif_18111_29818;
  wire out_eq_expr_FU_16_0_16_11_i1_fu___float64_geif_18111_29822;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117;
  wire out_multi_read_cond_FU_8_i0_fu___float64_geif_18111_31464;
  wire [63:0] out_reg_0_reg_0;
  wire [63:0] out_reg_1_reg_1;
  wire out_reg_2_reg_2;
  wire out_reg_3_reg_3;
  wire out_reg_4_reg_4;
  wire out_reg_5_reg_5;
  wire out_truth_and_expr_FU_1_1_1_12_i0_fu___float64_geif_18111_31463;
  wire out_truth_and_expr_FU_1_1_1_12_i1_fu___float64_geif_18111_31470;
  wire out_truth_and_expr_FU_1_1_1_12_i2_fu___float64_geif_18111_31477;
  wire out_truth_and_expr_FU_1_1_1_12_i3_fu___float64_geif_18111_31481;
  wire out_truth_and_expr_FU_1_1_1_12_i4_fu___float64_geif_18111_31487;
  wire out_truth_not_expr_FU_1_1_13_i0_fu___float64_geif_18111_31460;
  wire out_truth_not_expr_FU_1_1_13_i3_fu___float64_geif_18111_31484;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_14_i0_fu___float64_geif_18111_18122;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_14_i1_fu___float64_geif_18111_18128;
  wire [62:0] out_ui_bit_ior_expr_FU_64_64_64_15_i0_fu___float64_geif_18111_18136;
  wire [0:0] out_ui_bit_xor_expr_FU_1_1_1_16_i0_fu___float64_geif_18111_18144;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_17_i0_fu___float64_geif_18111_31488;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_17_i1_fu___float64_geif_18111_31491;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_17_i2_fu___float64_geif_18111_31494;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_17_i3_fu___float64_geif_18111_31497;
  wire out_ui_eq_expr_FU_64_0_64_18_i0_fu___float64_geif_18111_18138;
  wire out_ui_eq_expr_FU_64_64_64_19_i0_fu___float64_geif_18111_29830;
  wire out_ui_extract_bit_expr_FU_6_i0_fu___float64_geif_18111_30308;
  wire out_ui_extract_bit_expr_FU_7_i0_fu___float64_geif_18111_30312;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_20_i0_fu___float64_geif_18111_18137;
  wire out_ui_lt_expr_FU_64_64_64_21_i0_fu___float64_geif_18111_18142;
  wire out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_geif_18111_29826;
  wire out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_geif_18111_29820;
  wire out_ui_ne_expr_FU_64_0_64_23_i1_fu___float64_geif_18111_29824;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_24_i0_fu___float64_geif_18111_18118;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_24_i1_fu___float64_geif_18111_18124;
  wire [62:0] out_ui_rshift_expr_FU_64_0_64_25_i0_fu___float64_geif_18111_30303;
  
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) MUX_13_gimple_return_FU_9_i0_0_0_0 (.out1(out_MUX_13_gimple_return_FU_9_i0_0_0_0), .sel(selector_MUX_13_gimple_return_FU_9_i0_0_0_0), .in1(out_const_0), .in2(out_ui_cond_expr_FU_1_1_1_1_17_i3_fu___float64_geif_18111_31497));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_6 (.out1(out_const_6));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_geif_18111_18116 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_geif_18111_18117 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117), .in1(in_port_b));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_geif_18111_18118 (.out1(out_ui_rshift_expr_FU_64_0_64_24_i0_fu___float64_geif_18111_18118), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117), .in2(out_const_2));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_geif_18111_18119 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_geif_18111_18119), .in1(out_ui_rshift_expr_FU_64_0_64_24_i0_fu___float64_geif_18111_18118));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_geif_18111_18120 (.out1(out_bit_and_expr_FU_16_0_16_10_i0_fu___float64_geif_18111_18120), .in1(out_UIdata_converter_FU_4_i0_fu___float64_geif_18111_18119), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_geif_18111_18122 (.out1(out_ui_bit_and_expr_FU_64_0_64_14_i0_fu___float64_geif_18111_18122), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_geif_18111_18124 (.out1(out_ui_rshift_expr_FU_64_0_64_24_i1_fu___float64_geif_18111_18124), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116), .in2(out_const_2));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_geif_18111_18125 (.out1(out_UIdata_converter_FU_5_i0_fu___float64_geif_18111_18125), .in1(out_ui_rshift_expr_FU_64_0_64_24_i1_fu___float64_geif_18111_18124));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_geif_18111_18126 (.out1(out_bit_and_expr_FU_16_0_16_10_i1_fu___float64_geif_18111_18126), .in1(out_UIdata_converter_FU_5_i0_fu___float64_geif_18111_18125), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_geif_18111_18128 (.out1(out_ui_bit_and_expr_FU_64_0_64_14_i1_fu___float64_geif_18111_18128), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116), .in2(out_const_6));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(63)) fu___float64_geif_18111_18136 (.out1(out_ui_bit_ior_expr_FU_64_64_64_15_i0_fu___float64_geif_18111_18136), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116), .in2(out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(2), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_geif_18111_18137 (.out1(out_ui_lshift_expr_FU_64_0_64_20_i0_fu___float64_geif_18111_18137), .in1(out_ui_bit_ior_expr_FU_64_64_64_15_i0_fu___float64_geif_18111_18136), .in2(out_const_1));
  ui_eq_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_18138 (.out1(out_ui_eq_expr_FU_64_0_64_18_i0_fu___float64_geif_18111_18138), .in1(out_ui_rshift_expr_FU_64_0_64_25_i0_fu___float64_geif_18111_30303), .in2(out_const_0));
  ui_lt_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_geif_18111_18142 (.out1(out_ui_lt_expr_FU_64_64_64_21_i0_fu___float64_geif_18111_18142), .in1(out_reg_1_reg_1), .in2(out_reg_0_reg_0));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_18144 (.out1(out_ui_bit_xor_expr_FU_1_1_1_16_i0_fu___float64_geif_18111_18144), .in1(out_reg_2_reg_2), .in2(out_ui_lt_expr_FU_64_64_64_21_i0_fu___float64_geif_18111_18142));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_geif_18111_29818 (.out1(out_eq_expr_FU_16_0_16_11_i0_fu___float64_geif_18111_29818), .in1(out_bit_and_expr_FU_16_0_16_10_i0_fu___float64_geif_18111_18120), .in2(out_const_3));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_29820 (.out1(out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_geif_18111_29820), .in1(out_ui_bit_and_expr_FU_64_0_64_14_i0_fu___float64_geif_18111_18122), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_geif_18111_29822 (.out1(out_eq_expr_FU_16_0_16_11_i1_fu___float64_geif_18111_29822), .in1(out_bit_and_expr_FU_16_0_16_10_i1_fu___float64_geif_18111_18126), .in2(out_const_3));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_29824 (.out1(out_ui_ne_expr_FU_64_0_64_23_i1_fu___float64_geif_18111_29824), .in1(out_ui_bit_and_expr_FU_64_0_64_14_i1_fu___float64_geif_18111_18128), .in2(out_const_0));
  ui_ne_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_29826 (.out1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_geif_18111_29826), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_geif_18111_30308), .in2(out_ui_extract_bit_expr_FU_7_i0_fu___float64_geif_18111_30312));
  ui_eq_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_geif_18111_29830 (.out1(out_ui_eq_expr_FU_64_64_64_19_i0_fu___float64_geif_18111_29830), .in1(out_reg_1_reg_1), .in2(out_reg_0_reg_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_geif_18111_30303 (.out1(out_ui_rshift_expr_FU_64_0_64_25_i0_fu___float64_geif_18111_30303), .in1(out_ui_lshift_expr_FU_64_0_64_20_i0_fu___float64_geif_18111_18137), .in2(out_const_4));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_geif_18111_30308 (.out1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_geif_18111_30308), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117), .in2(out_const_5));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_geif_18111_30312 (.out1(out_ui_extract_bit_expr_FU_7_i0_fu___float64_geif_18111_30312), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116), .in2(out_const_5));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31460 (.out1(out_truth_not_expr_FU_1_1_13_i0_fu___float64_geif_18111_31460), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_geif_18111_29826));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31463 (.out1(out_truth_and_expr_FU_1_1_1_12_i0_fu___float64_geif_18111_31463), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_geif_18111_29826), .in2(out_ui_extract_bit_expr_FU_6_i0_fu___float64_geif_18111_30308));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31464 (.out1(out_multi_read_cond_FU_8_i0_fu___float64_geif_18111_31464), .in1({out_truth_and_expr_FU_1_1_1_12_i1_fu___float64_geif_18111_31470}));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31467 (.in1(out_eq_expr_FU_16_0_16_11_i0_fu___float64_geif_18111_29818));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31470 (.out1(out_truth_and_expr_FU_1_1_1_12_i1_fu___float64_geif_18111_31470), .in1(out_eq_expr_FU_16_0_16_11_i0_fu___float64_geif_18111_29818), .in2(out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_geif_18111_29820));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31474 (.in1(out_eq_expr_FU_16_0_16_11_i1_fu___float64_geif_18111_29822));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31477 (.out1(out_truth_and_expr_FU_1_1_1_12_i2_fu___float64_geif_18111_31477), .in1(out_eq_expr_FU_16_0_16_11_i1_fu___float64_geif_18111_29822), .in2(out_ui_ne_expr_FU_64_0_64_23_i1_fu___float64_geif_18111_29824));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31481 (.out1(out_truth_and_expr_FU_1_1_1_12_i3_fu___float64_geif_18111_31481), .in1(out_reg_3_reg_3), .in2(out_ui_eq_expr_FU_64_64_64_19_i0_fu___float64_geif_18111_29830));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31484 (.out1(out_truth_not_expr_FU_1_1_13_i3_fu___float64_geif_18111_31484), .in1(out_ui_eq_expr_FU_64_64_64_19_i0_fu___float64_geif_18111_29830));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31487 (.out1(out_truth_and_expr_FU_1_1_1_12_i4_fu___float64_geif_18111_31487), .in1(out_reg_3_reg_3), .in2(out_truth_not_expr_FU_1_1_13_i3_fu___float64_geif_18111_31484));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31488 (.out1(out_ui_cond_expr_FU_1_1_1_1_17_i0_fu___float64_geif_18111_31488), .in1(out_truth_and_expr_FU_1_1_1_12_i0_fu___float64_geif_18111_31463), .in2(out_ui_extract_bit_expr_FU_6_i0_fu___float64_geif_18111_30308), .in3(out_ui_eq_expr_FU_64_0_64_18_i0_fu___float64_geif_18111_18138));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31491 (.out1(out_ui_cond_expr_FU_1_1_1_1_17_i1_fu___float64_geif_18111_31491), .in1(out_truth_and_expr_FU_1_1_1_12_i4_fu___float64_geif_18111_31487), .in2(out_ui_bit_xor_expr_FU_1_1_1_16_i0_fu___float64_geif_18111_18144), .in3(out_reg_5_reg_5));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31494 (.out1(out_ui_cond_expr_FU_1_1_1_1_17_i2_fu___float64_geif_18111_31494), .in1(out_truth_and_expr_FU_1_1_1_12_i3_fu___float64_geif_18111_31481), .in2(out_const_4), .in3(out_ui_cond_expr_FU_1_1_1_1_17_i1_fu___float64_geif_18111_31491));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_geif_18111_31497 (.out1(out_ui_cond_expr_FU_1_1_1_1_17_i3_fu___float64_geif_18111_31497), .in1(out_reg_4_reg_4), .in2(out_const_0), .in3(out_ui_cond_expr_FU_1_1_1_1_17_i2_fu___float64_geif_18111_31494));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_geif_18111_18116), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_geif_18111_18117), .wenable(wrenable_reg_1));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_geif_18111_30308), .wenable(wrenable_reg_2));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_13_i0_fu___float64_geif_18111_31460), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_12_i2_fu___float64_geif_18111_31477), .wenable(wrenable_reg_4));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_17_i0_fu___float64_geif_18111_31488), .wenable(wrenable_reg_5));
  // io-signal post fix
  assign return_port = out_MUX_13_gimple_return_FU_9_i0_0_0_0;
  assign OUT_MULTIIF___float64_geif_18111_31464 = out_multi_read_cond_FU_8_i0_fu___float64_geif_18111_31464;

endmodule

// FSM based controller description for __float64_geif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_geif(done_port, selector_MUX_13_gimple_return_FU_9_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, OUT_MULTIIF___float64_geif_18111_31464, clock, reset, start_port);
  // IN
  input OUT_MULTIIF___float64_geif_18111_31464;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_MUX_13_gimple_return_FU_9_i0_0_0_0;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_2;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  parameter [2:0] S_0 = 3'b001,
    S_2 = 3'b100,
    S_1 = 3'b010;
  reg [2:0] _present_state, _next_state;
  reg done_port;
  reg selector_MUX_13_gimple_return_FU_9_i0_0_0_0;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_2;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_MUX_13_gimple_return_FU_9_i0_0_0_0 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          if (OUT_MULTIIF___float64_geif_18111_31464 == 1'b1)
            begin
              _next_state = S_2;
              done_port = 1'b1;
              wrenable_reg_0 = 1'b0;
              wrenable_reg_1 = 1'b0;
              wrenable_reg_2 = 1'b0;
              wrenable_reg_3 = 1'b0;
              wrenable_reg_4 = 1'b0;
              wrenable_reg_5 = 1'b0;
            end
          else
            begin
              _next_state = S_1;
              done_port = 1'b1;
            end
        end
        else
        begin
          selector_MUX_13_gimple_return_FU_9_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          _next_state = S_0;
        end
      S_2 :
        begin
          selector_MUX_13_gimple_return_FU_9_i0_0_0_0 = 1'b1;
          _next_state = S_0;
        end
      S_1 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_13_gimple_return_FU_9_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_geif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_geif(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output return_port;
  // Component and signal declarations
  wire OUT_MULTIIF___float64_geif_18111_31464;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire selector_MUX_13_gimple_return_FU_9_i0_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  
  controller___float64_geif Controller_i (.done_port(done_delayed_REG_signal_in), .selector_MUX_13_gimple_return_FU_9_i0_0_0_0(selector_MUX_13_gimple_return_FU_9_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .OUT_MULTIIF___float64_geif_18111_31464(OUT_MULTIIF___float64_geif_18111_31464), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_geif Datapath_i (.return_port(return_port), .OUT_MULTIIF___float64_geif_18111_31464(OUT_MULTIIF___float64_geif_18111_31464), .clock(clock), .reset(reset), .in_port_a(a), .in_port_b(b), .selector_MUX_13_gimple_return_FU_9_i0_0_0_0(selector_MUX_13_gimple_return_FU_9_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Datapath RTL description for __float64_gtif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_gtif(clock, reset, in_port_a, in_port_b, return_port, selector_MUX_15_gimple_return_FU_10_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_MULTIIF___float64_gtif_18209_31502);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_2;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output return_port;
  output OUT_MULTIIF___float64_gtif_18209_31502;
  // Component and signal declarations
  wire out_MUX_15_gimple_return_FU_10_i0_0_0_0;
  wire signed [1:0] out_UIconvert_expr_FU_8_i0_fu___float64_gtif_18209_18239;
  wire signed [1:0] out_UIdata_converter_FU_11_i0_fu___float64_gtif_18209_18241;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_gtif_18209_18217;
  wire signed [11:0] out_UIdata_converter_FU_5_i0_fu___float64_gtif_18209_18223;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_12_i0_fu___float64_gtif_18209_18218;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_12_i1_fu___float64_gtif_18209_18224;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [6:0] out_const_2;
  wire [11:0] out_const_3;
  wire out_const_4;
  wire [5:0] out_const_5;
  wire [51:0] out_const_6;
  wire out_eq_expr_FU_16_0_16_13_i0_fu___float64_gtif_18209_29832;
  wire out_eq_expr_FU_16_0_16_13_i1_fu___float64_gtif_18209_29836;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215;
  wire out_multi_read_cond_FU_9_i0_fu___float64_gtif_18209_31502;
  wire out_ne_expr_FU_8_8_8_14_i0_fu___float64_gtif_18209_18242;
  wire [63:0] out_reg_0_reg_0;
  wire [63:0] out_reg_1_reg_1;
  wire [1:0] out_reg_2_reg_2;
  wire out_reg_3_reg_3;
  wire out_reg_4_reg_4;
  wire out_reg_5_reg_5;
  wire out_reg_6_reg_6;
  wire out_reg_7_reg_7;
  wire out_reg_8_reg_8;
  wire out_reg_9_reg_9;
  wire out_truth_and_expr_FU_1_1_1_15_i0_fu___float64_gtif_18209_31508;
  wire out_truth_and_expr_FU_1_1_1_15_i1_fu___float64_gtif_18209_31515;
  wire out_truth_and_expr_FU_1_1_1_15_i2_fu___float64_gtif_18209_31522;
  wire out_truth_and_expr_FU_1_1_1_15_i3_fu___float64_gtif_18209_31526;
  wire out_truth_and_expr_FU_1_1_1_15_i4_fu___float64_gtif_18209_31532;
  wire out_truth_not_expr_FU_1_1_16_i0_fu___float64_gtif_18209_31519;
  wire out_truth_not_expr_FU_1_1_16_i1_fu___float64_gtif_18209_31529;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_17_i0_fu___float64_gtif_18209_18220;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_17_i1_fu___float64_gtif_18209_18226;
  wire [62:0] out_ui_bit_ior_expr_FU_64_64_64_18_i0_fu___float64_gtif_18209_18234;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i0_fu___float64_gtif_18209_31533;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i1_fu___float64_gtif_18209_31536;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i2_fu___float64_gtif_18209_31539;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i3_fu___float64_gtif_18209_31542;
  wire out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676;
  wire out_ui_extract_bit_expr_FU_7_i0_fu___float64_gtif_18209_31680;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_20_i0_fu___float64_gtif_18209_18235;
  wire out_ui_lt_expr_FU_64_64_64_21_i0_fu___float64_gtif_18209_18240;
  wire out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_gtif_18209_29840;
  wire out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_gtif_18209_18236;
  wire out_ui_ne_expr_FU_64_0_64_24_i0_fu___float64_gtif_18209_29834;
  wire out_ui_ne_expr_FU_64_0_64_24_i1_fu___float64_gtif_18209_29838;
  wire out_ui_ne_expr_FU_64_64_64_25_i0_fu___float64_gtif_18209_29844;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_26_i0_fu___float64_gtif_18209_18216;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_26_i1_fu___float64_gtif_18209_18222;
  wire [62:0] out_ui_rshift_expr_FU_64_0_64_27_i0_fu___float64_gtif_18209_30325;
  
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) MUX_15_gimple_return_FU_10_i0_0_0_0 (.out1(out_MUX_15_gimple_return_FU_10_i0_0_0_0), .sel(selector_MUX_15_gimple_return_FU_10_i0_0_0_0), .in1(out_const_0), .in2(out_ui_cond_expr_FU_1_1_1_1_19_i3_fu___float64_gtif_18209_31542));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_6 (.out1(out_const_6));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_gtif_18209_18214 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_gtif_18209_18215 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215), .in1(in_port_b));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_gtif_18209_18216 (.out1(out_ui_rshift_expr_FU_64_0_64_26_i0_fu___float64_gtif_18209_18216), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215), .in2(out_const_2));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_gtif_18209_18217 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_gtif_18209_18217), .in1(out_ui_rshift_expr_FU_64_0_64_26_i0_fu___float64_gtif_18209_18216));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_gtif_18209_18218 (.out1(out_bit_and_expr_FU_16_0_16_12_i0_fu___float64_gtif_18209_18218), .in1(out_UIdata_converter_FU_4_i0_fu___float64_gtif_18209_18217), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_gtif_18209_18220 (.out1(out_ui_bit_and_expr_FU_64_0_64_17_i0_fu___float64_gtif_18209_18220), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_gtif_18209_18222 (.out1(out_ui_rshift_expr_FU_64_0_64_26_i1_fu___float64_gtif_18209_18222), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214), .in2(out_const_2));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_gtif_18209_18223 (.out1(out_UIdata_converter_FU_5_i0_fu___float64_gtif_18209_18223), .in1(out_ui_rshift_expr_FU_64_0_64_26_i1_fu___float64_gtif_18209_18222));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_gtif_18209_18224 (.out1(out_bit_and_expr_FU_16_0_16_12_i1_fu___float64_gtif_18209_18224), .in1(out_UIdata_converter_FU_5_i0_fu___float64_gtif_18209_18223), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_gtif_18209_18226 (.out1(out_ui_bit_and_expr_FU_64_0_64_17_i1_fu___float64_gtif_18209_18226), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214), .in2(out_const_6));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(63)) fu___float64_gtif_18209_18234 (.out1(out_ui_bit_ior_expr_FU_64_64_64_18_i0_fu___float64_gtif_18209_18234), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214), .in2(out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(2), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_gtif_18209_18235 (.out1(out_ui_lshift_expr_FU_64_0_64_20_i0_fu___float64_gtif_18209_18235), .in1(out_ui_bit_ior_expr_FU_64_64_64_18_i0_fu___float64_gtif_18209_18234), .in2(out_const_1));
  ui_ne_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_18236 (.out1(out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_gtif_18209_18236), .in1(out_ui_rshift_expr_FU_64_0_64_27_i0_fu___float64_gtif_18209_30325), .in2(out_const_0));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_gtif_18209_18239 (.out1(out_UIconvert_expr_FU_8_i0_fu___float64_gtif_18209_18239), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676));
  ui_lt_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_gtif_18209_18240 (.out1(out_ui_lt_expr_FU_64_64_64_21_i0_fu___float64_gtif_18209_18240), .in1(out_reg_1_reg_1), .in2(out_reg_0_reg_0));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_gtif_18209_18241 (.out1(out_UIdata_converter_FU_11_i0_fu___float64_gtif_18209_18241), .in1(out_ui_lt_expr_FU_64_64_64_21_i0_fu___float64_gtif_18209_18240));
  ne_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_gtif_18209_18242 (.out1(out_ne_expr_FU_8_8_8_14_i0_fu___float64_gtif_18209_18242), .in1(out_reg_2_reg_2), .in2(out_UIdata_converter_FU_11_i0_fu___float64_gtif_18209_18241));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_gtif_18209_29832 (.out1(out_eq_expr_FU_16_0_16_13_i0_fu___float64_gtif_18209_29832), .in1(out_bit_and_expr_FU_16_0_16_12_i0_fu___float64_gtif_18209_18218), .in2(out_const_3));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_29834 (.out1(out_ui_ne_expr_FU_64_0_64_24_i0_fu___float64_gtif_18209_29834), .in1(out_ui_bit_and_expr_FU_64_0_64_17_i0_fu___float64_gtif_18209_18220), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_gtif_18209_29836 (.out1(out_eq_expr_FU_16_0_16_13_i1_fu___float64_gtif_18209_29836), .in1(out_bit_and_expr_FU_16_0_16_12_i1_fu___float64_gtif_18209_18224), .in2(out_const_3));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_29838 (.out1(out_ui_ne_expr_FU_64_0_64_24_i1_fu___float64_gtif_18209_29838), .in1(out_ui_bit_and_expr_FU_64_0_64_17_i1_fu___float64_gtif_18209_18226), .in2(out_const_0));
  ui_ne_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_29840 (.out1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_gtif_18209_29840), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676), .in2(out_ui_extract_bit_expr_FU_7_i0_fu___float64_gtif_18209_31680));
  ui_ne_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_gtif_18209_29844 (.out1(out_ui_ne_expr_FU_64_64_64_25_i0_fu___float64_gtif_18209_29844), .in1(out_reg_1_reg_1), .in2(out_reg_0_reg_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_gtif_18209_30325 (.out1(out_ui_rshift_expr_FU_64_0_64_27_i0_fu___float64_gtif_18209_30325), .in1(out_ui_lshift_expr_FU_64_0_64_20_i0_fu___float64_gtif_18209_18235), .in2(out_const_4));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31502 (.out1(out_multi_read_cond_FU_9_i0_fu___float64_gtif_18209_31502), .in1({out_truth_and_expr_FU_1_1_1_15_i0_fu___float64_gtif_18209_31508}));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31508 (.out1(out_truth_and_expr_FU_1_1_1_15_i0_fu___float64_gtif_18209_31508), .in1(out_eq_expr_FU_16_0_16_13_i0_fu___float64_gtif_18209_29832), .in2(out_ui_ne_expr_FU_64_0_64_24_i0_fu___float64_gtif_18209_29834));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31515 (.out1(out_truth_and_expr_FU_1_1_1_15_i1_fu___float64_gtif_18209_31515), .in1(out_eq_expr_FU_16_0_16_13_i1_fu___float64_gtif_18209_29836), .in2(out_ui_ne_expr_FU_64_0_64_24_i1_fu___float64_gtif_18209_29838));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31519 (.out1(out_truth_not_expr_FU_1_1_16_i0_fu___float64_gtif_18209_31519), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_gtif_18209_29840));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31522 (.out1(out_truth_and_expr_FU_1_1_1_15_i2_fu___float64_gtif_18209_31522), .in1(out_ui_ne_expr_FU_64_64_64_25_i0_fu___float64_gtif_18209_29844), .in2(out_reg_4_reg_4));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31526 (.out1(out_truth_and_expr_FU_1_1_1_15_i3_fu___float64_gtif_18209_31526), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_gtif_18209_29840), .in2(out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31529 (.out1(out_truth_not_expr_FU_1_1_16_i1_fu___float64_gtif_18209_31529), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31532 (.out1(out_truth_and_expr_FU_1_1_1_15_i4_fu___float64_gtif_18209_31532), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_gtif_18209_29840), .in2(out_truth_not_expr_FU_1_1_16_i1_fu___float64_gtif_18209_31529));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31533 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i0_fu___float64_gtif_18209_31533), .in1(out_truth_and_expr_FU_1_1_1_15_i3_fu___float64_gtif_18209_31526), .in2(out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_gtif_18209_18236), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31536 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i1_fu___float64_gtif_18209_31536), .in1(out_reg_9_reg_9), .in2(out_reg_8_reg_8), .in3(out_reg_6_reg_6));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31539 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i2_fu___float64_gtif_18209_31539), .in1(out_reg_5_reg_5), .in2(out_reg_7_reg_7), .in3(out_ui_cond_expr_FU_1_1_1_1_19_i1_fu___float64_gtif_18209_31536));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_gtif_18209_31542 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i3_fu___float64_gtif_18209_31542), .in1(out_reg_3_reg_3), .in2(out_const_0), .in3(out_ui_cond_expr_FU_1_1_1_1_19_i2_fu___float64_gtif_18209_31539));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_gtif_18209_31676 (.out1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215), .in2(out_const_5));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_gtif_18209_31680 (.out1(out_ui_extract_bit_expr_FU_7_i0_fu___float64_gtif_18209_31680), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214), .in2(out_const_5));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_gtif_18209_18214), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_gtif_18209_18215), .wenable(wrenable_reg_1));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_UIconvert_expr_FU_8_i0_fu___float64_gtif_18209_18239), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_15_i1_fu___float64_gtif_18209_31515), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_16_i0_fu___float64_gtif_18209_31519), .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_15_i4_fu___float64_gtif_18209_31532), .wenable(wrenable_reg_5));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_19_i0_fu___float64_gtif_18209_31533), .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_gtif_18209_31676), .wenable(wrenable_reg_7));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_ne_expr_FU_8_8_8_14_i0_fu___float64_gtif_18209_18242), .wenable(wrenable_reg_8));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_15_i2_fu___float64_gtif_18209_31522), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_MUX_15_gimple_return_FU_10_i0_0_0_0;
  assign OUT_MULTIIF___float64_gtif_18209_31502 = out_multi_read_cond_FU_9_i0_fu___float64_gtif_18209_31502;

endmodule

// FSM based controller description for __float64_gtif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_gtif(done_port, selector_MUX_15_gimple_return_FU_10_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_MULTIIF___float64_gtif_18209_31502, clock, reset, start_port);
  // IN
  input OUT_MULTIIF___float64_gtif_18209_31502;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_2;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [3:0] S_0 = 4'b0001,
    S_3 = 4'b1000,
    S_1 = 4'b0010,
    S_2 = 4'b0100;
  reg [3:0] _present_state, _next_state;
  reg done_port;
  reg selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_2;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          if (OUT_MULTIIF___float64_gtif_18209_31502 == 1'b1)
            begin
              _next_state = S_3;
              done_port = 1'b1;
              wrenable_reg_0 = 1'b0;
              wrenable_reg_1 = 1'b0;
              wrenable_reg_2 = 1'b0;
              wrenable_reg_3 = 1'b0;
              wrenable_reg_4 = 1'b0;
              wrenable_reg_5 = 1'b0;
              wrenable_reg_6 = 1'b0;
              wrenable_reg_7 = 1'b0;
            end
          else
            begin
              _next_state = S_1;
            end
        end
        else
        begin
          selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_3 :
        begin
          selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'b1;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_2;
          done_port = 1'b1;
        end
      S_2 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_gtif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_gtif(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output return_port;
  // Component and signal declarations
  wire OUT_MULTIIF___float64_gtif_18209_31502;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller___float64_gtif Controller_i (.done_port(done_delayed_REG_signal_in), .selector_MUX_15_gimple_return_FU_10_i0_0_0_0(selector_MUX_15_gimple_return_FU_10_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_MULTIIF___float64_gtif_18209_31502(OUT_MULTIIF___float64_gtif_18209_31502), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_gtif Datapath_i (.return_port(return_port), .OUT_MULTIIF___float64_gtif_18209_31502(OUT_MULTIIF___float64_gtif_18209_31502), .clock(clock), .reset(reset), .in_port_a(a), .in_port_b(b), .selector_MUX_15_gimple_return_FU_10_i0_0_0_0(selector_MUX_15_gimple_return_FU_10_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Datapath RTL description for __float64_ltif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_ltif(clock, reset, in_port_a, in_port_b, return_port, selector_MUX_15_gimple_return_FU_10_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_MULTIIF___float64_ltif_18015_31547);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_2;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output return_port;
  output OUT_MULTIIF___float64_ltif_18015_31547;
  // Component and signal declarations
  wire out_MUX_15_gimple_return_FU_10_i0_0_0_0;
  wire signed [1:0] out_UIconvert_expr_FU_8_i0_fu___float64_ltif_18015_18045;
  wire signed [1:0] out_UIdata_converter_FU_11_i0_fu___float64_ltif_18015_18047;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_ltif_18015_18023;
  wire signed [11:0] out_UIdata_converter_FU_5_i0_fu___float64_ltif_18015_18029;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_12_i0_fu___float64_ltif_18015_18024;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_12_i1_fu___float64_ltif_18015_18030;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [6:0] out_const_2;
  wire [11:0] out_const_3;
  wire out_const_4;
  wire [5:0] out_const_5;
  wire [51:0] out_const_6;
  wire out_eq_expr_FU_16_0_16_13_i0_fu___float64_ltif_18015_29846;
  wire out_eq_expr_FU_16_0_16_13_i1_fu___float64_ltif_18015_29850;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021;
  wire out_multi_read_cond_FU_9_i0_fu___float64_ltif_18015_31547;
  wire out_ne_expr_FU_8_8_8_14_i0_fu___float64_ltif_18015_18048;
  wire [63:0] out_reg_0_reg_0;
  wire [63:0] out_reg_1_reg_1;
  wire [1:0] out_reg_2_reg_2;
  wire out_reg_3_reg_3;
  wire out_reg_4_reg_4;
  wire out_reg_5_reg_5;
  wire out_reg_6_reg_6;
  wire out_reg_7_reg_7;
  wire out_reg_8_reg_8;
  wire out_reg_9_reg_9;
  wire out_truth_and_expr_FU_1_1_1_15_i0_fu___float64_ltif_18015_31553;
  wire out_truth_and_expr_FU_1_1_1_15_i1_fu___float64_ltif_18015_31560;
  wire out_truth_and_expr_FU_1_1_1_15_i2_fu___float64_ltif_18015_31567;
  wire out_truth_and_expr_FU_1_1_1_15_i3_fu___float64_ltif_18015_31571;
  wire out_truth_and_expr_FU_1_1_1_15_i4_fu___float64_ltif_18015_31577;
  wire out_truth_not_expr_FU_1_1_16_i0_fu___float64_ltif_18015_31564;
  wire out_truth_not_expr_FU_1_1_16_i1_fu___float64_ltif_18015_31574;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_17_i0_fu___float64_ltif_18015_18026;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_17_i1_fu___float64_ltif_18015_18032;
  wire [62:0] out_ui_bit_ior_expr_FU_64_64_64_18_i0_fu___float64_ltif_18015_18040;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i0_fu___float64_ltif_18015_31578;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i1_fu___float64_ltif_18015_31581;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i2_fu___float64_ltif_18015_31584;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_19_i3_fu___float64_ltif_18015_31587;
  wire out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684;
  wire out_ui_extract_bit_expr_FU_7_i0_fu___float64_ltif_18015_31688;
  wire out_ui_gt_expr_FU_64_64_64_20_i0_fu___float64_ltif_18015_18046;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_21_i0_fu___float64_ltif_18015_18041;
  wire out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_ltif_18015_29854;
  wire out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_ltif_18015_18042;
  wire out_ui_ne_expr_FU_64_0_64_24_i0_fu___float64_ltif_18015_29848;
  wire out_ui_ne_expr_FU_64_0_64_24_i1_fu___float64_ltif_18015_29852;
  wire out_ui_ne_expr_FU_64_64_64_25_i0_fu___float64_ltif_18015_29858;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_26_i0_fu___float64_ltif_18015_18022;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_26_i1_fu___float64_ltif_18015_18028;
  wire [62:0] out_ui_rshift_expr_FU_64_0_64_27_i0_fu___float64_ltif_18015_30337;
  
  MUX_GATE #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) MUX_15_gimple_return_FU_10_i0_0_0_0 (.out1(out_MUX_15_gimple_return_FU_10_i0_0_0_0), .sel(selector_MUX_15_gimple_return_FU_10_i0_0_0_0), .in1(out_const_0), .in2(out_ui_cond_expr_FU_1_1_1_1_19_i3_fu___float64_ltif_18015_31587));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_6 (.out1(out_const_6));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_ltif_18015_18020 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_ltif_18015_18021 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021), .in1(in_port_b));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_ltif_18015_18022 (.out1(out_ui_rshift_expr_FU_64_0_64_26_i0_fu___float64_ltif_18015_18022), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020), .in2(out_const_2));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_ltif_18015_18023 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_ltif_18015_18023), .in1(out_ui_rshift_expr_FU_64_0_64_26_i0_fu___float64_ltif_18015_18022));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_ltif_18015_18024 (.out1(out_bit_and_expr_FU_16_0_16_12_i0_fu___float64_ltif_18015_18024), .in1(out_UIdata_converter_FU_4_i0_fu___float64_ltif_18015_18023), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_ltif_18015_18026 (.out1(out_ui_bit_and_expr_FU_64_0_64_17_i0_fu___float64_ltif_18015_18026), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_ltif_18015_18028 (.out1(out_ui_rshift_expr_FU_64_0_64_26_i1_fu___float64_ltif_18015_18028), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021), .in2(out_const_2));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_ltif_18015_18029 (.out1(out_UIdata_converter_FU_5_i0_fu___float64_ltif_18015_18029), .in1(out_ui_rshift_expr_FU_64_0_64_26_i1_fu___float64_ltif_18015_18028));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_ltif_18015_18030 (.out1(out_bit_and_expr_FU_16_0_16_12_i1_fu___float64_ltif_18015_18030), .in1(out_UIdata_converter_FU_5_i0_fu___float64_ltif_18015_18029), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_ltif_18015_18032 (.out1(out_ui_bit_and_expr_FU_64_0_64_17_i1_fu___float64_ltif_18015_18032), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021), .in2(out_const_6));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(63)) fu___float64_ltif_18015_18040 (.out1(out_ui_bit_ior_expr_FU_64_64_64_18_i0_fu___float64_ltif_18015_18040), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020), .in2(out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(2), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_ltif_18015_18041 (.out1(out_ui_lshift_expr_FU_64_0_64_21_i0_fu___float64_ltif_18015_18041), .in1(out_ui_bit_ior_expr_FU_64_64_64_18_i0_fu___float64_ltif_18015_18040), .in2(out_const_1));
  ui_ne_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_18042 (.out1(out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_ltif_18015_18042), .in1(out_ui_rshift_expr_FU_64_0_64_27_i0_fu___float64_ltif_18015_30337), .in2(out_const_0));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_ltif_18015_18045 (.out1(out_UIconvert_expr_FU_8_i0_fu___float64_ltif_18015_18045), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684));
  ui_gt_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_ltif_18015_18046 (.out1(out_ui_gt_expr_FU_64_64_64_20_i0_fu___float64_ltif_18015_18046), .in1(out_reg_1_reg_1), .in2(out_reg_0_reg_0));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_ltif_18015_18047 (.out1(out_UIdata_converter_FU_11_i0_fu___float64_ltif_18015_18047), .in1(out_ui_gt_expr_FU_64_64_64_20_i0_fu___float64_ltif_18015_18046));
  ne_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_ltif_18015_18048 (.out1(out_ne_expr_FU_8_8_8_14_i0_fu___float64_ltif_18015_18048), .in1(out_reg_2_reg_2), .in2(out_UIdata_converter_FU_11_i0_fu___float64_ltif_18015_18047));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_ltif_18015_29846 (.out1(out_eq_expr_FU_16_0_16_13_i0_fu___float64_ltif_18015_29846), .in1(out_bit_and_expr_FU_16_0_16_12_i0_fu___float64_ltif_18015_18024), .in2(out_const_3));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_29848 (.out1(out_ui_ne_expr_FU_64_0_64_24_i0_fu___float64_ltif_18015_29848), .in1(out_ui_bit_and_expr_FU_64_0_64_17_i0_fu___float64_ltif_18015_18026), .in2(out_const_0));
  eq_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(1)) fu___float64_ltif_18015_29850 (.out1(out_eq_expr_FU_16_0_16_13_i1_fu___float64_ltif_18015_29850), .in1(out_bit_and_expr_FU_16_0_16_12_i1_fu___float64_ltif_18015_18030), .in2(out_const_3));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_29852 (.out1(out_ui_ne_expr_FU_64_0_64_24_i1_fu___float64_ltif_18015_29852), .in1(out_ui_bit_and_expr_FU_64_0_64_17_i1_fu___float64_ltif_18015_18032), .in2(out_const_0));
  ui_ne_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_29854 (.out1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_ltif_18015_29854), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684), .in2(out_ui_extract_bit_expr_FU_7_i0_fu___float64_ltif_18015_31688));
  ui_ne_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(1)) fu___float64_ltif_18015_29858 (.out1(out_ui_ne_expr_FU_64_64_64_25_i0_fu___float64_ltif_18015_29858), .in1(out_reg_1_reg_1), .in2(out_reg_0_reg_0));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_ltif_18015_30337 (.out1(out_ui_rshift_expr_FU_64_0_64_27_i0_fu___float64_ltif_18015_30337), .in1(out_ui_lshift_expr_FU_64_0_64_21_i0_fu___float64_ltif_18015_18041), .in2(out_const_4));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31547 (.out1(out_multi_read_cond_FU_9_i0_fu___float64_ltif_18015_31547), .in1({out_truth_and_expr_FU_1_1_1_15_i0_fu___float64_ltif_18015_31553}));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31553 (.out1(out_truth_and_expr_FU_1_1_1_15_i0_fu___float64_ltif_18015_31553), .in1(out_eq_expr_FU_16_0_16_13_i0_fu___float64_ltif_18015_29846), .in2(out_ui_ne_expr_FU_64_0_64_24_i0_fu___float64_ltif_18015_29848));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31560 (.out1(out_truth_and_expr_FU_1_1_1_15_i1_fu___float64_ltif_18015_31560), .in1(out_eq_expr_FU_16_0_16_13_i1_fu___float64_ltif_18015_29850), .in2(out_ui_ne_expr_FU_64_0_64_24_i1_fu___float64_ltif_18015_29852));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31564 (.out1(out_truth_not_expr_FU_1_1_16_i0_fu___float64_ltif_18015_31564), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_ltif_18015_29854));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31567 (.out1(out_truth_and_expr_FU_1_1_1_15_i2_fu___float64_ltif_18015_31567), .in1(out_ui_ne_expr_FU_64_64_64_25_i0_fu___float64_ltif_18015_29858), .in2(out_reg_4_reg_4));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31571 (.out1(out_truth_and_expr_FU_1_1_1_15_i3_fu___float64_ltif_18015_31571), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_ltif_18015_29854), .in2(out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31574 (.out1(out_truth_not_expr_FU_1_1_16_i1_fu___float64_ltif_18015_31574), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31577 (.out1(out_truth_and_expr_FU_1_1_1_15_i4_fu___float64_ltif_18015_31577), .in1(out_ui_ne_expr_FU_1_1_1_22_i0_fu___float64_ltif_18015_29854), .in2(out_truth_not_expr_FU_1_1_16_i1_fu___float64_ltif_18015_31574));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31578 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i0_fu___float64_ltif_18015_31578), .in1(out_truth_and_expr_FU_1_1_1_15_i3_fu___float64_ltif_18015_31571), .in2(out_ui_ne_expr_FU_64_0_64_23_i0_fu___float64_ltif_18015_18042), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31581 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i1_fu___float64_ltif_18015_31581), .in1(out_reg_9_reg_9), .in2(out_reg_8_reg_8), .in3(out_reg_6_reg_6));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31584 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i2_fu___float64_ltif_18015_31584), .in1(out_reg_5_reg_5), .in2(out_reg_7_reg_7), .in3(out_ui_cond_expr_FU_1_1_1_1_19_i1_fu___float64_ltif_18015_31581));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_ltif_18015_31587 (.out1(out_ui_cond_expr_FU_1_1_1_1_19_i3_fu___float64_ltif_18015_31587), .in1(out_reg_3_reg_3), .in2(out_const_0), .in3(out_ui_cond_expr_FU_1_1_1_1_19_i2_fu___float64_ltif_18015_31584));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_ltif_18015_31684 (.out1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020), .in2(out_const_5));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_ltif_18015_31688 (.out1(out_ui_extract_bit_expr_FU_7_i0_fu___float64_ltif_18015_31688), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021), .in2(out_const_5));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_ltif_18015_18020), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_ltif_18015_18021), .wenable(wrenable_reg_1));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_UIconvert_expr_FU_8_i0_fu___float64_ltif_18015_18045), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_15_i1_fu___float64_ltif_18015_31560), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_16_i0_fu___float64_ltif_18015_31564), .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_15_i4_fu___float64_ltif_18015_31577), .wenable(wrenable_reg_5));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_19_i0_fu___float64_ltif_18015_31578), .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_6_i0_fu___float64_ltif_18015_31684), .wenable(wrenable_reg_7));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_ne_expr_FU_8_8_8_14_i0_fu___float64_ltif_18015_18048), .wenable(wrenable_reg_8));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_15_i2_fu___float64_ltif_18015_31567), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_MUX_15_gimple_return_FU_10_i0_0_0_0;
  assign OUT_MULTIIF___float64_ltif_18015_31547 = out_multi_read_cond_FU_9_i0_fu___float64_ltif_18015_31547;

endmodule

// FSM based controller description for __float64_ltif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_ltif(done_port, selector_MUX_15_gimple_return_FU_10_i0_0_0_0, wrenable_reg_0, wrenable_reg_1, wrenable_reg_2, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_MULTIIF___float64_ltif_18015_31547, clock, reset, start_port);
  // IN
  input OUT_MULTIIF___float64_ltif_18015_31547;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_2;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [3:0] S_0 = 4'b0001,
    S_3 = 4'b1000,
    S_1 = 4'b0010,
    S_2 = 4'b0100;
  reg [3:0] _present_state, _next_state;
  reg done_port;
  reg selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_2;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          if (OUT_MULTIIF___float64_ltif_18015_31547 == 1'b1)
            begin
              _next_state = S_3;
              done_port = 1'b1;
              wrenable_reg_0 = 1'b0;
              wrenable_reg_1 = 1'b0;
              wrenable_reg_2 = 1'b0;
              wrenable_reg_3 = 1'b0;
              wrenable_reg_4 = 1'b0;
              wrenable_reg_5 = 1'b0;
              wrenable_reg_6 = 1'b0;
              wrenable_reg_7 = 1'b0;
            end
          else
            begin
              _next_state = S_1;
            end
        end
        else
        begin
          selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_3 :
        begin
          selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'b1;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_2;
          done_port = 1'b1;
        end
      S_2 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_15_gimple_return_FU_10_i0_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_ltif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_ltif(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output return_port;
  // Component and signal declarations
  wire OUT_MULTIIF___float64_ltif_18015_31547;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire selector_MUX_15_gimple_return_FU_10_i0_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller___float64_ltif Controller_i (.done_port(done_delayed_REG_signal_in), .selector_MUX_15_gimple_return_FU_10_i0_0_0_0(selector_MUX_15_gimple_return_FU_10_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_MULTIIF___float64_ltif_18015_31547(OUT_MULTIIF___float64_ltif_18015_31547), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_ltif Datapath_i (.return_port(return_port), .OUT_MULTIIF___float64_ltif_18015_31547(OUT_MULTIIF___float64_ltif_18015_31547), .clock(clock), .reset(reset), .in_port_a(a), .in_port_b(b), .selector_MUX_15_gimple_return_FU_10_i0_0_0_0(selector_MUX_15_gimple_return_FU_10_i0_0_0_0), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Datapath RTL description for __float64_subif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath___float64_subif(clock, reset, in_port_a, in_port_b, return_port, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_54, wrenable_reg_55, wrenable_reg_56, wrenable_reg_57, wrenable_reg_58, wrenable_reg_59, wrenable_reg_6, wrenable_reg_60, wrenable_reg_61, wrenable_reg_62, wrenable_reg_63, wrenable_reg_64, wrenable_reg_65, wrenable_reg_66, wrenable_reg_67, wrenable_reg_68, wrenable_reg_69, wrenable_reg_7, wrenable_reg_70, wrenable_reg_71, wrenable_reg_72, wrenable_reg_73, wrenable_reg_74, wrenable_reg_75, wrenable_reg_76, wrenable_reg_77, wrenable_reg_78, wrenable_reg_79, wrenable_reg_8, wrenable_reg_80, wrenable_reg_81, wrenable_reg_82, wrenable_reg_83, wrenable_reg_84, wrenable_reg_85, wrenable_reg_86, wrenable_reg_87, wrenable_reg_88, wrenable_reg_89, wrenable_reg_9, wrenable_reg_90, wrenable_reg_91, wrenable_reg_92, wrenable_reg_93, wrenable_reg_94, wrenable_reg_95, wrenable_reg_96, wrenable_reg_97);
  // IN
  input clock;
  input reset;
  input [63:0] in_port_a;
  input [63:0] in_port_b;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_24;
  input wrenable_reg_25;
  input wrenable_reg_26;
  input wrenable_reg_27;
  input wrenable_reg_28;
  input wrenable_reg_29;
  input wrenable_reg_3;
  input wrenable_reg_30;
  input wrenable_reg_31;
  input wrenable_reg_32;
  input wrenable_reg_33;
  input wrenable_reg_34;
  input wrenable_reg_35;
  input wrenable_reg_36;
  input wrenable_reg_37;
  input wrenable_reg_38;
  input wrenable_reg_39;
  input wrenable_reg_4;
  input wrenable_reg_40;
  input wrenable_reg_41;
  input wrenable_reg_42;
  input wrenable_reg_43;
  input wrenable_reg_44;
  input wrenable_reg_45;
  input wrenable_reg_46;
  input wrenable_reg_47;
  input wrenable_reg_48;
  input wrenable_reg_49;
  input wrenable_reg_5;
  input wrenable_reg_50;
  input wrenable_reg_51;
  input wrenable_reg_52;
  input wrenable_reg_53;
  input wrenable_reg_54;
  input wrenable_reg_55;
  input wrenable_reg_56;
  input wrenable_reg_57;
  input wrenable_reg_58;
  input wrenable_reg_59;
  input wrenable_reg_6;
  input wrenable_reg_60;
  input wrenable_reg_61;
  input wrenable_reg_62;
  input wrenable_reg_63;
  input wrenable_reg_64;
  input wrenable_reg_65;
  input wrenable_reg_66;
  input wrenable_reg_67;
  input wrenable_reg_68;
  input wrenable_reg_69;
  input wrenable_reg_7;
  input wrenable_reg_70;
  input wrenable_reg_71;
  input wrenable_reg_72;
  input wrenable_reg_73;
  input wrenable_reg_74;
  input wrenable_reg_75;
  input wrenable_reg_76;
  input wrenable_reg_77;
  input wrenable_reg_78;
  input wrenable_reg_79;
  input wrenable_reg_8;
  input wrenable_reg_80;
  input wrenable_reg_81;
  input wrenable_reg_82;
  input wrenable_reg_83;
  input wrenable_reg_84;
  input wrenable_reg_85;
  input wrenable_reg_86;
  input wrenable_reg_87;
  input wrenable_reg_88;
  input wrenable_reg_89;
  input wrenable_reg_9;
  input wrenable_reg_90;
  input wrenable_reg_91;
  input wrenable_reg_92;
  input wrenable_reg_93;
  input wrenable_reg_94;
  input wrenable_reg_95;
  input wrenable_reg_96;
  input wrenable_reg_97;
  // OUT
  output [63:0] return_port;
  // Component and signal declarations
  wire [11:0] out_IUconvert_expr_FU_13_i0_fu___float64_subif_13341_13383;
  wire [52:0] out_IUdata_converter_FU_15_i0_fu___float64_subif_13341_13390;
  wire [56:0] out_IUdata_converter_FU_17_i0_fu___float64_subif_13341_13541;
  wire [63:0] out_IUdata_converter_FU_20_i0_fu___float64_subif_13341_13439;
  wire [63:0] out_IUdata_converter_FU_22_i0_fu___float64_subif_13341_13453;
  wire [63:0] out_IUdata_converter_FU_24_i0_fu___float64_subif_13341_13471;
  wire [63:0] out_IUdata_converter_FU_26_i0_fu___float64_subif_13341_13489;
  wire [63:0] out_IUdata_converter_FU_28_i0_fu___float64_subif_13341_13507;
  wire [63:0] out_IUdata_converter_FU_30_i0_fu___float64_subif_13341_13524;
  wire [11:0] out_IUdata_converter_FU_42_i0_fu___float64_subif_13341_13648;
  wire [10:0] out_IUdata_converter_FU_5_i0_fu___float64_subif_13341_13355;
  wire [10:0] out_IUdata_converter_FU_7_i0_fu___float64_subif_13341_13360;
  wire signed [1:0] out_UIconvert_expr_FU_10_i0_fu___float64_subif_13341_13377;
  wire signed [1:0] out_UIconvert_expr_FU_11_i0_fu___float64_subif_13341_13378;
  wire signed [1:0] out_UIconvert_expr_FU_12_i0_fu___float64_subif_13341_13380;
  wire signed [1:0] out_UIconvert_expr_FU_14_i0_fu___float64_subif_13341_13387;
  wire signed [1:0] out_UIconvert_expr_FU_16_i0_fu___float64_subif_13341_13538;
  wire signed [1:0] out_UIdata_converter_FU_19_i0_fu___float64_subif_13341_13436;
  wire signed [1:0] out_UIdata_converter_FU_21_i0_fu___float64_subif_13341_13450;
  wire signed [1:0] out_UIdata_converter_FU_23_i0_fu___float64_subif_13341_13468;
  wire signed [1:0] out_UIdata_converter_FU_25_i0_fu___float64_subif_13341_13486;
  wire signed [1:0] out_UIdata_converter_FU_27_i0_fu___float64_subif_13341_13504;
  wire signed [1:0] out_UIdata_converter_FU_29_i0_fu___float64_subif_13341_13521;
  wire signed [11:0] out_UIdata_converter_FU_41_i0_fu___float64_subif_13341_13646;
  wire signed [11:0] out_UIdata_converter_FU_4_i0_fu___float64_subif_13341_13353;
  wire signed [11:0] out_UIdata_converter_FU_6_i0_fu___float64_subif_13341_13358;
  wire [5:0] out_UUconvert_expr_FU_40_i0_fu___float64_subif_13341_13635;
  wire [11:0] out_UUconvert_expr_FU_44_i0_fu___float64_subif_13341_13668;
  wire out_UUdata_converter_FU_18_i0_fu___float64_subif_13341_13687;
  wire out_UUdata_converter_FU_31_i0_fu___float64_subif_13341_13416;
  wire out_UUdata_converter_FU_32_i0_fu___float64_subif_13341_13420;
  wire out_UUdata_converter_FU_33_i0_fu___float64_subif_13341_13546;
  wire out_UUdata_converter_FU_34_i0_fu___float64_subif_13341_13657;
  wire out_UUdata_converter_FU_35_i0_fu___float64_subif_13341_13630;
  wire out_UUdata_converter_FU_36_i0_fu___float64_subif_13341_13622;
  wire out_UUdata_converter_FU_37_i0_fu___float64_subif_13341_13625;
  wire out_UUdata_converter_FU_38_i0_fu___float64_subif_13341_13627;
  wire out_UUdata_converter_FU_39_i0_fu___float64_subif_13341_13621;
  wire [11:0] out_UUdata_converter_FU_43_i0_fu___float64_subif_13341_13649;
  wire [10:0] out_UUdata_converter_FU_45_i0_fu___float64_subif_13341_13670;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_48_i0_fu___float64_subif_13341_13354;
  wire signed [11:0] out_bit_and_expr_FU_16_0_16_48_i1_fu___float64_subif_13341_13359;
  wire signed [1:0] out_cond_expr_FU_8_8_8_8_49_i0_fu___float64_subif_13341_31847;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [4:0] out_const_10;
  wire [5:0] out_const_11;
  wire [6:0] out_const_12;
  wire [6:0] out_const_13;
  wire [2:0] out_const_14;
  wire [3:0] out_const_15;
  wire [4:0] out_const_16;
  wire [5:0] out_const_17;
  wire [6:0] out_const_18;
  wire [6:0] out_const_19;
  wire [2:0] out_const_2;
  wire [6:0] out_const_20;
  wire [3:0] out_const_21;
  wire [5:0] out_const_22;
  wire [6:0] out_const_23;
  wire [6:0] out_const_24;
  wire [5:0] out_const_25;
  wire [6:0] out_const_26;
  wire [6:0] out_const_27;
  wire [11:0] out_const_28;
  wire out_const_29;
  wire [3:0] out_const_3;
  wire [1:0] out_const_30;
  wire [2:0] out_const_31;
  wire [3:0] out_const_32;
  wire [4:0] out_const_33;
  wire [5:0] out_const_34;
  wire [55:0] out_const_35;
  wire [63:0] out_const_36;
  wire [12:0] out_const_37;
  wire [5:0] out_const_38;
  wire [1:0] out_const_39;
  wire [4:0] out_const_4;
  wire [4:0] out_const_40;
  wire [5:0] out_const_41;
  wire [5:0] out_const_42;
  wire [5:0] out_const_43;
  wire [5:0] out_const_44;
  wire [5:0] out_const_45;
  wire [3:0] out_const_46;
  wire [5:0] out_const_47;
  wire [7:0] out_const_48;
  wire [10:0] out_const_49;
  wire [5:0] out_const_5;
  wire [10:0] out_const_50;
  wire [15:0] out_const_51;
  wire [51:0] out_const_52;
  wire [55:0] out_const_53;
  wire [62:0] out_const_54;
  wire [63:0] out_const_55;
  wire [6:0] out_const_6;
  wire [4:0] out_const_7;
  wire [6:0] out_const_8;
  wire [3:0] out_const_9;
  wire [63:0] out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346;
  wire [63:0] out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347;
  wire signed [31:0] out_lshift_expr_FU_32_0_32_50_i0_fu___float64_subif_13341_13381;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i0_fu___float64_subif_13341_13388;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i1_fu___float64_subif_13341_13437;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i2_fu___float64_subif_13341_13451;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i3_fu___float64_subif_13341_13469;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i4_fu___float64_subif_13341_13487;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i5_fu___float64_subif_13341_13505;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i6_fu___float64_subif_13341_13522;
  wire signed [63:0] out_lshift_expr_FU_64_0_64_51_i7_fu___float64_subif_13341_13539;
  wire out_lt_expr_FU_8_8_8_52_i0_fu___float64_subif_13341_13379;
  wire out_ne_expr_FU_8_0_8_53_i0_fu___float64_subif_13341_29878;
  wire signed [12:0] out_plus_expr_FU_16_0_16_54_i0_fu___float64_subif_13341_13647;
  wire [51:0] out_reg_0_reg_0;
  wire out_reg_10_reg_10;
  wire out_reg_11_reg_11;
  wire out_reg_12_reg_12;
  wire [51:0] out_reg_13_reg_13;
  wire out_reg_14_reg_14;
  wire out_reg_15_reg_15;
  wire out_reg_16_reg_16;
  wire out_reg_17_reg_17;
  wire [10:0] out_reg_18_reg_18;
  wire [11:0] out_reg_19_reg_19;
  wire [10:0] out_reg_1_reg_1;
  wire out_reg_20_reg_20;
  wire [54:0] out_reg_21_reg_21;
  wire [54:0] out_reg_22_reg_22;
  wire [1:0] out_reg_23_reg_23;
  wire [1:0] out_reg_24_reg_24;
  wire [1:0] out_reg_25_reg_25;
  wire [63:0] out_reg_26_reg_26;
  wire [22:0] out_reg_27_reg_27;
  wire [1:0] out_reg_28_reg_28;
  wire [1:0] out_reg_29_reg_29;
  wire [51:0] out_reg_2_reg_2;
  wire [1:0] out_reg_30_reg_30;
  wire [1:0] out_reg_31_reg_31;
  wire out_reg_32_reg_32;
  wire [63:0] out_reg_33_reg_33;
  wire [63:0] out_reg_34_reg_34;
  wire [54:0] out_reg_35_reg_35;
  wire [63:0] out_reg_36_reg_36;
  wire [63:0] out_reg_37_reg_37;
  wire [63:0] out_reg_38_reg_38;
  wire [46:0] out_reg_39_reg_39;
  wire [10:0] out_reg_3_reg_3;
  wire [63:0] out_reg_40_reg_40;
  wire [63:0] out_reg_41_reg_41;
  wire [63:0] out_reg_42_reg_42;
  wire [63:0] out_reg_43_reg_43;
  wire [63:0] out_reg_44_reg_44;
  wire [63:0] out_reg_45_reg_45;
  wire [63:0] out_reg_46_reg_46;
  wire [63:0] out_reg_47_reg_47;
  wire [61:0] out_reg_48_reg_48;
  wire [63:0] out_reg_49_reg_49;
  wire out_reg_4_reg_4;
  wire [53:0] out_reg_50_reg_50;
  wire [54:0] out_reg_51_reg_51;
  wire [55:0] out_reg_52_reg_52;
  wire [60:0] out_reg_53_reg_53;
  wire out_reg_54_reg_54;
  wire out_reg_55_reg_55;
  wire [56:0] out_reg_56_reg_56;
  wire [7:0] out_reg_57_reg_57;
  wire [7:0] out_reg_58_reg_58;
  wire [7:0] out_reg_59_reg_59;
  wire out_reg_5_reg_5;
  wire [2:0] out_reg_60_reg_60;
  wire [2:0] out_reg_61_reg_61;
  wire [2:0] out_reg_62_reg_62;
  wire [2:0] out_reg_63_reg_63;
  wire [5:0] out_reg_64_reg_64;
  wire out_reg_65_reg_65;
  wire out_reg_66_reg_66;
  wire out_reg_67_reg_67;
  wire out_reg_68_reg_68;
  wire out_reg_69_reg_69;
  wire out_reg_6_reg_6;
  wire out_reg_70_reg_70;
  wire [2:0] out_reg_71_reg_71;
  wire out_reg_72_reg_72;
  wire [7:0] out_reg_73_reg_73;
  wire out_reg_74_reg_74;
  wire out_reg_75_reg_75;
  wire out_reg_76_reg_76;
  wire out_reg_77_reg_77;
  wire out_reg_78_reg_78;
  wire [46:0] out_reg_79_reg_79;
  wire out_reg_7_reg_7;
  wire [46:0] out_reg_80_reg_80;
  wire [46:0] out_reg_81_reg_81;
  wire [46:0] out_reg_82_reg_82;
  wire [54:0] out_reg_83_reg_83;
  wire [5:0] out_reg_84_reg_84;
  wire [51:0] out_reg_85_reg_85;
  wire [1:0] out_reg_86_reg_86;
  wire out_reg_87_reg_87;
  wire out_reg_88_reg_88;
  wire [51:0] out_reg_89_reg_89;
  wire out_reg_8_reg_8;
  wire [63:0] out_reg_90_reg_90;
  wire out_reg_91_reg_91;
  wire [63:0] out_reg_92_reg_92;
  wire out_reg_93_reg_93;
  wire out_reg_94_reg_94;
  wire [12:0] out_reg_95_reg_95;
  wire [63:0] out_reg_96_reg_96;
  wire [62:0] out_reg_97_reg_97;
  wire [56:0] out_reg_9_reg_9;
  wire signed [0:0] out_rshift_expr_FU_32_0_32_55_i0_fu___float64_subif_13341_13382;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i0_fu___float64_subif_13341_13389;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i1_fu___float64_subif_13341_13438;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i2_fu___float64_subif_13341_13452;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i3_fu___float64_subif_13341_13470;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i4_fu___float64_subif_13341_13488;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i5_fu___float64_subif_13341_13506;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i6_fu___float64_subif_13341_13523;
  wire signed [0:0] out_rshift_expr_FU_64_0_64_56_i7_fu___float64_subif_13341_13540;
  wire out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_subif_13341_31719;
  wire out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_subif_13341_31769;
  wire out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_subif_13341_31773;
  wire out_truth_and_expr_FU_1_1_1_57_i12_fu___float64_subif_13341_31779;
  wire out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_subif_13341_31783;
  wire out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_subif_13341_31789;
  wire out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_subif_13341_31793;
  wire out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_subif_13341_31799;
  wire out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_subif_13341_31803;
  wire out_truth_and_expr_FU_1_1_1_57_i18_fu___float64_subif_13341_31809;
  wire out_truth_and_expr_FU_1_1_1_57_i19_fu___float64_subif_13341_31813;
  wire out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_subif_13341_31726;
  wire out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_subif_13341_31819;
  wire out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_subif_13341_31823;
  wire out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_subif_13341_31829;
  wire out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_subif_13341_31833;
  wire out_truth_and_expr_FU_1_1_1_57_i24_fu___float64_subif_13341_31839;
  wire out_truth_and_expr_FU_1_1_1_57_i25_fu___float64_subif_13341_31846;
  wire out_truth_and_expr_FU_1_1_1_57_i26_fu___float64_subif_13341_32088;
  wire out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_subif_13341_31729;
  wire out_truth_and_expr_FU_1_1_1_57_i3_fu___float64_subif_13341_31736;
  wire out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_subif_13341_31739;
  wire out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_subif_13341_31743;
  wire out_truth_and_expr_FU_1_1_1_57_i6_fu___float64_subif_13341_31749;
  wire out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_subif_13341_31753;
  wire out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_subif_13341_31759;
  wire out_truth_and_expr_FU_1_1_1_57_i9_fu___float64_subif_13341_31763;
  wire out_truth_not_expr_FU_1_1_58_i0_fu___float64_subif_13341_13544;
  wire out_truth_not_expr_FU_1_1_58_i10_fu___float64_subif_13341_31776;
  wire out_truth_not_expr_FU_1_1_58_i11_fu___float64_subif_13341_31786;
  wire out_truth_not_expr_FU_1_1_58_i12_fu___float64_subif_13341_31796;
  wire out_truth_not_expr_FU_1_1_58_i13_fu___float64_subif_13341_31806;
  wire out_truth_not_expr_FU_1_1_58_i14_fu___float64_subif_13341_31816;
  wire out_truth_not_expr_FU_1_1_58_i15_fu___float64_subif_13341_31826;
  wire out_truth_not_expr_FU_1_1_58_i16_fu___float64_subif_13341_31836;
  wire out_truth_not_expr_FU_1_1_58_i17_fu___float64_subif_13341_31843;
  wire out_truth_not_expr_FU_1_1_58_i18_fu___float64_subif_13341_32085;
  wire out_truth_not_expr_FU_1_1_58_i19_fu___float64_subif_13341_32153;
  wire out_truth_not_expr_FU_1_1_58_i1_fu___float64_subif_13341_13665;
  wire out_truth_not_expr_FU_1_1_58_i20_fu___float64_subif_13341_32195;
  wire out_truth_not_expr_FU_1_1_58_i2_fu___float64_subif_13341_13673;
  wire out_truth_not_expr_FU_1_1_58_i3_fu___float64_subif_13341_13679;
  wire out_truth_not_expr_FU_1_1_58_i4_fu___float64_subif_13341_31716;
  wire out_truth_not_expr_FU_1_1_58_i5_fu___float64_subif_13341_31723;
  wire out_truth_not_expr_FU_1_1_58_i6_fu___float64_subif_13341_31733;
  wire out_truth_not_expr_FU_1_1_58_i7_fu___float64_subif_13341_31746;
  wire out_truth_not_expr_FU_1_1_58_i8_fu___float64_subif_13341_31756;
  wire out_truth_not_expr_FU_1_1_58_i9_fu___float64_subif_13341_31766;
  wire out_truth_or_expr_FU_1_1_1_59_i0_fu___float64_subif_13341_31877;
  wire out_truth_or_expr_FU_1_1_1_59_i10_fu___float64_subif_13341_32030;
  wire out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051;
  wire out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091;
  wire out_truth_or_expr_FU_1_1_1_59_i1_fu___float64_subif_13341_31893;
  wire out_truth_or_expr_FU_1_1_1_59_i2_fu___float64_subif_13341_31902;
  wire out_truth_or_expr_FU_1_1_1_59_i3_fu___float64_subif_13341_31911;
  wire out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926;
  wire out_truth_or_expr_FU_1_1_1_59_i5_fu___float64_subif_13341_31947;
  wire out_truth_or_expr_FU_1_1_1_59_i6_fu___float64_subif_13341_31956;
  wire out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967;
  wire out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988;
  wire out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_subif_13341_32009;
  wire out_truth_xor_expr_FU_1_0_1_60_i0_fu___float64_subif_13341_30426;
  wire out_truth_xor_expr_FU_1_0_1_60_i1_fu___float64_subif_13341_30452;
  wire out_truth_xor_expr_FU_1_1_1_61_i0_fu___float64_subif_13341_30417;
  wire [15:0] out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_subif_13341_13556;
  wire [10:0] out_ui_bit_and_expr_FU_16_0_16_63_i0_fu___float64_subif_13341_13669;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_64_i0_fu___float64_subif_13341_13385;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_64_i1_fu___float64_subif_13341_13386;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_64_i2_fu___float64_subif_13341_13401;
  wire [10:0] out_ui_bit_and_expr_FU_16_16_16_64_i3_fu___float64_subif_13341_13403;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i0_fu___float64_subif_13341_13435;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i1_fu___float64_subif_13341_13449;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i2_fu___float64_subif_13341_13467;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i3_fu___float64_subif_13341_13485;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i4_fu___float64_subif_13341_13503;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_65_i5_fu___float64_subif_13341_13520;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_66_i0_fu___float64_subif_13341_13656;
  wire [0:0] out_ui_bit_and_expr_FU_1_0_1_67_i0_fu___float64_subif_13341_13660;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i0_fu___float64_subif_13341_13363;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i1_fu___float64_subif_13341_13367;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i2_fu___float64_subif_13341_13375;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i3_fu___float64_subif_13341_13545;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i4_fu___float64_subif_13341_13663;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i5_fu___float64_subif_13341_13685;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_68_i6_fu___float64_subif_13341_13686;
  wire [22:0] out_ui_bit_and_expr_FU_32_32_32_69_i0_fu___float64_subif_13341_13443;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_subif_13341_13351;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_subif_13341_13356;
  wire [62:0] out_ui_bit_and_expr_FU_64_0_64_71_i0_fu___float64_subif_13341_13371;
  wire [62:0] out_ui_bit_and_expr_FU_64_0_64_71_i1_fu___float64_subif_13341_13372;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_72_i0_fu___float64_subif_13341_13543;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_72_i1_fu___float64_subif_13341_13549;
  wire [55:0] out_ui_bit_and_expr_FU_64_0_64_73_i0_fu___float64_subif_13341_13639;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_74_i0_fu___float64_subif_13341_13661;
  wire [51:0] out_ui_bit_and_expr_FU_64_0_64_74_i1_fu___float64_subif_13341_13676;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_75_i0_fu___float64_subif_13341_13392;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i10_fu___float64_subif_13341_13475;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i11_fu___float64_subif_13341_13477;
  wire [46:0] out_ui_bit_and_expr_FU_64_64_64_75_i12_fu___float64_subif_13341_13480;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_75_i13_fu___float64_subif_13341_13481;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i14_fu___float64_subif_13341_13493;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i15_fu___float64_subif_13341_13495;
  wire [50:0] out_ui_bit_and_expr_FU_64_64_64_75_i16_fu___float64_subif_13341_13498;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_75_i17_fu___float64_subif_13341_13499;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i18_fu___float64_subif_13341_13511;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i19_fu___float64_subif_13341_13513;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_75_i1_fu___float64_subif_13341_13393;
  wire [52:0] out_ui_bit_and_expr_FU_64_64_64_75_i20_fu___float64_subif_13341_13516;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_75_i21_fu___float64_subif_13341_13517;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i22_fu___float64_subif_13341_13528;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i23_fu___float64_subif_13341_13530;
  wire [53:0] out_ui_bit_and_expr_FU_64_64_64_75_i24_fu___float64_subif_13341_13533;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_75_i25_fu___float64_subif_13341_13534;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_75_i2_fu___float64_subif_13341_13406;
  wire [51:0] out_ui_bit_and_expr_FU_64_64_64_75_i3_fu___float64_subif_13341_13408;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i4_fu___float64_subif_13341_13441;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_75_i5_fu___float64_subif_13341_13445;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i6_fu___float64_subif_13341_13457;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_75_i7_fu___float64_subif_13341_13459;
  wire [38:0] out_ui_bit_and_expr_FU_64_64_64_75_i8_fu___float64_subif_13341_13462;
  wire [54:0] out_ui_bit_and_expr_FU_64_64_64_75_i9_fu___float64_subif_13341_13463;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_76_i0_fu___float64_subif_13341_13561;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_76_i1_fu___float64_subif_13341_13566;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_76_i2_fu___float64_subif_13341_13571;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_subif_13341_13701;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_subif_13341_13705;
  wire [7:0] out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_subif_13341_13727;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i0_fu___float64_subif_13341_13603;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i1_fu___float64_subif_13341_13709;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i2_fu___float64_subif_13341_13713;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i3_fu___float64_subif_13341_13717;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i4_fu___float64_subif_13341_13732;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i5_fu___float64_subif_13341_13735;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_77_i6_fu___float64_subif_13341_13738;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_78_i0_fu___float64_subif_13341_13614;
  wire [3:0] out_ui_bit_and_expr_FU_8_0_8_79_i0_fu___float64_subif_13341_13697;
  wire [52:0] out_ui_bit_ior_expr_FU_0_64_64_80_i0_fu___float64_subif_13341_13418;
  wire [52:0] out_ui_bit_ior_expr_FU_0_64_64_81_i0_fu___float64_subif_13341_13422;
  wire [63:0] out_ui_bit_ior_expr_FU_0_64_64_82_i0_fu___float64_subif_13341_13662;
  wire [62:0] out_ui_bit_ior_expr_FU_0_64_64_83_i0_fu___float64_subif_13341_13691;
  wire [1:0] out_ui_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_subif_13341_13624;
  wire [4:0] out_ui_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_subif_13341_13629;
  wire [5:0] out_ui_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_subif_13341_13632;
  wire [5:0] out_ui_bit_ior_expr_FU_0_8_8_87_i0_fu___float64_subif_13341_13633;
  wire [10:0] out_ui_bit_ior_expr_FU_16_16_16_88_i0_fu___float64_subif_13341_13402;
  wire [10:0] out_ui_bit_ior_expr_FU_16_16_16_88_i1_fu___float64_subif_13341_13404;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_89_i0_fu___float64_subif_13341_13643;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_89_i1_fu___float64_subif_13341_13658;
  wire [0:0] out_ui_bit_ior_expr_FU_1_1_1_89_i2_fu___float64_subif_13341_13683;
  wire [51:0] out_ui_bit_ior_expr_FU_64_64_64_90_i0_fu___float64_subif_13341_13407;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_90_i10_fu___float64_subif_13341_13500;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i11_fu___float64_subif_13341_13510;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i12_fu___float64_subif_13341_13514;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_90_i13_fu___float64_subif_13341_13518;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i14_fu___float64_subif_13341_13527;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i15_fu___float64_subif_13341_13531;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i16_fu___float64_subif_13341_13689;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i17_fu___float64_subif_13341_13692;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i18_ui_bit_ior_expr_FU_64_64_64_90_i18;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_90_i19_fu___float64_subif_13341_13535;
  wire [51:0] out_ui_bit_ior_expr_FU_64_64_64_90_i1_fu___float64_subif_13341_13409;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_90_i2_fu___float64_subif_13341_13446;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i3_fu___float64_subif_13341_13456;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_90_i4_fu___float64_subif_13341_13464;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i5_fu___float64_subif_13341_13474;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i6_fu___float64_subif_13341_13478;
  wire [54:0] out_ui_bit_ior_expr_FU_64_64_64_90_i7_fu___float64_subif_13341_13482;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i8_fu___float64_subif_13341_13492;
  wire [63:0] out_ui_bit_ior_expr_FU_64_64_64_90_i9_fu___float64_subif_13341_13496;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i0_fu___float64_subif_13341_13426;
  wire [5:0] out_ui_bit_ior_expr_FU_8_8_8_91_i10_fu___float64_subif_13341_13634;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i11_fu___float64_subif_13341_13655;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i12_fu___float64_subif_13341_13659;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i1_fu___float64_subif_13341_13429;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i2_fu___float64_subif_13341_13430;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i4_fu___float64_subif_13341_13434;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i5_fu___float64_subif_13341_13448;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i6_fu___float64_subif_13341_13466;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i7_fu___float64_subif_13341_13484;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i8_fu___float64_subif_13341_13502;
  wire [1:0] out_ui_bit_ior_expr_FU_8_8_8_91_i9_fu___float64_subif_13341_13519;
  wire [11:0] out_ui_bit_not_expr_FU_16_16_92_i0_fu___float64_subif_13341_13384;
  wire [52:0] out_ui_bit_not_expr_FU_64_64_93_i0_fu___float64_subif_13341_13391;
  wire [55:0] out_ui_bit_not_expr_FU_64_64_93_i1_fu___float64_subif_13341_13444;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_93_i2_fu___float64_subif_13341_13458;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_93_i3_fu___float64_subif_13341_13476;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_93_i4_fu___float64_subif_13341_13494;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_93_i5_fu___float64_subif_13341_13512;
  wire [63:0] out_ui_bit_not_expr_FU_64_64_93_i6_fu___float64_subif_13341_13529;
  wire [0:0] out_ui_bit_xor_expr_FU_1_0_1_94_i0_fu___float64_subif_13341_13349;
  wire [0:0] out_ui_bit_xor_expr_FU_1_1_1_95_i0_fu___float64_subif_13341_13369;
  wire [56:0] out_ui_bit_xor_expr_FU_64_64_64_96_i0_fu___float64_subif_13341_13542;
  wire [12:0] out_ui_cond_expr_FU_16_16_16_16_97_i0_fu___float64_subif_13341_31710;
  wire [11:0] out_ui_cond_expr_FU_16_16_16_16_97_i1_fu___float64_subif_13341_31849;
  wire [10:0] out_ui_cond_expr_FU_16_16_16_16_97_i2_fu___float64_subif_13341_31851;
  wire [10:0] out_ui_cond_expr_FU_16_16_16_16_97_i3_fu___float64_subif_13341_31853;
  wire [11:0] out_ui_cond_expr_FU_16_16_16_16_97_i4_fu___float64_subif_13341_31871;
  wire [10:0] out_ui_cond_expr_FU_16_16_16_16_97_i5_fu___float64_subif_13341_31873;
  wire [12:0] out_ui_cond_expr_FU_16_16_16_16_97_i6_fu___float64_subif_13341_31883;
  wire [12:0] out_ui_cond_expr_FU_16_16_16_16_97_i7_fu___float64_subif_13341_31885;
  wire [14:0] out_ui_cond_expr_FU_16_16_16_16_97_i8_fu___float64_subif_13341_31949;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i0_fu___float64_subif_13341_31861;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i10_fu___float64_subif_13341_32022;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i11_fu___float64_subif_13341_32034;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i12_fu___float64_subif_13341_32037;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i13_fu___float64_subif_13341_32043;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i14_fu___float64_subif_13341_32055;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i15_fu___float64_subif_13341_32058;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i16_fu___float64_subif_13341_32064;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i17_fu___float64_subif_13341_32073;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i18_fu___float64_subif_13341_32075;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i19_fu___float64_subif_13341_32079;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i1_fu___float64_subif_13341_31863;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i20_fu___float64_subif_13341_32095;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i21_fu___float64_subif_13341_32097;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i22_fu___float64_subif_13341_32105;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i23_fu___float64_subif_13341_32107;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i2_fu___float64_subif_13341_31865;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i3_fu___float64_subif_13341_31869;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i4_fu___float64_subif_13341_31881;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i5_fu___float64_subif_13341_31887;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i6_fu___float64_subif_13341_31980;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i7_fu___float64_subif_13341_31992;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i8_fu___float64_subif_13341_32001;
  wire [0:0] out_ui_cond_expr_FU_1_1_1_1_98_i9_fu___float64_subif_13341_32013;
  wire [22:0] out_ui_cond_expr_FU_32_32_32_32_99_i0_fu___float64_subif_13341_31913;
  wire [30:0] out_ui_cond_expr_FU_32_32_32_32_99_i1_fu___float64_subif_13341_31936;
  wire [30:0] out_ui_cond_expr_FU_32_32_32_32_99_i2_fu___float64_subif_13341_31977;
  wire [63:0] out_ui_cond_expr_FU_64_64_64_64_100_i0_fu___float64_subif_13341_31707;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_100_i10_fu___float64_subif_13341_31964;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_100_i11_fu___float64_subif_13341_31998;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_100_i12_fu___float64_subif_13341_32019;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_100_i13_fu___float64_subif_13341_32040;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_100_i14_fu___float64_subif_13341_32061;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_100_i15_fu___float64_subif_13341_32077;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_100_i16_fu___float64_subif_13341_32099;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_100_i17_fu___float64_subif_13341_32109;
  wire [52:0] out_ui_cond_expr_FU_64_64_64_64_100_i1_fu___float64_subif_13341_31855;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_100_i2_fu___float64_subif_13341_31857;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_100_i3_fu___float64_subif_13341_31859;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_100_i4_fu___float64_subif_13341_31867;
  wire [51:0] out_ui_cond_expr_FU_64_64_64_64_100_i5_fu___float64_subif_13341_31878;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_100_i6_fu___float64_subif_13341_31889;
  wire [38:0] out_ui_cond_expr_FU_64_64_64_64_100_i7_fu___float64_subif_13341_31904;
  wire [54:0] out_ui_cond_expr_FU_64_64_64_64_100_i8_fu___float64_subif_13341_31919;
  wire [46:0] out_ui_cond_expr_FU_64_64_64_64_100_i9_fu___float64_subif_13341_31958;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_101_i0_fu___float64_subif_13341_31895;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_101_i10_fu___float64_subif_13341_31989;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i11_fu___float64_subif_13341_32004;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_101_i12_fu___float64_subif_13341_32010;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i13_fu___float64_subif_13341_32025;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_101_i14_fu___float64_subif_13341_32031;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i15_fu___float64_subif_13341_32046;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_101_i16_fu___float64_subif_13341_32052;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i17_fu___float64_subif_13341_32067;
  wire [7:0] out_ui_cond_expr_FU_8_8_8_8_101_i18_fu___float64_subif_13341_32071;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i19_fu___float64_subif_13341_32081;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i1_fu___float64_subif_13341_31899;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i20_fu___float64_subif_13341_32093;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i21_fu___float64_subif_13341_32101;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i22_fu___float64_subif_13341_32103;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i23_fu___float64_subif_13341_32111;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i2_fu___float64_subif_13341_31908;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i3_fu___float64_subif_13341_31917;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i4_fu___float64_subif_13341_31923;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i5_fu___float64_subif_13341_31942;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i6_fu___float64_subif_13341_31953;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i7_fu___float64_subif_13341_31962;
  wire [6:0] out_ui_cond_expr_FU_8_8_8_8_101_i8_fu___float64_subif_13341_31968;
  wire [2:0] out_ui_cond_expr_FU_8_8_8_8_101_i9_fu___float64_subif_13341_31983;
  wire out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_subif_13341_13361;
  wire out_ui_eq_expr_FU_16_0_16_102_i1_fu___float64_subif_13341_13365;
  wire out_ui_eq_expr_FU_16_0_16_103_i0_fu___float64_subif_13341_29882;
  wire out_ui_eq_expr_FU_16_0_16_103_i1_fu___float64_subif_13341_29906;
  wire out_ui_eq_expr_FU_16_0_16_104_i0_fu___float64_subif_13341_29890;
  wire out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_subif_13341_13615;
  wire out_ui_eq_expr_FU_1_0_1_105_i1_fu___float64_subif_13341_13698;
  wire out_ui_eq_expr_FU_1_0_1_106_i0_fu___float64_subif_13341_13640;
  wire out_ui_eq_expr_FU_1_1_1_107_i0_fu___float64_subif_13341_13373;
  wire out_ui_eq_expr_FU_32_0_32_108_i0_fu___float64_subif_13341_13552;
  wire out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_subif_13341_13611;
  wire out_ui_eq_expr_FU_8_0_8_109_i10_fu___float64_subif_13341_29926;
  wire out_ui_eq_expr_FU_8_0_8_109_i11_fu___float64_subif_13341_29928;
  wire out_ui_eq_expr_FU_8_0_8_109_i1_fu___float64_subif_13341_29908;
  wire out_ui_eq_expr_FU_8_0_8_109_i2_fu___float64_subif_13341_29910;
  wire out_ui_eq_expr_FU_8_0_8_109_i3_fu___float64_subif_13341_29912;
  wire out_ui_eq_expr_FU_8_0_8_109_i4_fu___float64_subif_13341_29914;
  wire out_ui_eq_expr_FU_8_0_8_109_i5_fu___float64_subif_13341_29916;
  wire out_ui_eq_expr_FU_8_0_8_109_i6_fu___float64_subif_13341_29918;
  wire out_ui_eq_expr_FU_8_0_8_109_i7_fu___float64_subif_13341_29920;
  wire out_ui_eq_expr_FU_8_0_8_109_i8_fu___float64_subif_13341_29922;
  wire out_ui_eq_expr_FU_8_0_8_109_i9_fu___float64_subif_13341_29924;
  wire out_ui_eq_expr_FU_8_0_8_110_i0_fu___float64_subif_13341_13637;
  wire out_ui_extract_bit_expr_FU_8_i0_fu___float64_subif_13341_30467;
  wire out_ui_extract_bit_expr_FU_9_i0_fu___float64_subif_13341_30482;
  wire out_ui_le_expr_FU_1_1_1_111_i0_fu___float64_subif_13341_29902;
  wire [52:0] out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_subif_13341_13417;
  wire [52:0] out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_subif_13341_13421;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_112_i2_fu___float64_subif_13341_13650;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_112_i3_fu___float64_subif_13341_13671;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_subif_13341_13419;
  wire [54:0] out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_subif_13341_13423;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_113_i2_fu___float64_subif_13341_13613;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_subif_13341_13440;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_subif_13341_13554;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_subif_13341_13454;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_subif_13341_13472;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_subif_13341_13490;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_subif_13341_13508;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_119_i0_fu___float64_subif_13341_13525;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_120_i1_fu___float64_subif_13341_13707;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_120_i2_fu___float64_subif_13341_13711;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_120_i3_fu___float64_subif_13341_13715;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_subif_13341_13619;
  wire [51:0] out_ui_lshift_expr_FU_64_0_64_122_i0_fu___float64_subif_13341_13688;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_subif_13341_13699;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_subif_13341_13703;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i0_fu___float64_subif_13341_13719;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i1_fu___float64_subif_13341_13720;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i2_fu___float64_subif_13341_13721;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_subif_13341_13722;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_subif_13341_13723;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i5_fu___float64_subif_13341_13724;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_124_i6_fu___float64_subif_13341_13725;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_125_i0_fu___float64_subif_13341_32121;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_125_i1_fu___float64_subif_13341_32231;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i0_fu___float64_subif_13341_32137;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i1_fu___float64_subif_13341_32294;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i2_fu___float64_subif_13341_32301;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i3_fu___float64_subif_13341_32318;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i4_fu___float64_subif_13341_32338;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_126_i5_fu___float64_subif_13341_32348;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_127_i0_fu___float64_subif_13341_32150;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_128_i0_fu___float64_subif_13341_32166;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_129_i0_fu___float64_subif_13341_32179;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_130_i0_fu___float64_subif_13341_32192;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_130_i1_fu___float64_subif_13341_32251;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_130_i2_fu___float64_subif_13341_32264;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_130_i3_fu___float64_subif_13341_32274;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_130_i4_fu___float64_subif_13341_32284;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_131_i0_fu___float64_subif_13341_32208;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_132_i0_fu___float64_subif_13341_32352;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_132_i1_fu___float64_subif_13341_32366;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_132_i2_fu___float64_subif_13341_32383;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_133_i0_fu___float64_subif_13341_32359;
  wire [62:0] out_ui_lshift_expr_FU_64_0_64_133_i1_fu___float64_subif_13341_32390;
  wire [63:0] out_ui_lshift_expr_FU_64_0_64_134_i0_fu___float64_subif_13341_32373;
  wire [1:0] out_ui_lshift_expr_FU_8_0_8_135_i0_fu___float64_subif_13341_13623;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_136_i0_fu___float64_subif_13341_13626;
  wire [4:0] out_ui_lshift_expr_FU_8_0_8_137_i0_fu___float64_subif_13341_13628;
  wire [5:0] out_ui_lshift_expr_FU_8_0_8_138_i0_fu___float64_subif_13341_13631;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_139_i0_fu___float64_subif_13341_32218;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_139_i1_fu___float64_subif_13341_32241;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_139_i2_fu___float64_subif_13341_32308;
  wire [3:0] out_ui_lshift_expr_FU_8_0_8_139_i3_fu___float64_subif_13341_32328;
  wire out_ui_lt_expr_FU_16_16_16_140_i0_fu___float64_subif_13341_13642;
  wire out_ui_lt_expr_FU_1_1_1_141_i0_fu___float64_subif_13341_29894;
  wire out_ui_lt_expr_FU_1_1_1_141_i1_fu___float64_subif_13341_29896;
  wire out_ui_lt_expr_FU_1_1_1_141_i2_fu___float64_subif_13341_29898;
  wire out_ui_lt_expr_FU_64_64_64_142_i0_fu___float64_subif_13341_13374;
  wire [11:0] out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405;
  wire [15:0] out_ui_minus_expr_FU_16_16_16_143_i1_fu___float64_subif_13341_13645;
  wire out_ui_ne_expr_FU_16_0_16_144_i0_fu___float64_subif_13341_13364;
  wire out_ui_ne_expr_FU_16_0_16_144_i1_fu___float64_subif_13341_13368;
  wire out_ui_ne_expr_FU_64_0_64_145_i0_fu___float64_subif_13341_13362;
  wire out_ui_ne_expr_FU_64_0_64_145_i1_fu___float64_subif_13341_13366;
  wire out_ui_ne_expr_FU_64_0_64_146_i0_fu___float64_subif_13341_13536;
  wire [63:0] out_ui_plus_expr_FU_64_64_64_147_i0_fu___float64_subif_13341_13664;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_148_i0_fu___float64_subif_13341_13424;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_149_i0_fu___float64_subif_13341_13425;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_150_i0_fu___float64_subif_13341_13427;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_151_i0_fu___float64_subif_13341_13428;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_152_i0_fu___float64_subif_13341_13431;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_153_i0_fu___float64_subif_13341_13433;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_154_i0_fu___float64_subif_13341_13447;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_155_i0_fu___float64_subif_13341_13465;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_156_i0_fu___float64_subif_13341_13483;
  wire [1:0] out_ui_rshift_expr_FU_16_0_16_157_i0_fu___float64_subif_13341_13501;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_158_i0_fu___float64_subif_13341_13348;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_subif_13341_13350;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_159_i0_fu___float64_subif_13341_13352;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_159_i1_fu___float64_subif_13341_13357;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_subif_13341_13667;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_159_i3_fu___float64_subif_13341_13712;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_160_i0_fu___float64_subif_13341_13442;
  wire [31:0] out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_subif_13341_13551;
  wire [47:0] out_ui_rshift_expr_FU_64_0_64_161_i0_fu___float64_subif_13341_13455;
  wire [38:0] out_ui_rshift_expr_FU_64_0_64_161_i1_fu___float64_subif_13341_13461;
  wire [16:0] out_ui_rshift_expr_FU_64_0_64_161_i2_fu___float64_subif_13341_13555;
  wire [55:0] out_ui_rshift_expr_FU_64_0_64_162_i0_fu___float64_subif_13341_13473;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_162_i1_fu___float64_subif_13341_13479;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_subif_13341_13636;
  wire [8:0] out_ui_rshift_expr_FU_64_0_64_162_i3_fu___float64_subif_13341_13700;
  wire [59:0] out_ui_rshift_expr_FU_64_0_64_163_i0_fu___float64_subif_13341_13491;
  wire [50:0] out_ui_rshift_expr_FU_64_0_64_163_i1_fu___float64_subif_13341_13497;
  wire [61:0] out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_subif_13341_13509;
  wire [52:0] out_ui_rshift_expr_FU_64_0_64_164_i1_fu___float64_subif_13341_13515;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_164_i2_fu___float64_subif_13341_13653;
  wire [62:0] out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_subif_13341_13526;
  wire [53:0] out_ui_rshift_expr_FU_64_0_64_165_i1_fu___float64_subif_13341_13532;
  wire [1:0] out_ui_rshift_expr_FU_64_0_64_165_i2_fu___float64_subif_13341_13654;
  wire [51:0] out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_subif_13341_13652;
  wire [15:0] out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_subif_13341_13695;
  wire [8:0] out_ui_rshift_expr_FU_64_0_64_168_i0_fu___float64_subif_13341_13704;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_169_i0_fu___float64_subif_13341_13708;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_subif_13341_13716;
  wire [8:0] out_ui_rshift_expr_FU_64_0_64_171_i0_fu___float64_subif_13341_13726;
  wire [7:0] out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_subif_13341_13729;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_173_i0_fu___float64_subif_13341_13731;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_subif_13341_13734;
  wire [4:0] out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_subif_13341_13737;
  wire [3:0] out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_subif_13341_13740;
  wire [60:0] out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_subif_13341_30430;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_subif_13341_30440;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_subif_13341_32114;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_179_i1_fu___float64_subif_13341_32117;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_179_i2_fu___float64_subif_13341_32224;
  wire [30:0] out_ui_rshift_expr_FU_64_0_64_179_i3_fu___float64_subif_13341_32227;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_subif_13341_32130;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_subif_13341_32133;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i2_fu___float64_subif_13341_32287;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i3_fu___float64_subif_13341_32290;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i4_fu___float64_subif_13341_32297;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i5_fu___float64_subif_13341_32311;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i6_fu___float64_subif_13341_32331;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i7_fu___float64_subif_13341_32334;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i8_fu___float64_subif_13341_32341;
  wire [54:0] out_ui_rshift_expr_FU_64_0_64_180_i9_fu___float64_subif_13341_32344;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_subif_13341_32143;
  wire [22:0] out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_subif_13341_32146;
  wire [38:0] out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_subif_13341_32159;
  wire [38:0] out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_subif_13341_32162;
  wire [6:0] out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_subif_13341_32172;
  wire [6:0] out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_subif_13341_32175;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_subif_13341_32185;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_subif_13341_32188;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i2_fu___float64_subif_13341_32244;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i3_fu___float64_subif_13341_32247;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i4_fu___float64_subif_13341_32257;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i5_fu___float64_subif_13341_32260;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i6_fu___float64_subif_13341_32267;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i7_fu___float64_subif_13341_32270;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i8_fu___float64_subif_13341_32277;
  wire [46:0] out_ui_rshift_expr_FU_64_0_64_184_i9_fu___float64_subif_13341_32280;
  wire [14:0] out_ui_rshift_expr_FU_64_0_64_185_i0_fu___float64_subif_13341_32201;
  wire [14:0] out_ui_rshift_expr_FU_64_0_64_185_i1_fu___float64_subif_13341_32204;
  wire [11:0] out_ui_rshift_expr_FU_64_0_64_186_i0_fu___float64_subif_13341_32355;
  wire [10:0] out_ui_rshift_expr_FU_64_0_64_186_i1_fu___float64_subif_13341_32386;
  wire [12:0] out_ui_rshift_expr_FU_64_0_64_187_i0_fu___float64_subif_13341_32362;
  wire [12:0] out_ui_rshift_expr_FU_64_0_64_187_i1_fu___float64_subif_13341_32376;
  wire [12:0] out_ui_rshift_expr_FU_64_0_64_187_i2_fu___float64_subif_13341_32379;
  wire [0:0] out_ui_rshift_expr_FU_64_0_64_188_i0_fu___float64_subif_13341_32369;
  wire [3:0] out_ui_rshift_expr_FU_8_0_8_189_i0_fu___float64_subif_13341_13604;
  wire [1:0] out_ui_rshift_expr_FU_8_0_8_190_i0_fu___float64_subif_13341_13610;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_191_i0_fu___float64_subif_13341_30436;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_191_i1_fu___float64_subif_13341_32211;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_191_i2_fu___float64_subif_13341_32214;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_191_i3_fu___float64_subif_13341_32234;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_191_i4_fu___float64_subif_13341_32237;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_191_i5_fu___float64_subif_13341_32304;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_191_i6_fu___float64_subif_13341_32321;
  wire [2:0] out_ui_rshift_expr_FU_8_0_8_191_i7_fu___float64_subif_13341_32324;
  wire [0:0] out_ui_rshift_expr_FU_8_0_8_192_i0_fu___float64_subif_13341_30446;
  wire [56:0] out_ui_ternary_plus_expr_FU_64_64_64_64_193_i0_fu___float64_subif_13341_13548;
  wire [63:0] out_ui_view_convert_expr_FU_46_i0_fu___float64_subif_13341_13693;
  
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(5), .value(5'b01010)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(6), .value(6'b010100)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(7), .value(7'b0101000)) const_12 (.out1(out_const_12));
  constant_value #(.BITSIZE_out1(7), .value(7'b0101100)) const_13 (.out1(out_const_13));
  constant_value #(.BITSIZE_out1(3), .value(3'b011)) const_14 (.out1(out_const_14));
  constant_value #(.BITSIZE_out1(4), .value(4'b0110)) const_15 (.out1(out_const_15));
  constant_value #(.BITSIZE_out1(5), .value(5'b01100)) const_16 (.out1(out_const_16));
  constant_value #(.BITSIZE_out1(6), .value(6'b011000)) const_17 (.out1(out_const_17));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110000)) const_18 (.out1(out_const_18));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110011)) const_19 (.out1(out_const_19));
  constant_value #(.BITSIZE_out1(3), .value(3'b010)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(7), .value(7'b0110100)) const_20 (.out1(out_const_20));
  constant_value #(.BITSIZE_out1(4), .value(4'b0111)) const_21 (.out1(out_const_21));
  constant_value #(.BITSIZE_out1(6), .value(6'b011100)) const_22 (.out1(out_const_22));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111000)) const_23 (.out1(out_const_23));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111100)) const_24 (.out1(out_const_24));
  constant_value #(.BITSIZE_out1(6), .value(6'b011111)) const_25 (.out1(out_const_25));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111110)) const_26 (.out1(out_const_26));
  constant_value #(.BITSIZE_out1(7), .value(7'b0111111)) const_27 (.out1(out_const_27));
  constant_value #(.BITSIZE_out1(12), .value(12'b011111111111)) const_28 (.out1(out_const_28));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_29 (.out1(out_const_29));
  constant_value #(.BITSIZE_out1(4), .value(4'b0100)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(2), .value(2'b10)) const_30 (.out1(out_const_30));
  constant_value #(.BITSIZE_out1(3), .value(3'b100)) const_31 (.out1(out_const_31));
  constant_value #(.BITSIZE_out1(4), .value(4'b1000)) const_32 (.out1(out_const_32));
  constant_value #(.BITSIZE_out1(5), .value(5'b10000)) const_33 (.out1(out_const_33));
  constant_value #(.BITSIZE_out1(6), .value(6'b100000)) const_34 (.out1(out_const_34));
  constant_value #(.BITSIZE_out1(56), .value(56'b10000000000000000000000000000000000000000000000000000000)) const_35 (.out1(out_const_35));
  constant_value #(.BITSIZE_out1(64), .value(64'b1000000000000000000000000000000000000000000000000000000000000000)) const_36 (.out1(out_const_36));
  constant_value #(.BITSIZE_out1(13), .value(13'b1000000000001)) const_37 (.out1(out_const_37));
  constant_value #(.BITSIZE_out1(6), .value(6'b101000)) const_38 (.out1(out_const_38));
  constant_value #(.BITSIZE_out1(2), .value(2'b11)) const_39 (.out1(out_const_39));
  constant_value #(.BITSIZE_out1(5), .value(5'b01000)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(5), .value(5'b11000)) const_40 (.out1(out_const_40));
  constant_value #(.BITSIZE_out1(6), .value(6'b110000)) const_41 (.out1(out_const_41));
  constant_value #(.BITSIZE_out1(6), .value(6'b110011)) const_42 (.out1(out_const_42));
  constant_value #(.BITSIZE_out1(6), .value(6'b110100)) const_43 (.out1(out_const_43));
  constant_value #(.BITSIZE_out1(6), .value(6'b110111)) const_44 (.out1(out_const_44));
  constant_value #(.BITSIZE_out1(6), .value(6'b111000)) const_45 (.out1(out_const_45));
  constant_value #(.BITSIZE_out1(4), .value(4'b1111)) const_46 (.out1(out_const_46));
  constant_value #(.BITSIZE_out1(6), .value(6'b111111)) const_47 (.out1(out_const_47));
  constant_value #(.BITSIZE_out1(8), .value(8'b11111111)) const_48 (.out1(out_const_48));
  constant_value #(.BITSIZE_out1(11), .value(11'b11111111110)) const_49 (.out1(out_const_49));
  constant_value #(.BITSIZE_out1(6), .value(6'b010000)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(11), .value(11'b11111111111)) const_50 (.out1(out_const_50));
  constant_value #(.BITSIZE_out1(16), .value(16'b1111111111111111)) const_51 (.out1(out_const_51));
  constant_value #(.BITSIZE_out1(52), .value(52'b1111111111111111111111111111111111111111111111111111)) const_52 (.out1(out_const_52));
  constant_value #(.BITSIZE_out1(56), .value(56'b11111111111111111111111111111111111111111111111111111111)) const_53 (.out1(out_const_53));
  constant_value #(.BITSIZE_out1(63), .value(63'b111111111111111111111111111111111111111111111111111111111111111)) const_54 (.out1(out_const_54));
  constant_value #(.BITSIZE_out1(64), .value(64'b1111111111111111111111111111111111111111111111111111111111111111)) const_55 (.out1(out_const_55));
  constant_value #(.BITSIZE_out1(7), .value(7'b0100000)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(5), .value(5'b01001)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(7), .value(7'b0100100)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(4), .value(4'b0101)) const_9 (.out1(out_const_9));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13346 (.out1(out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346), .in1(in_port_a));
  fp_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13347 (.out1(out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347), .in1(in_port_b));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13348 (.out1(out_ui_rshift_expr_FU_64_0_64_158_i0_fu___float64_subif_13341_13348), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347), .in2(out_const_27));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13349 (.out1(out_ui_bit_xor_expr_FU_1_0_1_94_i0_fu___float64_subif_13341_13349), .in1(out_ui_rshift_expr_FU_64_0_64_158_i0_fu___float64_subif_13341_13348), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13350 (.out1(out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_subif_13341_13350), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346), .in2(out_const_27));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13351 (.out1(out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_subif_13341_13351), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346), .in2(out_const_52));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_subif_13341_13352 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i0_fu___float64_subif_13341_13352), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346), .in2(out_const_20));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13353 (.out1(out_UIdata_converter_FU_4_i0_fu___float64_subif_13341_13353), .in1(out_ui_rshift_expr_FU_64_0_64_159_i0_fu___float64_subif_13341_13352));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13354 (.out1(out_bit_and_expr_FU_16_0_16_48_i0_fu___float64_subif_13341_13354), .in1(out_UIdata_converter_FU_4_i0_fu___float64_subif_13341_13353), .in2(out_const_28));
  IUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(11)) fu___float64_subif_13341_13355 (.out1(out_IUdata_converter_FU_5_i0_fu___float64_subif_13341_13355), .in1(out_bit_and_expr_FU_16_0_16_48_i0_fu___float64_subif_13341_13354));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13356 (.out1(out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_subif_13341_13356), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347), .in2(out_const_52));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_subif_13341_13357 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i1_fu___float64_subif_13341_13357), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347), .in2(out_const_20));
  UIdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13358 (.out1(out_UIdata_converter_FU_6_i0_fu___float64_subif_13341_13358), .in1(out_ui_rshift_expr_FU_64_0_64_159_i1_fu___float64_subif_13341_13357));
  bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13359 (.out1(out_bit_and_expr_FU_16_0_16_48_i1_fu___float64_subif_13341_13359), .in1(out_UIdata_converter_FU_6_i0_fu___float64_subif_13341_13358), .in2(out_const_28));
  IUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(11)) fu___float64_subif_13341_13360 (.out1(out_IUdata_converter_FU_7_i0_fu___float64_subif_13341_13360), .in1(out_bit_and_expr_FU_16_0_16_48_i1_fu___float64_subif_13341_13359));
  ui_eq_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_subif_13341_13361 (.out1(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_subif_13341_13361), .in1(out_IUdata_converter_FU_5_i0_fu___float64_subif_13341_13355), .in2(out_const_50));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13362 (.out1(out_ui_ne_expr_FU_64_0_64_145_i0_fu___float64_subif_13341_13362), .in1(out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_subif_13341_13351), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13363 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i0_fu___float64_subif_13341_13363), .in1(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_subif_13341_13361), .in2(out_ui_ne_expr_FU_64_0_64_145_i0_fu___float64_subif_13341_13362));
  ui_ne_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13364 (.out1(out_ui_ne_expr_FU_16_0_16_144_i0_fu___float64_subif_13341_13364), .in1(out_IUdata_converter_FU_5_i0_fu___float64_subif_13341_13355), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_subif_13341_13365 (.out1(out_ui_eq_expr_FU_16_0_16_102_i1_fu___float64_subif_13341_13365), .in1(out_IUdata_converter_FU_7_i0_fu___float64_subif_13341_13360), .in2(out_const_50));
  ui_ne_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13366 (.out1(out_ui_ne_expr_FU_64_0_64_145_i1_fu___float64_subif_13341_13366), .in1(out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_subif_13341_13356), .in2(out_const_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13367 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i1_fu___float64_subif_13341_13367), .in1(out_ui_eq_expr_FU_16_0_16_102_i1_fu___float64_subif_13341_13365), .in2(out_ui_ne_expr_FU_64_0_64_145_i1_fu___float64_subif_13341_13366));
  ui_ne_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13368 (.out1(out_ui_ne_expr_FU_16_0_16_144_i1_fu___float64_subif_13341_13368), .in1(out_IUdata_converter_FU_7_i0_fu___float64_subif_13341_13360), .in2(out_const_0));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13369 (.out1(out_ui_bit_xor_expr_FU_1_1_1_95_i0_fu___float64_subif_13341_13369), .in1(out_ui_rshift_expr_FU_64_0_64_158_i1_fu___float64_subif_13341_13350), .in2(out_ui_bit_xor_expr_FU_1_0_1_94_i0_fu___float64_subif_13341_13349));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_subif_13341_13371 (.out1(out_ui_bit_and_expr_FU_64_0_64_71_i0_fu___float64_subif_13341_13371), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346), .in2(out_const_54));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_subif_13341_13372 (.out1(out_ui_bit_and_expr_FU_64_0_64_71_i1_fu___float64_subif_13341_13372), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347), .in2(out_const_54));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13373 (.out1(out_ui_eq_expr_FU_1_1_1_107_i0_fu___float64_subif_13341_13373), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i0_fu___float64_subif_13341_13363), .in2(out_ui_bit_and_expr_FU_1_1_1_68_i1_fu___float64_subif_13341_13367));
  ui_lt_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(63), .BITSIZE_out1(1)) fu___float64_subif_13341_13374 (.out1(out_ui_lt_expr_FU_64_64_64_142_i0_fu___float64_subif_13341_13374), .in1(out_ui_bit_and_expr_FU_64_0_64_71_i0_fu___float64_subif_13341_13371), .in2(out_ui_bit_and_expr_FU_64_0_64_71_i1_fu___float64_subif_13341_13372));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13375 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i2_fu___float64_subif_13341_13375), .in1(out_ui_eq_expr_FU_1_1_1_107_i0_fu___float64_subif_13341_13373), .in2(out_ui_lt_expr_FU_64_64_64_142_i0_fu___float64_subif_13341_13374));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13377 (.out1(out_UIconvert_expr_FU_10_i0_fu___float64_subif_13341_13377), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i0_fu___float64_subif_13341_13363));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13378 (.out1(out_UIconvert_expr_FU_11_i0_fu___float64_subif_13341_13378), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i1_fu___float64_subif_13341_13367));
  lt_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_subif_13341_13379 (.out1(out_lt_expr_FU_8_8_8_52_i0_fu___float64_subif_13341_13379), .in1(out_UIconvert_expr_FU_10_i0_fu___float64_subif_13341_13377), .in2(out_UIconvert_expr_FU_11_i0_fu___float64_subif_13341_13378));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13380 (.out1(out_UIconvert_expr_FU_12_i0_fu___float64_subif_13341_13380), .in1(out_reg_8_reg_8));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(6), .BITSIZE_out1(32), .PRECISION(32)) fu___float64_subif_13341_13381 (.out1(out_lshift_expr_FU_32_0_32_50_i0_fu___float64_subif_13341_13381), .in1(out_UIconvert_expr_FU_12_i0_fu___float64_subif_13341_13380), .in2(out_const_25));
  rshift_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(32)) fu___float64_subif_13341_13382 (.out1(out_rshift_expr_FU_32_0_32_55_i0_fu___float64_subif_13341_13382), .in1(out_lshift_expr_FU_32_0_32_50_i0_fu___float64_subif_13341_13381), .in2(out_const_25));
  IUconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(12)) fu___float64_subif_13341_13383 (.out1(out_IUconvert_expr_FU_13_i0_fu___float64_subif_13341_13383), .in1(out_rshift_expr_FU_32_0_32_55_i0_fu___float64_subif_13341_13382));
  ui_bit_not_expr_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13384 (.out1(out_ui_bit_not_expr_FU_16_16_92_i0_fu___float64_subif_13341_13384), .in1(out_IUconvert_expr_FU_13_i0_fu___float64_subif_13341_13383));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13385 (.out1(out_ui_bit_and_expr_FU_16_16_16_64_i0_fu___float64_subif_13341_13385), .in1(out_ui_bit_not_expr_FU_16_16_92_i0_fu___float64_subif_13341_13384), .in2(out_reg_3_reg_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13386 (.out1(out_ui_bit_and_expr_FU_16_16_16_64_i1_fu___float64_subif_13341_13386), .in1(out_ui_bit_not_expr_FU_16_16_92_i0_fu___float64_subif_13341_13384), .in2(out_reg_1_reg_1));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13387 (.out1(out_UIconvert_expr_FU_14_i0_fu___float64_subif_13341_13387), .in1(out_reg_8_reg_8));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13388 (.out1(out_lshift_expr_FU_64_0_64_51_i0_fu___float64_subif_13341_13388), .in1(out_UIconvert_expr_FU_14_i0_fu___float64_subif_13341_13387), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13389 (.out1(out_rshift_expr_FU_64_0_64_56_i0_fu___float64_subif_13341_13389), .in1(out_lshift_expr_FU_64_0_64_51_i0_fu___float64_subif_13341_13388), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(53)) fu___float64_subif_13341_13390 (.out1(out_IUdata_converter_FU_15_i0_fu___float64_subif_13341_13390), .in1(out_rshift_expr_FU_64_0_64_56_i0_fu___float64_subif_13341_13389));
  ui_bit_not_expr_FU #(.BITSIZE_in1(53), .BITSIZE_out1(53)) fu___float64_subif_13341_13391 (.out1(out_ui_bit_not_expr_FU_64_64_93_i0_fu___float64_subif_13341_13391), .in1(out_IUdata_converter_FU_15_i0_fu___float64_subif_13341_13390));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13392 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i0_fu___float64_subif_13341_13392), .in1(out_ui_bit_not_expr_FU_64_64_93_i0_fu___float64_subif_13341_13391), .in2(out_reg_2_reg_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13393 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i1_fu___float64_subif_13341_13393), .in1(out_ui_bit_not_expr_FU_64_64_93_i0_fu___float64_subif_13341_13391), .in2(out_reg_0_reg_0));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13401 (.out1(out_ui_bit_and_expr_FU_16_16_16_64_i2_fu___float64_subif_13341_13401), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i1_fu___float64_subif_13341_31849), .in2(out_reg_1_reg_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13402 (.out1(out_ui_bit_ior_expr_FU_16_16_16_88_i0_fu___float64_subif_13341_13402), .in1(out_ui_bit_and_expr_FU_16_16_16_64_i2_fu___float64_subif_13341_13401), .in2(out_ui_cond_expr_FU_16_16_16_16_97_i2_fu___float64_subif_13341_31851));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13403 (.out1(out_ui_bit_and_expr_FU_16_16_16_64_i3_fu___float64_subif_13341_13403), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i1_fu___float64_subif_13341_31849), .in2(out_reg_3_reg_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13404 (.out1(out_ui_bit_ior_expr_FU_16_16_16_88_i1_fu___float64_subif_13341_13404), .in1(out_ui_bit_and_expr_FU_16_16_16_64_i3_fu___float64_subif_13341_13403), .in2(out_ui_cond_expr_FU_16_16_16_16_97_i3_fu___float64_subif_13341_31853));
  ui_minus_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(12)) fu___float64_subif_13341_13405 (.out1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in1(out_ui_bit_ior_expr_FU_16_16_16_88_i1_fu___float64_subif_13341_13404), .in2(out_ui_bit_ior_expr_FU_16_16_16_88_i0_fu___float64_subif_13341_13402));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13406 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i2_fu___float64_subif_13341_13406), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i1_fu___float64_subif_13341_31855), .in2(out_reg_0_reg_0));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13407 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i0_fu___float64_subif_13341_13407), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i2_fu___float64_subif_13341_13406), .in2(out_ui_cond_expr_FU_64_64_64_64_100_i2_fu___float64_subif_13341_31857));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13408 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i3_fu___float64_subif_13341_13408), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i1_fu___float64_subif_13341_31855), .in2(out_reg_2_reg_2));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13409 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i1_fu___float64_subif_13341_13409), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i3_fu___float64_subif_13341_13408), .in2(out_ui_cond_expr_FU_64_64_64_64_100_i3_fu___float64_subif_13341_31859));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13416 (.out1(out_UUdata_converter_FU_31_i0_fu___float64_subif_13341_13416), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i0_fu___float64_subif_13341_31861));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_subif_13341_13417 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_subif_13341_13417), .in1(out_UUdata_converter_FU_31_i0_fu___float64_subif_13341_13416), .in2(out_const_20));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_subif_13341_13418 (.out1(out_ui_bit_ior_expr_FU_0_64_64_80_i0_fu___float64_subif_13341_13418), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i1_fu___float64_subif_13341_13409), .in2(out_ui_lshift_expr_FU_64_0_64_112_i0_fu___float64_subif_13341_13417));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(3), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_13419 (.out1(out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_subif_13341_13419), .in1(out_ui_bit_ior_expr_FU_0_64_64_80_i0_fu___float64_subif_13341_13418), .in2(out_const_2));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13420 (.out1(out_UUdata_converter_FU_32_i0_fu___float64_subif_13341_13420), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i1_fu___float64_subif_13341_31863));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_subif_13341_13421 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_subif_13341_13421), .in1(out_UUdata_converter_FU_32_i0_fu___float64_subif_13341_13420), .in2(out_const_20));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(53), .BITSIZE_out1(53)) fu___float64_subif_13341_13422 (.out1(out_ui_bit_ior_expr_FU_0_64_64_81_i0_fu___float64_subif_13341_13422), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i0_fu___float64_subif_13341_13407), .in2(out_ui_lshift_expr_FU_64_0_64_112_i1_fu___float64_subif_13341_13421));
  ui_lshift_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(3), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_13423 (.out1(out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_subif_13341_13423), .in1(out_ui_bit_ior_expr_FU_0_64_64_81_i0_fu___float64_subif_13341_13422), .in2(out_const_2));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13424 (.out1(out_ui_rshift_expr_FU_16_0_16_148_i0_fu___float64_subif_13341_13424), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_15));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13425 (.out1(out_ui_rshift_expr_FU_16_0_16_149_i0_fu___float64_subif_13341_13425), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_21));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13426 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i0_fu___float64_subif_13341_13426), .in1(out_ui_rshift_expr_FU_16_0_16_149_i0_fu___float64_subif_13341_13425), .in2(out_ui_rshift_expr_FU_16_0_16_148_i0_fu___float64_subif_13341_13424));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(5), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13427 (.out1(out_ui_rshift_expr_FU_16_0_16_150_i0_fu___float64_subif_13341_13427), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(5), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13428 (.out1(out_ui_rshift_expr_FU_16_0_16_151_i0_fu___float64_subif_13341_13428), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_7));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13429 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i1_fu___float64_subif_13341_13429), .in1(out_ui_rshift_expr_FU_16_0_16_151_i0_fu___float64_subif_13341_13428), .in2(out_ui_rshift_expr_FU_16_0_16_150_i0_fu___float64_subif_13341_13427));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13430 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i2_fu___float64_subif_13341_13430), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i0_fu___float64_subif_13341_13426), .in2(out_ui_bit_ior_expr_FU_8_8_8_91_i1_fu___float64_subif_13341_13429));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(5), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13431 (.out1(out_ui_rshift_expr_FU_16_0_16_152_i0_fu___float64_subif_13341_13431), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_10));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13432 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in1(out_reg_23_reg_23), .in2(out_reg_24_reg_24));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13433 (.out1(out_ui_rshift_expr_FU_16_0_16_153_i0_fu___float64_subif_13341_13433), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_9));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13434 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i4_fu___float64_subif_13341_13434), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in2(out_reg_25_reg_25));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13435 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i0_fu___float64_subif_13341_13435), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i4_fu___float64_subif_13341_13434), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13436 (.out1(out_UIdata_converter_FU_19_i0_fu___float64_subif_13341_13436), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i0_fu___float64_subif_13341_13435));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13437 (.out1(out_lshift_expr_FU_64_0_64_51_i1_fu___float64_subif_13341_13437), .in1(out_UIdata_converter_FU_19_i0_fu___float64_subif_13341_13436), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13438 (.out1(out_rshift_expr_FU_64_0_64_56_i1_fu___float64_subif_13341_13438), .in1(out_lshift_expr_FU_64_0_64_51_i1_fu___float64_subif_13341_13437), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13439 (.out1(out_IUdata_converter_FU_20_i0_fu___float64_subif_13341_13439), .in1(out_rshift_expr_FU_64_0_64_56_i1_fu___float64_subif_13341_13438));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13440 (.out1(out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_subif_13341_13440), .in1(out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_subif_13341_13423), .in2(out_const_6));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13441 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i4_fu___float64_subif_13341_13441), .in1(out_reg_26_reg_26), .in2(out_IUdata_converter_FU_20_i0_fu___float64_subif_13341_13439));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_subif_13341_13442 (.out1(out_ui_rshift_expr_FU_64_0_64_160_i0_fu___float64_subif_13341_13442), .in1(out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_subif_13341_13423), .in2(out_const_6));
  ui_bit_and_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(64), .BITSIZE_out1(23)) fu___float64_subif_13341_13443 (.out1(out_ui_bit_and_expr_FU_32_32_32_69_i0_fu___float64_subif_13341_13443), .in1(out_reg_27_reg_27), .in2(out_IUdata_converter_FU_20_i0_fu___float64_subif_13341_13439));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(56)) fu___float64_subif_13341_13444 (.out1(out_ui_bit_not_expr_FU_64_64_93_i1_fu___float64_subif_13341_13444), .in1(out_IUdata_converter_FU_20_i0_fu___float64_subif_13341_13439));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(56), .BITSIZE_out1(55)) fu___float64_subif_13341_13445 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i5_fu___float64_subif_13341_13445), .in1(out_reg_22_reg_22), .in2(out_ui_bit_not_expr_FU_64_64_93_i1_fu___float64_subif_13341_13444));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_subif_13341_13446 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i2_fu___float64_subif_13341_13446), .in1(out_ui_bit_and_expr_FU_32_32_32_69_i0_fu___float64_subif_13341_13443), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i5_fu___float64_subif_13341_13445));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(4), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13447 (.out1(out_ui_rshift_expr_FU_16_0_16_154_i0_fu___float64_subif_13341_13447), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13448 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i5_fu___float64_subif_13341_13448), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in2(out_reg_28_reg_28));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13449 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i1_fu___float64_subif_13341_13449), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i5_fu___float64_subif_13341_13448), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13450 (.out1(out_UIdata_converter_FU_21_i0_fu___float64_subif_13341_13450), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i1_fu___float64_subif_13341_13449));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13451 (.out1(out_lshift_expr_FU_64_0_64_51_i2_fu___float64_subif_13341_13451), .in1(out_UIdata_converter_FU_21_i0_fu___float64_subif_13341_13450), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13452 (.out1(out_rshift_expr_FU_64_0_64_56_i2_fu___float64_subif_13341_13452), .in1(out_lshift_expr_FU_64_0_64_51_i2_fu___float64_subif_13341_13451), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13453 (.out1(out_IUdata_converter_FU_22_i0_fu___float64_subif_13341_13453), .in1(out_rshift_expr_FU_64_0_64_56_i2_fu___float64_subif_13341_13452));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13454 (.out1(out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_subif_13341_13454), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i2_fu___float64_subif_13341_13446), .in2(out_const_18));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(48), .PRECISION(64)) fu___float64_subif_13341_13455 (.out1(out_ui_rshift_expr_FU_64_0_64_161_i0_fu___float64_subif_13341_13455), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i4_fu___float64_subif_13341_13441), .in2(out_const_5));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(48), .BITSIZE_out1(64)) fu___float64_subif_13341_13456 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i3_fu___float64_subif_13341_13456), .in1(out_ui_lshift_expr_FU_64_0_64_115_i0_fu___float64_subif_13341_13454), .in2(out_ui_rshift_expr_FU_64_0_64_161_i0_fu___float64_subif_13341_13455));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13457 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i6_fu___float64_subif_13341_13457), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i3_fu___float64_subif_13341_13456), .in2(out_IUdata_converter_FU_22_i0_fu___float64_subif_13341_13453));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13458 (.out1(out_ui_bit_not_expr_FU_64_64_93_i2_fu___float64_subif_13341_13458), .in1(out_IUdata_converter_FU_22_i0_fu___float64_subif_13341_13453));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13459 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i7_fu___float64_subif_13341_13459), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i4_fu___float64_subif_13341_13441), .in2(out_ui_bit_not_expr_FU_64_64_93_i2_fu___float64_subif_13341_13458));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(6), .BITSIZE_out1(39), .PRECISION(64)) fu___float64_subif_13341_13461 (.out1(out_ui_rshift_expr_FU_64_0_64_161_i1_fu___float64_subif_13341_13461), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i2_fu___float64_subif_13341_13446), .in2(out_const_5));
  ui_bit_and_expr_FU #(.BITSIZE_in1(39), .BITSIZE_in2(64), .BITSIZE_out1(39)) fu___float64_subif_13341_13462 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i8_fu___float64_subif_13341_13462), .in1(out_ui_rshift_expr_FU_64_0_64_161_i1_fu___float64_subif_13341_13461), .in2(out_IUdata_converter_FU_22_i0_fu___float64_subif_13341_13453));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_subif_13341_13463 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i9_fu___float64_subif_13341_13463), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i2_fu___float64_subif_13341_13446), .in2(out_ui_bit_not_expr_FU_64_64_93_i2_fu___float64_subif_13341_13458));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(39), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_subif_13341_13464 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i4_fu___float64_subif_13341_13464), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i8_fu___float64_subif_13341_13462), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i9_fu___float64_subif_13341_13463));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13465 (.out1(out_ui_rshift_expr_FU_16_0_16_155_i0_fu___float64_subif_13341_13465), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_14));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13466 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i6_fu___float64_subif_13341_13466), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in2(out_reg_29_reg_29));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13467 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i2_fu___float64_subif_13341_13467), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i6_fu___float64_subif_13341_13466), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13468 (.out1(out_UIdata_converter_FU_23_i0_fu___float64_subif_13341_13468), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i2_fu___float64_subif_13341_13467));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13469 (.out1(out_lshift_expr_FU_64_0_64_51_i3_fu___float64_subif_13341_13469), .in1(out_UIdata_converter_FU_23_i0_fu___float64_subif_13341_13468), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13470 (.out1(out_rshift_expr_FU_64_0_64_56_i3_fu___float64_subif_13341_13470), .in1(out_lshift_expr_FU_64_0_64_51_i3_fu___float64_subif_13341_13469), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13471 (.out1(out_IUdata_converter_FU_24_i0_fu___float64_subif_13341_13471), .in1(out_rshift_expr_FU_64_0_64_56_i3_fu___float64_subif_13341_13470));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13472 (.out1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_subif_13341_13472), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i4_fu___float64_subif_13341_13464), .in2(out_const_23));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(56), .PRECISION(64)) fu___float64_subif_13341_13473 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i0_fu___float64_subif_13341_13473), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i18_ui_bit_ior_expr_FU_64_64_64_90_i18), .in2(out_const_4));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13474 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i5_fu___float64_subif_13341_13474), .in1(out_ui_rshift_expr_FU_64_0_64_162_i0_fu___float64_subif_13341_13473), .in2(out_reg_37_reg_37));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13475 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i10_fu___float64_subif_13341_13475), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i5_fu___float64_subif_13341_13474), .in2(out_reg_36_reg_36));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13476 (.out1(out_ui_bit_not_expr_FU_64_64_93_i3_fu___float64_subif_13341_13476), .in1(out_IUdata_converter_FU_24_i0_fu___float64_subif_13341_13471));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13477 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i11_fu___float64_subif_13341_13477), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i18_ui_bit_ior_expr_FU_64_64_64_90_i18), .in2(out_reg_38_reg_38));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13478 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i6_fu___float64_subif_13341_13478), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i10_fu___float64_subif_13341_13475), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i11_fu___float64_subif_13341_13477));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_13479 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i1_fu___float64_subif_13341_13479), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i4_fu___float64_subif_13341_13464), .in2(out_const_4));
  ui_bit_and_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(64), .BITSIZE_out1(47)) fu___float64_subif_13341_13480 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i12_fu___float64_subif_13341_13480), .in1(out_reg_39_reg_39), .in2(out_reg_36_reg_36));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_subif_13341_13481 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i13_fu___float64_subif_13341_13481), .in1(out_reg_35_reg_35), .in2(out_reg_38_reg_38));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_subif_13341_13482 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i7_fu___float64_subif_13341_13482), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i12_fu___float64_subif_13341_13480), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i13_fu___float64_subif_13341_13481));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13483 (.out1(out_ui_rshift_expr_FU_16_0_16_156_i0_fu___float64_subif_13341_13483), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_2));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13484 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i7_fu___float64_subif_13341_13484), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in2(out_reg_30_reg_30));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13485 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i3_fu___float64_subif_13341_13485), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i7_fu___float64_subif_13341_13484), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13486 (.out1(out_UIdata_converter_FU_25_i0_fu___float64_subif_13341_13486), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i3_fu___float64_subif_13341_13485));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13487 (.out1(out_lshift_expr_FU_64_0_64_51_i4_fu___float64_subif_13341_13487), .in1(out_UIdata_converter_FU_25_i0_fu___float64_subif_13341_13486), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13488 (.out1(out_rshift_expr_FU_64_0_64_56_i4_fu___float64_subif_13341_13488), .in1(out_lshift_expr_FU_64_0_64_51_i4_fu___float64_subif_13341_13487), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13489 (.out1(out_IUdata_converter_FU_26_i0_fu___float64_subif_13341_13489), .in1(out_rshift_expr_FU_64_0_64_56_i4_fu___float64_subif_13341_13488));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13490 (.out1(out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_subif_13341_13490), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i7_fu___float64_subif_13341_13482), .in2(out_const_24));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(4), .BITSIZE_out1(60), .PRECISION(64)) fu___float64_subif_13341_13491 (.out1(out_ui_rshift_expr_FU_64_0_64_163_i0_fu___float64_subif_13341_13491), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i6_fu___float64_subif_13341_13478), .in2(out_const_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(60), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13492 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i8_fu___float64_subif_13341_13492), .in1(out_ui_rshift_expr_FU_64_0_64_163_i0_fu___float64_subif_13341_13491), .in2(out_ui_lshift_expr_FU_64_0_64_117_i0_fu___float64_subif_13341_13490));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13493 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i14_fu___float64_subif_13341_13493), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i8_fu___float64_subif_13341_13492), .in2(out_reg_40_reg_40));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13494 (.out1(out_ui_bit_not_expr_FU_64_64_93_i4_fu___float64_subif_13341_13494), .in1(out_IUdata_converter_FU_26_i0_fu___float64_subif_13341_13489));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13495 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i15_fu___float64_subif_13341_13495), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i6_fu___float64_subif_13341_13478), .in2(out_reg_41_reg_41));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13496 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i9_fu___float64_subif_13341_13496), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i14_fu___float64_subif_13341_13493), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i15_fu___float64_subif_13341_13495));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(51), .PRECISION(64)) fu___float64_subif_13341_13497 (.out1(out_ui_rshift_expr_FU_64_0_64_163_i1_fu___float64_subif_13341_13497), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i7_fu___float64_subif_13341_13482), .in2(out_const_3));
  ui_bit_and_expr_FU #(.BITSIZE_in1(51), .BITSIZE_in2(64), .BITSIZE_out1(51)) fu___float64_subif_13341_13498 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i16_fu___float64_subif_13341_13498), .in1(out_ui_rshift_expr_FU_64_0_64_163_i1_fu___float64_subif_13341_13497), .in2(out_reg_40_reg_40));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_subif_13341_13499 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i17_fu___float64_subif_13341_13499), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i7_fu___float64_subif_13341_13482), .in2(out_reg_41_reg_41));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(51), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_subif_13341_13500 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i10_fu___float64_subif_13341_13500), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i16_fu___float64_subif_13341_13498), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i17_fu___float64_subif_13341_13499));
  ui_rshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(16)) fu___float64_subif_13341_13501 (.out1(out_ui_rshift_expr_FU_16_0_16_157_i0_fu___float64_subif_13341_13501), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13502 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i8_fu___float64_subif_13341_13502), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in2(out_reg_31_reg_31));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13503 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i4_fu___float64_subif_13341_13503), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i8_fu___float64_subif_13341_13502), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13504 (.out1(out_UIdata_converter_FU_27_i0_fu___float64_subif_13341_13504), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i4_fu___float64_subif_13341_13503));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13505 (.out1(out_lshift_expr_FU_64_0_64_51_i5_fu___float64_subif_13341_13505), .in1(out_UIdata_converter_FU_27_i0_fu___float64_subif_13341_13504), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13506 (.out1(out_rshift_expr_FU_64_0_64_56_i5_fu___float64_subif_13341_13506), .in1(out_lshift_expr_FU_64_0_64_51_i5_fu___float64_subif_13341_13505), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13507 (.out1(out_IUdata_converter_FU_28_i0_fu___float64_subif_13341_13507), .in1(out_rshift_expr_FU_64_0_64_56_i5_fu___float64_subif_13341_13506));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13508 (.out1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_subif_13341_13508), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i10_fu___float64_subif_13341_13500), .in2(out_const_26));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(3), .BITSIZE_out1(62), .PRECISION(64)) fu___float64_subif_13341_13509 (.out1(out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_subif_13341_13509), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i9_fu___float64_subif_13341_13496), .in2(out_const_2));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(62), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13510 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i11_fu___float64_subif_13341_13510), .in1(out_reg_48_reg_48), .in2(out_reg_47_reg_47));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13511 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i18_fu___float64_subif_13341_13511), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i11_fu___float64_subif_13341_13510), .in2(out_reg_42_reg_42));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13512 (.out1(out_ui_bit_not_expr_FU_64_64_93_i5_fu___float64_subif_13341_13512), .in1(out_IUdata_converter_FU_28_i0_fu___float64_subif_13341_13507));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13513 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i19_fu___float64_subif_13341_13513), .in1(out_reg_46_reg_46), .in2(out_reg_43_reg_43));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13514 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i12_fu___float64_subif_13341_13514), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i18_fu___float64_subif_13341_13511), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i19_fu___float64_subif_13341_13513));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(3), .BITSIZE_out1(53), .PRECISION(64)) fu___float64_subif_13341_13515 (.out1(out_ui_rshift_expr_FU_64_0_64_164_i1_fu___float64_subif_13341_13515), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i10_fu___float64_subif_13341_13500), .in2(out_const_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(64), .BITSIZE_out1(53)) fu___float64_subif_13341_13516 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i20_fu___float64_subif_13341_13516), .in1(out_ui_rshift_expr_FU_64_0_64_164_i1_fu___float64_subif_13341_13515), .in2(out_reg_42_reg_42));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_subif_13341_13517 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i21_fu___float64_subif_13341_13517), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i10_fu___float64_subif_13341_13500), .in2(out_reg_43_reg_43));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(53), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_subif_13341_13518 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i13_fu___float64_subif_13341_13518), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i20_fu___float64_subif_13341_13516), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i21_fu___float64_subif_13341_13517));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(12), .BITSIZE_out1(2)) fu___float64_subif_13341_13519 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i9_fu___float64_subif_13341_13519), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i3_fu___float64_subif_13341_13432), .in2(out_reg_19_reg_19));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13520 (.out1(out_ui_bit_and_expr_FU_1_0_1_65_i5_fu___float64_subif_13341_13520), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i9_fu___float64_subif_13341_13519), .in2(out_const_29));
  UIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13521 (.out1(out_UIdata_converter_FU_29_i0_fu___float64_subif_13341_13521), .in1(out_ui_bit_and_expr_FU_1_0_1_65_i5_fu___float64_subif_13341_13520));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13522 (.out1(out_lshift_expr_FU_64_0_64_51_i6_fu___float64_subif_13341_13522), .in1(out_UIdata_converter_FU_29_i0_fu___float64_subif_13341_13521), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13523 (.out1(out_rshift_expr_FU_64_0_64_56_i6_fu___float64_subif_13341_13523), .in1(out_lshift_expr_FU_64_0_64_51_i6_fu___float64_subif_13341_13522), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13524 (.out1(out_IUdata_converter_FU_30_i0_fu___float64_subif_13341_13524), .in1(out_rshift_expr_FU_64_0_64_56_i6_fu___float64_subif_13341_13523));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13525 (.out1(out_ui_lshift_expr_FU_64_0_64_119_i0_fu___float64_subif_13341_13525), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i13_fu___float64_subif_13341_13518), .in2(out_const_27));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13526 (.out1(out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_subif_13341_13526), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i12_fu___float64_subif_13341_13514), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13527 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i14_fu___float64_subif_13341_13527), .in1(out_ui_rshift_expr_FU_64_0_64_165_i0_fu___float64_subif_13341_13526), .in2(out_reg_49_reg_49));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13528 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i22_fu___float64_subif_13341_13528), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i14_fu___float64_subif_13341_13527), .in2(out_reg_44_reg_44));
  ui_bit_not_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13529 (.out1(out_ui_bit_not_expr_FU_64_64_93_i6_fu___float64_subif_13341_13529), .in1(out_IUdata_converter_FU_30_i0_fu___float64_subif_13341_13524));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13530 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i23_fu___float64_subif_13341_13530), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i12_fu___float64_subif_13341_13514), .in2(out_reg_45_reg_45));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13531 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i15_fu___float64_subif_13341_13531), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i22_fu___float64_subif_13341_13528), .in2(out_ui_bit_and_expr_FU_64_64_64_75_i23_fu___float64_subif_13341_13530));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(2), .BITSIZE_out1(54), .PRECISION(64)) fu___float64_subif_13341_13532 (.out1(out_ui_rshift_expr_FU_64_0_64_165_i1_fu___float64_subif_13341_13532), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i13_fu___float64_subif_13341_13518), .in2(out_const_1));
  ui_bit_and_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(64), .BITSIZE_out1(54)) fu___float64_subif_13341_13533 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i24_fu___float64_subif_13341_13533), .in1(out_ui_rshift_expr_FU_64_0_64_165_i1_fu___float64_subif_13341_13532), .in2(out_reg_44_reg_44));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(64), .BITSIZE_out1(55)) fu___float64_subif_13341_13534 (.out1(out_ui_bit_and_expr_FU_64_64_64_75_i25_fu___float64_subif_13341_13534), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i13_fu___float64_subif_13341_13518), .in2(out_reg_45_reg_45));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(54), .BITSIZE_in2(55), .BITSIZE_out1(55)) fu___float64_subif_13341_13535 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i19_fu___float64_subif_13341_13535), .in1(out_reg_50_reg_50), .in2(out_reg_51_reg_51));
  ui_ne_expr_FU #(.BITSIZE_in1(61), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13536 (.out1(out_ui_ne_expr_FU_64_0_64_146_i0_fu___float64_subif_13341_13536), .in1(out_reg_53_reg_53), .in2(out_const_0));
  UIconvert_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13538 (.out1(out_UIconvert_expr_FU_16_i0_fu___float64_subif_13341_13538), .in1(out_ui_bit_xor_expr_FU_1_1_1_95_i0_fu___float64_subif_13341_13369));
  lshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13539 (.out1(out_lshift_expr_FU_64_0_64_51_i7_fu___float64_subif_13341_13539), .in1(out_UIconvert_expr_FU_16_i0_fu___float64_subif_13341_13538), .in2(out_const_27));
  rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_13540 (.out1(out_rshift_expr_FU_64_0_64_56_i7_fu___float64_subif_13341_13540), .in1(out_lshift_expr_FU_64_0_64_51_i7_fu___float64_subif_13341_13539), .in2(out_const_27));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(57)) fu___float64_subif_13341_13541 (.out1(out_IUdata_converter_FU_17_i0_fu___float64_subif_13341_13541), .in1(out_rshift_expr_FU_64_0_64_56_i7_fu___float64_subif_13341_13540));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(57), .BITSIZE_out1(57)) fu___float64_subif_13341_13542 (.out1(out_ui_bit_xor_expr_FU_64_64_64_96_i0_fu___float64_subif_13341_13542), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i19_fu___float64_subif_13341_13535), .in2(out_reg_9_reg_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_subif_13341_13543 (.out1(out_ui_bit_and_expr_FU_64_0_64_72_i0_fu___float64_subif_13341_13543), .in1(out_ui_bit_xor_expr_FU_64_64_64_96_i0_fu___float64_subif_13341_13542), .in2(out_const_53));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13544 (.out1(out_truth_not_expr_FU_1_1_58_i0_fu___float64_subif_13341_13544), .in1(out_ui_ne_expr_FU_64_0_64_146_i0_fu___float64_subif_13341_13536));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13545 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i3_fu___float64_subif_13341_13545), .in1(out_truth_not_expr_FU_1_1_58_i0_fu___float64_subif_13341_13544), .in2(out_reg_15_reg_15));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13546 (.out1(out_UUdata_converter_FU_33_i0_fu___float64_subif_13341_13546), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i3_fu___float64_subif_13341_13545));
  ui_ternary_plus_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(56), .BITSIZE_in3(55), .BITSIZE_out1(57)) fu___float64_subif_13341_13548 (.out1(out_ui_ternary_plus_expr_FU_64_64_64_64_193_i0_fu___float64_subif_13341_13548), .in1(out_reg_54_reg_54), .in2(out_reg_52_reg_52), .in3(out_reg_21_reg_21));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_subif_13341_13549 (.out1(out_ui_bit_and_expr_FU_64_0_64_72_i1_fu___float64_subif_13341_13549), .in1(out_reg_56_reg_56), .in2(out_const_53));
  ui_lshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(5), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13550 (.out1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in1(out_ui_bit_and_expr_FU_64_0_64_72_i1_fu___float64_subif_13341_13549), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(32), .PRECISION(64)) fu___float64_subif_13341_13551 (.out1(out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_subif_13341_13551), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_6));
  ui_eq_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13552 (.out1(out_ui_eq_expr_FU_32_0_32_108_i0_fu___float64_subif_13341_13552), .in1(out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_subif_13341_13551), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13554 (.out1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_subif_13341_13554), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(17), .PRECISION(64)) fu___float64_subif_13341_13555 (.out1(out_ui_rshift_expr_FU_64_0_64_161_i2_fu___float64_subif_13341_13555), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_5));
  ui_bit_and_expr_FU #(.BITSIZE_in1(17), .BITSIZE_in2(16), .BITSIZE_out1(16)) fu___float64_subif_13341_13556 (.out1(out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_subif_13341_13556), .in1(out_ui_rshift_expr_FU_64_0_64_161_i2_fu___float64_subif_13341_13555), .in2(out_const_51));
  ui_bit_and_expr_FU #(.BITSIZE_in1(32), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_subif_13341_13561 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i0_fu___float64_subif_13341_13561), .in1(out_ui_rshift_expr_FU_64_0_64_160_i1_fu___float64_subif_13341_13551), .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(17), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_subif_13341_13566 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i1_fu___float64_subif_13341_13566), .in1(out_ui_rshift_expr_FU_64_0_64_161_i2_fu___float64_subif_13341_13555), .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_subif_13341_13571 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i2_fu___float64_subif_13341_13571), .in1(out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_subif_13341_13695), .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13603 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i0_fu___float64_subif_13341_13603), .in1(out_ui_lshift_expr_FU_8_0_8_139_i2_fu___float64_subif_13341_32308), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(4), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_subif_13341_13604 (.out1(out_ui_rshift_expr_FU_8_0_8_189_i0_fu___float64_subif_13341_13604), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i18_fu___float64_subif_13341_32071), .in2(out_const_3));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_subif_13341_13610 (.out1(out_ui_rshift_expr_FU_8_0_8_190_i0_fu___float64_subif_13341_13610), .in1(out_ui_lshift_expr_FU_8_0_8_139_i3_fu___float64_subif_13341_32328), .in2(out_const_2));
  ui_eq_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13611 (.out1(out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_subif_13341_13611), .in1(out_ui_rshift_expr_FU_8_0_8_190_i0_fu___float64_subif_13341_13610), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(3), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13613 (.out1(out_ui_lshift_expr_FU_64_0_64_113_i2_fu___float64_subif_13341_13613), .in1(out_ui_lshift_expr_FU_64_0_64_126_i3_fu___float64_subif_13341_32318), .in2(out_const_2));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13614 (.out1(out_ui_bit_and_expr_FU_8_0_8_78_i0_fu___float64_subif_13341_13614), .in1(out_ui_lshift_expr_FU_8_0_8_139_i3_fu___float64_subif_13341_32328), .in2(out_const_30));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13615 (.out1(out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_subif_13341_13615), .in1(out_ui_rshift_expr_FU_8_0_8_191_i0_fu___float64_subif_13341_30436), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(2), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13619 (.out1(out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_subif_13341_13619), .in1(out_ui_lshift_expr_FU_64_0_64_126_i4_fu___float64_subif_13341_32338), .in2(out_const_1));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13621 (.out1(out_UUdata_converter_FU_39_i0_fu___float64_subif_13341_13621), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i5_fu___float64_subif_13341_31887));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13622 (.out1(out_UUdata_converter_FU_36_i0_fu___float64_subif_13341_13622), .in1(out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_subif_13341_13611));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_subif_13341_13623 (.out1(out_ui_lshift_expr_FU_8_0_8_135_i0_fu___float64_subif_13341_13623), .in1(out_UUdata_converter_FU_36_i0_fu___float64_subif_13341_13622), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu___float64_subif_13341_13624 (.out1(out_ui_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_subif_13341_13624), .in1(out_UUdata_converter_FU_39_i0_fu___float64_subif_13341_13621), .in2(out_ui_lshift_expr_FU_8_0_8_135_i0_fu___float64_subif_13341_13623));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13625 (.out1(out_UUdata_converter_FU_37_i0_fu___float64_subif_13341_13625), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i23_fu___float64_subif_13341_32107));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_subif_13341_13626 (.out1(out_ui_lshift_expr_FU_8_0_8_136_i0_fu___float64_subif_13341_13626), .in1(out_UUdata_converter_FU_37_i0_fu___float64_subif_13341_13625), .in2(out_const_14));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13627 (.out1(out_UUdata_converter_FU_38_i0_fu___float64_subif_13341_13627), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i22_fu___float64_subif_13341_32105));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(4), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13628 (.out1(out_ui_lshift_expr_FU_8_0_8_137_i0_fu___float64_subif_13341_13628), .in1(out_UUdata_converter_FU_38_i0_fu___float64_subif_13341_13627), .in2(out_const_3));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(5)) fu___float64_subif_13341_13629 (.out1(out_ui_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_subif_13341_13629), .in1(out_ui_lshift_expr_FU_8_0_8_137_i0_fu___float64_subif_13341_13628), .in2(out_ui_lshift_expr_FU_8_0_8_136_i0_fu___float64_subif_13341_13626));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13630 (.out1(out_UUdata_converter_FU_35_i0_fu___float64_subif_13341_13630), .in1(out_ui_eq_expr_FU_32_0_32_108_i0_fu___float64_subif_13341_13552));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(4), .BITSIZE_out1(6), .PRECISION(64)) fu___float64_subif_13341_13631 (.out1(out_ui_lshift_expr_FU_8_0_8_138_i0_fu___float64_subif_13341_13631), .in1(out_UUdata_converter_FU_35_i0_fu___float64_subif_13341_13630), .in2(out_const_9));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(6), .BITSIZE_out1(6)) fu___float64_subif_13341_13632 (.out1(out_ui_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_subif_13341_13632), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i23_fu___float64_subif_13341_32111), .in2(out_reg_64_reg_64));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(5), .BITSIZE_out1(6)) fu___float64_subif_13341_13633 (.out1(out_ui_bit_ior_expr_FU_0_8_8_87_i0_fu___float64_subif_13341_13633), .in1(out_ui_bit_ior_expr_FU_0_8_8_86_i0_fu___float64_subif_13341_13632), .in2(out_ui_bit_ior_expr_FU_0_8_8_85_i0_fu___float64_subif_13341_13629));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(2), .BITSIZE_out1(6)) fu___float64_subif_13341_13634 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i10_fu___float64_subif_13341_13634), .in1(out_ui_bit_ior_expr_FU_0_8_8_87_i0_fu___float64_subif_13341_13633), .in2(out_ui_bit_ior_expr_FU_0_8_8_84_i0_fu___float64_subif_13341_13624));
  UUconvert_expr_FU #(.BITSIZE_in1(6), .BITSIZE_out1(6)) fu___float64_subif_13341_13635 (.out1(out_UUconvert_expr_FU_40_i0_fu___float64_subif_13341_13635), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i10_fu___float64_subif_13341_13634));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_13636 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_subif_13341_13636), .in1(out_ui_lshift_expr_FU_64_0_64_126_i5_fu___float64_subif_13341_32348), .in2(out_const_4));
  ui_eq_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(6), .BITSIZE_out1(1)) fu___float64_subif_13341_13637 (.out1(out_ui_eq_expr_FU_8_0_8_110_i0_fu___float64_subif_13341_13637), .in1(out_reg_84_reg_84), .in2(out_const_47));
  ui_bit_and_expr_FU #(.BITSIZE_in1(57), .BITSIZE_in2(56), .BITSIZE_out1(56)) fu___float64_subif_13341_13639 (.out1(out_ui_bit_and_expr_FU_64_0_64_73_i0_fu___float64_subif_13341_13639), .in1(out_reg_56_reg_56), .in2(out_const_35));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13640 (.out1(out_ui_eq_expr_FU_1_0_1_106_i0_fu___float64_subif_13341_13640), .in1(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_subif_13341_30440), .in2(out_const_0));
  ui_lt_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(6), .BITSIZE_out1(1)) fu___float64_subif_13341_13642 (.out1(out_ui_lt_expr_FU_16_16_16_140_i0_fu___float64_subif_13341_13642), .in1(out_reg_18_reg_18), .in2(out_reg_84_reg_84));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13643 (.out1(out_ui_bit_ior_expr_FU_1_1_1_89_i0_fu___float64_subif_13341_13643), .in1(out_ui_lt_expr_FU_16_16_16_140_i0_fu___float64_subif_13341_13642), .in2(out_ui_eq_expr_FU_8_0_8_110_i0_fu___float64_subif_13341_13637));
  ui_minus_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(6), .BITSIZE_out1(16)) fu___float64_subif_13341_13645 (.out1(out_ui_minus_expr_FU_16_16_16_143_i1_fu___float64_subif_13341_13645), .in1(out_reg_18_reg_18), .in2(out_reg_84_reg_84));
  UIdata_converter_FU #(.BITSIZE_in1(16), .BITSIZE_out1(12)) fu___float64_subif_13341_13646 (.out1(out_UIdata_converter_FU_41_i0_fu___float64_subif_13341_13646), .in1(out_ui_minus_expr_FU_16_16_16_143_i1_fu___float64_subif_13341_13645));
  plus_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(2), .BITSIZE_out1(13)) fu___float64_subif_13341_13647 (.out1(out_plus_expr_FU_16_0_16_54_i0_fu___float64_subif_13341_13647), .in1(out_UIdata_converter_FU_41_i0_fu___float64_subif_13341_13646), .in2(out_const_1));
  IUdata_converter_FU #(.BITSIZE_in1(13), .BITSIZE_out1(12)) fu___float64_subif_13341_13648 (.out1(out_IUdata_converter_FU_42_i0_fu___float64_subif_13341_13648), .in1(out_plus_expr_FU_16_0_16_54_i0_fu___float64_subif_13341_13647));
  UUdata_converter_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13649 (.out1(out_UUdata_converter_FU_43_i0_fu___float64_subif_13341_13649), .in1(out_IUdata_converter_FU_42_i0_fu___float64_subif_13341_13648));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(7), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_13650 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i2_fu___float64_subif_13341_13650), .in1(out_UUdata_converter_FU_43_i0_fu___float64_subif_13341_13649), .in2(out_const_20));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(3), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_subif_13341_13652 (.out1(out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_subif_13341_13652), .in1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_subif_13341_13636), .in2(out_const_14));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(3), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_subif_13341_13653 (.out1(out_ui_rshift_expr_FU_64_0_64_164_i2_fu___float64_subif_13341_13653), .in1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_subif_13341_13636), .in2(out_const_2));
  ui_rshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(2), .BITSIZE_out1(2), .PRECISION(64)) fu___float64_subif_13341_13654 (.out1(out_ui_rshift_expr_FU_64_0_64_165_i2_fu___float64_subif_13341_13654), .in1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_subif_13341_13636), .in2(out_const_1));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(52), .BITSIZE_out1(2)) fu___float64_subif_13341_13655 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i11_fu___float64_subif_13341_13655), .in1(out_reg_86_reg_86), .in2(out_reg_85_reg_85));
  ui_bit_and_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13656 (.out1(out_ui_bit_and_expr_FU_1_0_1_66_i0_fu___float64_subif_13341_13656), .in1(out_ui_rshift_expr_FU_64_0_64_162_i2_fu___float64_subif_13341_13636), .in2(out_const_29));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13657 (.out1(out_UUdata_converter_FU_34_i0_fu___float64_subif_13341_13657), .in1(out_ui_ne_expr_FU_64_0_64_146_i0_fu___float64_subif_13341_13536));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13658 (.out1(out_ui_bit_ior_expr_FU_1_1_1_89_i1_fu___float64_subif_13341_13658), .in1(out_reg_87_reg_87), .in2(out_reg_55_reg_55));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(2)) fu___float64_subif_13341_13659 (.out1(out_ui_bit_ior_expr_FU_8_8_8_91_i12_fu___float64_subif_13341_13659), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i11_fu___float64_subif_13341_13655), .in2(out_ui_bit_ior_expr_FU_1_1_1_89_i1_fu___float64_subif_13341_13658));
  ui_bit_and_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13660 (.out1(out_ui_bit_and_expr_FU_1_0_1_67_i0_fu___float64_subif_13341_13660), .in1(out_ui_rshift_expr_FU_64_0_64_164_i2_fu___float64_subif_13341_13653), .in2(out_const_29));
  ui_bit_and_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13661 (.out1(out_ui_bit_and_expr_FU_64_0_64_74_i0_fu___float64_subif_13341_13661), .in1(out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_subif_13341_13652), .in2(out_const_52));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(64)) fu___float64_subif_13341_13662 (.out1(out_ui_bit_ior_expr_FU_0_64_64_82_i0_fu___float64_subif_13341_13662), .in1(out_ui_lshift_expr_FU_64_0_64_133_i0_fu___float64_subif_13341_32359), .in2(out_reg_89_reg_89));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_out1(1)) fu___float64_subif_13341_13663 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i4_fu___float64_subif_13341_13663), .in1(out_reg_88_reg_88), .in2(out_ui_bit_ior_expr_FU_8_8_8_91_i12_fu___float64_subif_13341_13659));
  ui_plus_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(1), .BITSIZE_out1(64)) fu___float64_subif_13341_13664 (.out1(out_ui_plus_expr_FU_64_64_64_147_i0_fu___float64_subif_13341_13664), .in1(out_reg_90_reg_90), .in2(out_reg_91_reg_91));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13665 (.out1(out_truth_not_expr_FU_1_1_58_i1_fu___float64_subif_13341_13665), .in1(out_ui_eq_expr_FU_16_0_16_102_i1_fu___float64_subif_13341_13365));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_subif_13341_13667 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_subif_13341_13667), .in1(out_ui_plus_expr_FU_64_64_64_147_i0_fu___float64_subif_13341_13664), .in2(out_const_20));
  UUconvert_expr_FU #(.BITSIZE_in1(12), .BITSIZE_out1(12)) fu___float64_subif_13341_13668 (.out1(out_UUconvert_expr_FU_44_i0_fu___float64_subif_13341_13668), .in1(out_ui_rshift_expr_FU_64_0_64_159_i2_fu___float64_subif_13341_13667));
  ui_bit_and_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13669 (.out1(out_ui_bit_and_expr_FU_16_0_16_63_i0_fu___float64_subif_13341_13669), .in1(out_UUconvert_expr_FU_44_i0_fu___float64_subif_13341_13668), .in2(out_const_50));
  UUdata_converter_FU #(.BITSIZE_in1(11), .BITSIZE_out1(11)) fu___float64_subif_13341_13670 (.out1(out_UUdata_converter_FU_45_i0_fu___float64_subif_13341_13670), .in1(out_ui_bit_and_expr_FU_16_0_16_63_i0_fu___float64_subif_13341_13669));
  ui_lshift_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(7), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13671 (.out1(out_ui_lshift_expr_FU_64_0_64_112_i3_fu___float64_subif_13341_13671), .in1(out_UUdata_converter_FU_45_i0_fu___float64_subif_13341_13670), .in2(out_const_20));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13673 (.out1(out_truth_not_expr_FU_1_1_58_i2_fu___float64_subif_13341_13673), .in1(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_subif_13341_13361));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(52)) fu___float64_subif_13341_13676 (.out1(out_ui_bit_and_expr_FU_64_0_64_74_i1_fu___float64_subif_13341_13676), .in1(out_ui_plus_expr_FU_64_64_64_147_i0_fu___float64_subif_13341_13664), .in2(out_const_52));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13679 (.out1(out_truth_not_expr_FU_1_1_58_i3_fu___float64_subif_13341_13679), .in1(out_truth_xor_expr_FU_1_1_1_61_i0_fu___float64_subif_13341_30417));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13683 (.out1(out_ui_bit_ior_expr_FU_1_1_1_89_i2_fu___float64_subif_13341_13683), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i0_fu___float64_subif_13341_13363), .in2(out_ui_bit_and_expr_FU_1_1_1_68_i1_fu___float64_subif_13341_13367));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13685 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i5_fu___float64_subif_13341_13685), .in1(out_ui_eq_expr_FU_16_0_16_102_i1_fu___float64_subif_13341_13365), .in2(out_truth_xor_expr_FU_1_1_1_61_i0_fu___float64_subif_13341_30417));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13686 (.out1(out_ui_bit_and_expr_FU_1_1_1_68_i6_fu___float64_subif_13341_13686), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i5_fu___float64_subif_13341_13685), .in2(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_subif_13341_13361));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13687 (.out1(out_UUdata_converter_FU_18_i0_fu___float64_subif_13341_13687), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i6_fu___float64_subif_13341_13686));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(52), .PRECISION(64)) fu___float64_subif_13341_13688 (.out1(out_ui_lshift_expr_FU_64_0_64_122_i0_fu___float64_subif_13341_13688), .in1(out_UUdata_converter_FU_18_i0_fu___float64_subif_13341_13687), .in2(out_const_19));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(52), .BITSIZE_out1(64)) fu___float64_subif_13341_13689 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i16_fu___float64_subif_13341_13689), .in1(out_reg_92_reg_92), .in2(out_reg_13_reg_13));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(52), .BITSIZE_in2(63), .BITSIZE_out1(63)) fu___float64_subif_13341_13691 (.out1(out_ui_bit_ior_expr_FU_0_64_64_83_i0_fu___float64_subif_13341_13691), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i10_fu___float64_subif_13341_31964), .in2(out_ui_lshift_expr_FU_64_0_64_133_i1_fu___float64_subif_13341_32390));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13692 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i17_fu___float64_subif_13341_13692), .in1(out_reg_97_reg_97), .in2(out_reg_96_reg_96));
  ui_view_convert_expr_FU #(.BITSIZE_in1(64), .BITSIZE_out1(64)) fu___float64_subif_13341_13693 (.out1(out_ui_view_convert_expr_FU_46_i0_fu___float64_subif_13341_13693), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i17_fu___float64_subif_13341_13692));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(16), .PRECISION(64)) fu___float64_subif_13341_13695 (.out1(out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_subif_13341_13695), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_18));
  ui_bit_and_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13697 (.out1(out_ui_bit_and_expr_FU_8_0_8_79_i0_fu___float64_subif_13341_13697), .in1(out_ui_lshift_expr_FU_8_0_8_139_i3_fu___float64_subif_13341_32328), .in2(out_const_32));
  ui_eq_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_13698 (.out1(out_ui_eq_expr_FU_1_0_1_105_i1_fu___float64_subif_13341_13698), .in1(out_ui_rshift_expr_FU_8_0_8_192_i0_fu___float64_subif_13341_30446), .in2(out_const_0));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13699 (.out1(out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_subif_13341_13699), .in1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_subif_13341_13554), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(9), .PRECISION(64)) fu___float64_subif_13341_13700 (.out1(out_ui_rshift_expr_FU_64_0_64_162_i3_fu___float64_subif_13341_13700), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_4));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_subif_13341_13701 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_subif_13341_13701), .in1(out_ui_rshift_expr_FU_64_0_64_162_i3_fu___float64_subif_13341_13700), .in2(out_const_48));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13703 (.out1(out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_subif_13341_13703), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(9), .PRECISION(64)) fu___float64_subif_13341_13704 (.out1(out_ui_rshift_expr_FU_64_0_64_168_i0_fu___float64_subif_13341_13704), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_12));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_subif_13341_13705 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_subif_13341_13705), .in1(out_ui_rshift_expr_FU_64_0_64_168_i0_fu___float64_subif_13341_13704), .in2(out_const_48));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13707 (.out1(out_ui_lshift_expr_FU_64_0_64_120_i1_fu___float64_subif_13341_13707), .in1(out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_subif_13341_13703), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13708 (.out1(out_ui_rshift_expr_FU_64_0_64_169_i0_fu___float64_subif_13341_13708), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_8));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13709 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i1_fu___float64_subif_13341_13709), .in1(out_ui_rshift_expr_FU_64_0_64_169_i0_fu___float64_subif_13341_13708), .in2(out_const_46));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13711 (.out1(out_ui_lshift_expr_FU_64_0_64_120_i2_fu___float64_subif_13341_13711), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13712 (.out1(out_ui_rshift_expr_FU_64_0_64_159_i3_fu___float64_subif_13341_13712), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_20));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13713 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i2_fu___float64_subif_13341_13713), .in1(out_ui_rshift_expr_FU_64_0_64_159_i3_fu___float64_subif_13341_13712), .in2(out_const_46));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13715 (.out1(out_ui_lshift_expr_FU_64_0_64_120_i3_fu___float64_subif_13341_13715), .in1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_subif_13341_13554), .in2(out_const_4));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13716 (.out1(out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_subif_13341_13716), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_11));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13717 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i3_fu___float64_subif_13341_13717), .in1(out_ui_rshift_expr_FU_64_0_64_170_i0_fu___float64_subif_13341_13716), .in2(out_const_46));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13719 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i0_fu___float64_subif_13341_13719), .in1(out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_subif_13341_13699), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13720 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i1_fu___float64_subif_13341_13720), .in1(out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_subif_13341_13703), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13721 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i2_fu___float64_subif_13341_13721), .in1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_subif_13341_13554), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13722 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_subif_13341_13722), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13723 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_subif_13341_13723), .in1(out_ui_lshift_expr_FU_64_0_64_120_i1_fu___float64_subif_13341_13707), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13724 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i5_fu___float64_subif_13341_13724), .in1(out_ui_lshift_expr_FU_64_0_64_120_i3_fu___float64_subif_13341_13715), .in2(out_const_3));
  ui_lshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_13725 (.out1(out_ui_lshift_expr_FU_64_0_64_124_i6_fu___float64_subif_13341_13725), .in1(out_ui_lshift_expr_FU_64_0_64_120_i2_fu___float64_subif_13341_13711), .in2(out_const_3));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(9), .PRECISION(64)) fu___float64_subif_13341_13726 (.out1(out_ui_rshift_expr_FU_64_0_64_171_i0_fu___float64_subif_13341_13726), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_17));
  ui_bit_and_expr_FU #(.BITSIZE_in1(9), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu___float64_subif_13341_13727 (.out1(out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_subif_13341_13727), .in1(out_ui_rshift_expr_FU_64_0_64_171_i0_fu___float64_subif_13341_13726), .in2(out_const_48));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(8), .PRECISION(64)) fu___float64_subif_13341_13729 (.out1(out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_subif_13341_13729), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_23));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(5), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13731 (.out1(out_ui_rshift_expr_FU_64_0_64_173_i0_fu___float64_subif_13341_13731), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_16));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13732 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i4_fu___float64_subif_13341_13732), .in1(out_ui_rshift_expr_FU_64_0_64_173_i0_fu___float64_subif_13341_13731), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13734 (.out1(out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_subif_13341_13734), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_13));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13735 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i5_fu___float64_subif_13341_13735), .in1(out_ui_rshift_expr_FU_64_0_64_174_i0_fu___float64_subif_13341_13734), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(5), .PRECISION(64)) fu___float64_subif_13341_13737 (.out1(out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_subif_13341_13737), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_22));
  ui_bit_and_expr_FU #(.BITSIZE_in1(5), .BITSIZE_in2(4), .BITSIZE_out1(4)) fu___float64_subif_13341_13738 (.out1(out_ui_bit_and_expr_FU_8_0_8_77_i6_fu___float64_subif_13341_13738), .in1(out_ui_rshift_expr_FU_64_0_64_175_i0_fu___float64_subif_13341_13737), .in2(out_const_46));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(7), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_subif_13341_13740 (.out1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_subif_13341_13740), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_24));
  ne_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29878 (.out1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_subif_13341_29878), .in1(out_cond_expr_FU_8_8_8_8_49_i0_fu___float64_subif_13341_31847), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29882 (.out1(out_ui_eq_expr_FU_16_0_16_103_i0_fu___float64_subif_13341_29882), .in1(out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_subif_13341_13556), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(11), .BITSIZE_out1(1)) fu___float64_subif_13341_29890 (.out1(out_ui_eq_expr_FU_16_0_16_104_i0_fu___float64_subif_13341_29890), .in1(out_ui_bit_ior_expr_FU_16_16_16_88_i1_fu___float64_subif_13341_13404), .in2(out_const_49));
  ui_lt_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29894 (.out1(out_ui_lt_expr_FU_1_1_1_141_i0_fu___float64_subif_13341_29894), .in1(out_ui_eq_expr_FU_16_0_16_102_i0_fu___float64_subif_13341_13361), .in2(out_truth_not_expr_FU_1_1_58_i1_fu___float64_subif_13341_13665));
  ui_lt_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29896 (.out1(out_ui_lt_expr_FU_1_1_1_141_i1_fu___float64_subif_13341_29896), .in1(out_ui_bit_ior_expr_FU_1_1_1_89_i0_fu___float64_subif_13341_13643), .in2(out_reg_10_reg_10));
  ui_lt_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29898 (.out1(out_ui_lt_expr_FU_1_1_1_141_i2_fu___float64_subif_13341_29898), .in1(out_reg_5_reg_5), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i3_fu___float64_subif_13341_31869));
  ui_le_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29902 (.out1(out_ui_le_expr_FU_1_1_1_111_i0_fu___float64_subif_13341_29902), .in1(out_ui_bit_ior_expr_FU_1_1_1_89_i0_fu___float64_subif_13341_13643), .in2(out_reg_11_reg_11));
  ui_eq_expr_FU #(.BITSIZE_in1(16), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29906 (.out1(out_ui_eq_expr_FU_16_0_16_103_i1_fu___float64_subif_13341_29906), .in1(out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_subif_13341_13695), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29908 (.out1(out_ui_eq_expr_FU_8_0_8_109_i1_fu___float64_subif_13341_29908), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_subif_13341_13701), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29910 (.out1(out_ui_eq_expr_FU_8_0_8_109_i2_fu___float64_subif_13341_29910), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_subif_13341_13705), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29912 (.out1(out_ui_eq_expr_FU_8_0_8_109_i3_fu___float64_subif_13341_29912), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i1_fu___float64_subif_13341_13709), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29914 (.out1(out_ui_eq_expr_FU_8_0_8_109_i4_fu___float64_subif_13341_29914), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i2_fu___float64_subif_13341_13713), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29916 (.out1(out_ui_eq_expr_FU_8_0_8_109_i5_fu___float64_subif_13341_29916), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i3_fu___float64_subif_13341_13717), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29918 (.out1(out_ui_eq_expr_FU_8_0_8_109_i6_fu___float64_subif_13341_29918), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_subif_13341_13727), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29920 (.out1(out_ui_eq_expr_FU_8_0_8_109_i7_fu___float64_subif_13341_29920), .in1(out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_subif_13341_13729), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29922 (.out1(out_ui_eq_expr_FU_8_0_8_109_i8_fu___float64_subif_13341_29922), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i4_fu___float64_subif_13341_13732), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29924 (.out1(out_ui_eq_expr_FU_8_0_8_109_i9_fu___float64_subif_13341_29924), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i5_fu___float64_subif_13341_13735), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29926 (.out1(out_ui_eq_expr_FU_8_0_8_109_i10_fu___float64_subif_13341_29926), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i6_fu___float64_subif_13341_13738), .in2(out_const_0));
  ui_eq_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_29928 (.out1(out_ui_eq_expr_FU_8_0_8_109_i11_fu___float64_subif_13341_29928), .in1(out_ui_rshift_expr_FU_64_0_64_176_i0_fu___float64_subif_13341_13740), .in2(out_const_0));
  truth_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_30417 (.out1(out_truth_xor_expr_FU_1_1_1_61_i0_fu___float64_subif_13341_30417), .in1(out_ui_extract_bit_expr_FU_8_i0_fu___float64_subif_13341_30467), .in2(out_truth_xor_expr_FU_1_0_1_60_i1_fu___float64_subif_13341_30452));
  truth_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_30426 (.out1(out_truth_xor_expr_FU_1_0_1_60_i0_fu___float64_subif_13341_30426), .in1(out_ui_extract_bit_expr_FU_9_i0_fu___float64_subif_13341_30482), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(2), .BITSIZE_out1(61), .PRECISION(64)) fu___float64_subif_13341_30430 (.out1(out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_subif_13341_30430), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i15_fu___float64_subif_13341_13531), .in2(out_const_39));
  ui_rshift_expr_FU #(.BITSIZE_in1(2), .BITSIZE_in2(1), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_30436 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i0_fu___float64_subif_13341_30436), .in1(out_ui_bit_and_expr_FU_8_0_8_78_i0_fu___float64_subif_13341_13614), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(56), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_30440 (.out1(out_ui_rshift_expr_FU_64_0_64_178_i0_fu___float64_subif_13341_30440), .in1(out_ui_bit_and_expr_FU_64_0_64_73_i0_fu___float64_subif_13341_13639), .in2(out_const_44));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(2), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_30446 (.out1(out_ui_rshift_expr_FU_8_0_8_192_i0_fu___float64_subif_13341_30446), .in1(out_ui_bit_and_expr_FU_8_0_8_79_i0_fu___float64_subif_13341_13697), .in2(out_const_39));
  truth_xor_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_30452 (.out1(out_truth_xor_expr_FU_1_0_1_60_i1_fu___float64_subif_13341_30452), .in1(out_ui_extract_bit_expr_FU_9_i0_fu___float64_subif_13341_30482), .in2(out_const_29));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_subif_13341_30467 (.out1(out_ui_extract_bit_expr_FU_8_i0_fu___float64_subif_13341_30467), .in1(out_fp_view_convert_expr_FU_2_i0_fu___float64_subif_13341_13346), .in2(out_const_47));
  ui_extract_bit_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6)) fu___float64_subif_13341_30482 (.out1(out_ui_extract_bit_expr_FU_9_i0_fu___float64_subif_13341_30482), .in1(out_fp_view_convert_expr_FU_3_i0_fu___float64_subif_13341_13347), .in2(out_const_47));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(1), .BITSIZE_out1(64)) fu___float64_subif_13341_31707 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i0_fu___float64_subif_13341_31707), .in1(out_ui_le_expr_FU_1_1_1_111_i0_fu___float64_subif_13341_29902), .in2(out_const_36), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(13), .BITSIZE_in3(1), .BITSIZE_out1(13)) fu___float64_subif_13341_31710 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i0_fu___float64_subif_13341_31710), .in1(out_ui_le_expr_FU_1_1_1_111_i0_fu___float64_subif_13341_29902), .in2(out_const_37), .in3(out_const_29));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31716 (.out1(out_truth_not_expr_FU_1_1_58_i4_fu___float64_subif_13341_31716), .in1(out_ui_eq_expr_FU_32_0_32_108_i0_fu___float64_subif_13341_13552));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31719 (.out1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_subif_13341_31719), .in1(out_ui_eq_expr_FU_16_0_16_103_i1_fu___float64_subif_13341_29906), .in2(out_truth_not_expr_FU_1_1_58_i4_fu___float64_subif_13341_31716));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31723 (.out1(out_truth_not_expr_FU_1_1_58_i5_fu___float64_subif_13341_31723), .in1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_subif_13341_31719));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31726 (.out1(out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_subif_13341_31726), .in1(out_truth_not_expr_FU_1_1_58_i4_fu___float64_subif_13341_31716), .in2(out_truth_not_expr_FU_1_1_58_i5_fu___float64_subif_13341_31723));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31729 (.out1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_subif_13341_31729), .in1(out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_subif_13341_31726), .in2(out_ui_eq_expr_FU_8_0_8_109_i7_fu___float64_subif_13341_29920));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31733 (.out1(out_truth_not_expr_FU_1_1_58_i6_fu___float64_subif_13341_31733), .in1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_subif_13341_31729));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31736 (.out1(out_truth_and_expr_FU_1_1_1_57_i3_fu___float64_subif_13341_31736), .in1(out_truth_and_expr_FU_1_1_1_57_i1_fu___float64_subif_13341_31726), .in2(out_truth_not_expr_FU_1_1_58_i6_fu___float64_subif_13341_31733));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31739 (.out1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_subif_13341_31739), .in1(out_truth_and_expr_FU_1_1_1_57_i3_fu___float64_subif_13341_31736), .in2(out_ui_eq_expr_FU_8_0_8_109_i11_fu___float64_subif_13341_29928));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31743 (.out1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_subif_13341_31743), .in1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_subif_13341_31729), .in2(out_ui_eq_expr_FU_8_0_8_109_i4_fu___float64_subif_13341_29914));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31746 (.out1(out_truth_not_expr_FU_1_1_58_i7_fu___float64_subif_13341_31746), .in1(out_ui_eq_expr_FU_8_0_8_109_i4_fu___float64_subif_13341_29914));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31749 (.out1(out_truth_and_expr_FU_1_1_1_57_i6_fu___float64_subif_13341_31749), .in1(out_truth_and_expr_FU_1_1_1_57_i2_fu___float64_subif_13341_31729), .in2(out_truth_not_expr_FU_1_1_58_i7_fu___float64_subif_13341_31746));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31753 (.out1(out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_subif_13341_31753), .in1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_subif_13341_31719), .in2(out_ui_eq_expr_FU_8_0_8_109_i2_fu___float64_subif_13341_29910));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31756 (.out1(out_truth_not_expr_FU_1_1_58_i8_fu___float64_subif_13341_31756), .in1(out_ui_eq_expr_FU_8_0_8_109_i2_fu___float64_subif_13341_29910));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31759 (.out1(out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_subif_13341_31759), .in1(out_truth_and_expr_FU_1_1_1_57_i0_fu___float64_subif_13341_31719), .in2(out_truth_not_expr_FU_1_1_58_i8_fu___float64_subif_13341_31756));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31763 (.out1(out_truth_and_expr_FU_1_1_1_57_i9_fu___float64_subif_13341_31763), .in1(out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_subif_13341_31759), .in2(out_ui_eq_expr_FU_8_0_8_109_i9_fu___float64_subif_13341_29924));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31766 (.out1(out_truth_not_expr_FU_1_1_58_i9_fu___float64_subif_13341_31766), .in1(out_ui_eq_expr_FU_8_0_8_109_i9_fu___float64_subif_13341_29924));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31769 (.out1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_subif_13341_31769), .in1(out_truth_and_expr_FU_1_1_1_57_i8_fu___float64_subif_13341_31759), .in2(out_truth_not_expr_FU_1_1_58_i9_fu___float64_subif_13341_31766));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31773 (.out1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_subif_13341_31773), .in1(out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_subif_13341_31753), .in2(out_ui_eq_expr_FU_8_0_8_109_i3_fu___float64_subif_13341_29912));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31776 (.out1(out_truth_not_expr_FU_1_1_58_i10_fu___float64_subif_13341_31776), .in1(out_ui_eq_expr_FU_8_0_8_109_i3_fu___float64_subif_13341_29912));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31779 (.out1(out_truth_and_expr_FU_1_1_1_57_i12_fu___float64_subif_13341_31779), .in1(out_truth_and_expr_FU_1_1_1_57_i7_fu___float64_subif_13341_31753), .in2(out_truth_not_expr_FU_1_1_58_i10_fu___float64_subif_13341_31776));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31783 (.out1(out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_subif_13341_31783), .in1(out_ui_eq_expr_FU_32_0_32_108_i0_fu___float64_subif_13341_13552), .in2(out_ui_eq_expr_FU_16_0_16_103_i0_fu___float64_subif_13341_29882));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31786 (.out1(out_truth_not_expr_FU_1_1_58_i11_fu___float64_subif_13341_31786), .in1(out_ui_eq_expr_FU_16_0_16_103_i0_fu___float64_subif_13341_29882));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31789 (.out1(out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_subif_13341_31789), .in1(out_ui_eq_expr_FU_32_0_32_108_i0_fu___float64_subif_13341_13552), .in2(out_truth_not_expr_FU_1_1_58_i11_fu___float64_subif_13341_31786));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31793 (.out1(out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_subif_13341_31793), .in1(out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_subif_13341_31789), .in2(out_ui_eq_expr_FU_8_0_8_109_i6_fu___float64_subif_13341_29918));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31796 (.out1(out_truth_not_expr_FU_1_1_58_i12_fu___float64_subif_13341_31796), .in1(out_ui_eq_expr_FU_8_0_8_109_i6_fu___float64_subif_13341_29918));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31799 (.out1(out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_subif_13341_31799), .in1(out_truth_and_expr_FU_1_1_1_57_i14_fu___float64_subif_13341_31789), .in2(out_truth_not_expr_FU_1_1_58_i12_fu___float64_subif_13341_31796));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31803 (.out1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_subif_13341_31803), .in1(out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_subif_13341_31799), .in2(out_ui_eq_expr_FU_8_0_8_109_i10_fu___float64_subif_13341_29926));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31806 (.out1(out_truth_not_expr_FU_1_1_58_i13_fu___float64_subif_13341_31806), .in1(out_ui_eq_expr_FU_8_0_8_109_i10_fu___float64_subif_13341_29926));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31809 (.out1(out_truth_and_expr_FU_1_1_1_57_i18_fu___float64_subif_13341_31809), .in1(out_truth_and_expr_FU_1_1_1_57_i16_fu___float64_subif_13341_31799), .in2(out_truth_not_expr_FU_1_1_58_i13_fu___float64_subif_13341_31806));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31813 (.out1(out_truth_and_expr_FU_1_1_1_57_i19_fu___float64_subif_13341_31813), .in1(out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_subif_13341_31793), .in2(out_ui_eq_expr_FU_8_0_8_109_i5_fu___float64_subif_13341_29916));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31816 (.out1(out_truth_not_expr_FU_1_1_58_i14_fu___float64_subif_13341_31816), .in1(out_ui_eq_expr_FU_8_0_8_109_i5_fu___float64_subif_13341_29916));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31819 (.out1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_subif_13341_31819), .in1(out_truth_and_expr_FU_1_1_1_57_i15_fu___float64_subif_13341_31793), .in2(out_truth_not_expr_FU_1_1_58_i14_fu___float64_subif_13341_31816));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31823 (.out1(out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_subif_13341_31823), .in1(out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_subif_13341_31783), .in2(out_ui_eq_expr_FU_8_0_8_109_i1_fu___float64_subif_13341_29908));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31826 (.out1(out_truth_not_expr_FU_1_1_58_i15_fu___float64_subif_13341_31826), .in1(out_ui_eq_expr_FU_8_0_8_109_i1_fu___float64_subif_13341_29908));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31829 (.out1(out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_subif_13341_31829), .in1(out_truth_and_expr_FU_1_1_1_57_i13_fu___float64_subif_13341_31783), .in2(out_truth_not_expr_FU_1_1_58_i15_fu___float64_subif_13341_31826));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31833 (.out1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_subif_13341_31833), .in1(out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_subif_13341_31829), .in2(out_ui_eq_expr_FU_8_0_8_109_i8_fu___float64_subif_13341_29922));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31836 (.out1(out_truth_not_expr_FU_1_1_58_i16_fu___float64_subif_13341_31836), .in1(out_ui_eq_expr_FU_8_0_8_109_i8_fu___float64_subif_13341_29922));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31839 (.out1(out_truth_and_expr_FU_1_1_1_57_i24_fu___float64_subif_13341_31839), .in1(out_truth_and_expr_FU_1_1_1_57_i22_fu___float64_subif_13341_31829), .in2(out_truth_not_expr_FU_1_1_58_i16_fu___float64_subif_13341_31836));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31843 (.out1(out_truth_not_expr_FU_1_1_58_i17_fu___float64_subif_13341_31843), .in1(out_ui_lt_expr_FU_1_1_1_141_i1_fu___float64_subif_13341_29896));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31846 (.out1(out_truth_and_expr_FU_1_1_1_57_i25_fu___float64_subif_13341_31846), .in1(out_ui_lt_expr_FU_1_1_1_141_i1_fu___float64_subif_13341_29896), .in2(out_reg_65_reg_65));
  cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(2), .BITSIZE_in3(2), .BITSIZE_out1(2)) fu___float64_subif_13341_31847 (.out1(out_cond_expr_FU_8_8_8_8_49_i0_fu___float64_subif_13341_31847), .in1(out_reg_7_reg_7), .in2(out_const_1), .in3(out_UIconvert_expr_FU_12_i0_fu___float64_subif_13341_13380));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(16), .BITSIZE_in3(12), .BITSIZE_out1(12)) fu___float64_subif_13341_31849 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i1_fu___float64_subif_13341_31849), .in1(out_reg_7_reg_7), .in2(out_const_51), .in3(out_IUconvert_expr_FU_13_i0_fu___float64_subif_13341_13383));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(11), .BITSIZE_out1(11)) fu___float64_subif_13341_31851 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i2_fu___float64_subif_13341_31851), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_16_16_16_64_i0_fu___float64_subif_13341_13385));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(11), .BITSIZE_out1(11)) fu___float64_subif_13341_31853 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i3_fu___float64_subif_13341_31853), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_16_16_16_64_i1_fu___float64_subif_13341_13386));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(64), .BITSIZE_in3(53), .BITSIZE_out1(53)) fu___float64_subif_13341_31855 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i1_fu___float64_subif_13341_31855), .in1(out_reg_7_reg_7), .in2(out_const_55), .in3(out_IUdata_converter_FU_15_i0_fu___float64_subif_13341_13390));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_subif_13341_31857 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i2_fu___float64_subif_13341_31857), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_64_64_64_75_i0_fu___float64_subif_13341_13392));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_subif_13341_31859 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i3_fu___float64_subif_13341_31859), .in1(out_reg_7_reg_7), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_64_64_64_75_i1_fu___float64_subif_13341_13393));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31861 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i0_fu___float64_subif_13341_31861), .in1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_subif_13341_29878), .in2(out_reg_6_reg_6), .in3(out_reg_4_reg_4));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31863 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i1_fu___float64_subif_13341_31863), .in1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_subif_13341_29878), .in2(out_reg_4_reg_4), .in3(out_reg_6_reg_6));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31865 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i2_fu___float64_subif_13341_31865), .in1(out_ne_expr_FU_8_0_8_53_i0_fu___float64_subif_13341_29878), .in2(out_reg_16_reg_16), .in3(out_reg_17_reg_17));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_subif_13341_31867 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i4_fu___float64_subif_13341_31867), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i5_fu___float64_subif_13341_31887), .in2(out_ui_rshift_expr_FU_64_0_64_180_i8_fu___float64_subif_13341_32341), .in3(out_ui_rshift_expr_FU_64_0_64_180_i9_fu___float64_subif_13341_32344));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31869 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i3_fu___float64_subif_13341_31869), .in1(out_reg_32_reg_32), .in2(out_ui_eq_expr_FU_1_0_1_106_i0_fu___float64_subif_13341_13640), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(12), .BITSIZE_out1(12)) fu___float64_subif_13341_31871 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i4_fu___float64_subif_13341_31871), .in1(out_ui_bit_ior_expr_FU_1_1_1_89_i0_fu___float64_subif_13341_13643), .in2(out_const_0), .in3(out_ui_rshift_expr_FU_64_0_64_186_i0_fu___float64_subif_13341_32355));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(11), .BITSIZE_in3(11), .BITSIZE_out1(11)) fu___float64_subif_13341_31873 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i5_fu___float64_subif_13341_31873), .in1(out_reg_14_reg_14), .in2(out_ui_rshift_expr_FU_64_0_64_186_i1_fu___float64_subif_13341_32386), .in3(out_const_50));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31877 (.out1(out_truth_or_expr_FU_1_1_1_59_i0_fu___float64_subif_13341_31877), .in1(out_truth_not_expr_FU_1_1_58_i17_fu___float64_subif_13341_31843), .in2(out_truth_and_expr_FU_1_1_1_57_i25_fu___float64_subif_13341_31846));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(52), .BITSIZE_out1(52)) fu___float64_subif_13341_31878 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i5_fu___float64_subif_13341_31878), .in1(out_reg_93_reg_93), .in2(out_const_0), .in3(out_ui_bit_and_expr_FU_64_0_64_74_i1_fu___float64_subif_13341_13676));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31881 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i4_fu___float64_subif_13341_31881), .in1(out_reg_20_reg_20), .in2(out_ui_rshift_expr_FU_64_0_64_188_i0_fu___float64_subif_13341_32369), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(13), .BITSIZE_in3(1), .BITSIZE_out1(13)) fu___float64_subif_13341_31883 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i6_fu___float64_subif_13341_31883), .in1(out_reg_20_reg_20), .in2(out_ui_rshift_expr_FU_64_0_64_187_i0_fu___float64_subif_13341_32362), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(13), .BITSIZE_in3(13), .BITSIZE_out1(13)) fu___float64_subif_13341_31885 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i7_fu___float64_subif_13341_31885), .in1(out_reg_12_reg_12), .in2(out_reg_95_reg_95), .in3(out_ui_rshift_expr_FU_64_0_64_187_i2_fu___float64_subif_13341_32379));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31887 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i5_fu___float64_subif_13341_31887), .in1(out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_subif_13341_13611), .in2(out_ui_eq_expr_FU_1_0_1_105_i0_fu___float64_subif_13341_13615), .in3(out_ui_eq_expr_FU_1_0_1_105_i1_fu___float64_subif_13341_13698));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_subif_13341_31889 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i6_fu___float64_subif_13341_31889), .in1(out_ui_eq_expr_FU_8_0_8_109_i0_fu___float64_subif_13341_13611), .in2(out_ui_rshift_expr_FU_64_0_64_180_i6_fu___float64_subif_13341_32331), .in3(out_ui_rshift_expr_FU_64_0_64_180_i7_fu___float64_subif_13341_32334));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31893 (.out1(out_truth_or_expr_FU_1_1_1_59_i1_fu___float64_subif_13341_31893), .in1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_subif_13341_31833), .in2(out_truth_and_expr_FU_1_1_1_57_i24_fu___float64_subif_13341_31839));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___float64_subif_13341_31895 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i0_fu___float64_subif_13341_31895), .in1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_subif_13341_31833), .in2(out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_subif_13341_32172), .in3(out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_subif_13341_32175));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(16), .BITSIZE_out1(3)) fu___float64_subif_13341_31899 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i1_fu___float64_subif_13341_31899), .in1(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_subif_13341_31833), .in2(out_const_31), .in3(out_ui_bit_and_expr_FU_16_0_16_62_i0_fu___float64_subif_13341_13556));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31902 (.out1(out_truth_or_expr_FU_1_1_1_59_i2_fu___float64_subif_13341_31902), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_subif_13341_31769), .in2(out_truth_and_expr_FU_1_1_1_57_i9_fu___float64_subif_13341_31763));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(39), .BITSIZE_in3(39), .BITSIZE_out1(39)) fu___float64_subif_13341_31904 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i7_fu___float64_subif_13341_31904), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_subif_13341_31769), .in2(out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_subif_13341_32159), .in3(out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_subif_13341_32162));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(16), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_31908 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i2_fu___float64_subif_13341_31908), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_subif_13341_31769), .in2(out_ui_rshift_expr_FU_64_0_64_167_i0_fu___float64_subif_13341_13695), .in3(out_const_31));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31911 (.out1(out_truth_or_expr_FU_1_1_1_59_i3_fu___float64_subif_13341_31911), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_subif_13341_31803), .in2(out_truth_and_expr_FU_1_1_1_57_i18_fu___float64_subif_13341_31809));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(23), .BITSIZE_in3(23), .BITSIZE_out1(23)) fu___float64_subif_13341_31913 (.out1(out_ui_cond_expr_FU_32_32_32_32_99_i0_fu___float64_subif_13341_31913), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_subif_13341_31803), .in2(out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_subif_13341_32143), .in3(out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_subif_13341_32146));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(1), .BITSIZE_out1(3)) fu___float64_subif_13341_31917 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i3_fu___float64_subif_13341_31917), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_subif_13341_31803), .in2(out_const_31), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_subif_13341_31919 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i8_fu___float64_subif_13341_31919), .in1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_subif_13341_31739), .in2(out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_subif_13341_32130), .in3(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_subif_13341_32133));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(1), .BITSIZE_out1(3)) fu___float64_subif_13341_31923 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i4_fu___float64_subif_13341_31923), .in1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_subif_13341_31739), .in2(out_const_31), .in3(out_const_0));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31926 (.out1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_subif_13341_31773), .in2(out_truth_and_expr_FU_1_1_1_57_i12_fu___float64_subif_13341_31779));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(31), .BITSIZE_in3(31), .BITSIZE_out1(31)) fu___float64_subif_13341_31936 (.out1(out_ui_cond_expr_FU_32_32_32_32_99_i1_fu___float64_subif_13341_31936), .in1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_subif_13341_31773), .in2(out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_subif_13341_32114), .in3(out_ui_rshift_expr_FU_64_0_64_179_i1_fu___float64_subif_13341_32117));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(8), .BITSIZE_out1(3)) fu___float64_subif_13341_31942 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i5_fu___float64_subif_13341_31942), .in1(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_subif_13341_31773), .in2(out_const_31), .in3(out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_subif_13341_13705));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31947 (.out1(out_truth_or_expr_FU_1_1_1_59_i5_fu___float64_subif_13341_31947), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_subif_13341_31819), .in2(out_truth_and_expr_FU_1_1_1_57_i19_fu___float64_subif_13341_31813));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(15), .BITSIZE_in3(15), .BITSIZE_out1(15)) fu___float64_subif_13341_31949 (.out1(out_ui_cond_expr_FU_16_16_16_16_97_i8_fu___float64_subif_13341_31949), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_subif_13341_31819), .in2(out_ui_rshift_expr_FU_64_0_64_185_i0_fu___float64_subif_13341_32201), .in3(out_ui_rshift_expr_FU_64_0_64_185_i1_fu___float64_subif_13341_32204));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_31953 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i6_fu___float64_subif_13341_31953), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_subif_13341_31819), .in2(out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_subif_13341_13727), .in3(out_const_31));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31956 (.out1(out_truth_or_expr_FU_1_1_1_59_i6_fu___float64_subif_13341_31956), .in1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_subif_13341_31743), .in2(out_truth_and_expr_FU_1_1_1_57_i6_fu___float64_subif_13341_31749));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_subif_13341_31958 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i9_fu___float64_subif_13341_31958), .in1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_subif_13341_31743), .in2(out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_subif_13341_32185), .in3(out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_subif_13341_32188));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(8), .BITSIZE_out1(3)) fu___float64_subif_13341_31962 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i7_fu___float64_subif_13341_31962), .in1(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_subif_13341_31743), .in2(out_const_31), .in3(out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_subif_13341_13729));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(52), .BITSIZE_in3(1), .BITSIZE_out1(52)) fu___float64_subif_13341_31964 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i10_fu___float64_subif_13341_31964), .in1(out_reg_94_reg_94), .in2(out_ui_cond_expr_FU_64_64_64_64_100_i5_fu___float64_subif_13341_31878), .in3(out_const_0));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31967 (.out1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in2(out_truth_or_expr_FU_1_1_1_59_i5_fu___float64_subif_13341_31947));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___float64_subif_13341_31968 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i8_fu___float64_subif_13341_31968), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in2(out_ui_rshift_expr_FU_8_0_8_191_i1_fu___float64_subif_13341_32211), .in3(out_ui_rshift_expr_FU_8_0_8_191_i2_fu___float64_subif_13341_32214));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(31), .BITSIZE_in3(31), .BITSIZE_out1(31)) fu___float64_subif_13341_31977 (.out1(out_ui_cond_expr_FU_32_32_32_32_99_i2_fu___float64_subif_13341_31977), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in2(out_ui_rshift_expr_FU_64_0_64_179_i2_fu___float64_subif_13341_32224), .in3(out_ui_rshift_expr_FU_64_0_64_179_i3_fu___float64_subif_13341_32227));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31980 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i6_fu___float64_subif_13341_31980), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in2(out_truth_and_expr_FU_1_1_1_57_i11_fu___float64_subif_13341_31773), .in3(out_truth_not_expr_FU_1_1_58_i20_fu___float64_subif_13341_32195));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_31983 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i9_fu___float64_subif_13341_31983), .in1(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i5_fu___float64_subif_13341_31942), .in3(out_ui_cond_expr_FU_8_8_8_8_101_i6_fu___float64_subif_13341_31953));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31988 (.out1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in2(out_truth_or_expr_FU_1_1_1_59_i6_fu___float64_subif_13341_31956));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_in3(7), .BITSIZE_out1(7)) fu___float64_subif_13341_31989 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i10_fu___float64_subif_13341_31989), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in2(out_ui_rshift_expr_FU_8_0_8_191_i3_fu___float64_subif_13341_32234), .in3(out_ui_rshift_expr_FU_8_0_8_191_i4_fu___float64_subif_13341_32237));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_31992 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i7_fu___float64_subif_13341_31992), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in2(out_truth_or_expr_FU_1_1_1_59_i4_fu___float64_subif_13341_31926), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_subif_13341_31998 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i11_fu___float64_subif_13341_31998), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in2(out_ui_rshift_expr_FU_64_0_64_184_i2_fu___float64_subif_13341_32244), .in3(out_ui_rshift_expr_FU_64_0_64_184_i3_fu___float64_subif_13341_32247));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32001 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i8_fu___float64_subif_13341_32001), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i6_fu___float64_subif_13341_31980), .in3(out_truth_and_expr_FU_1_1_1_57_i5_fu___float64_subif_13341_31743));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32004 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i11_fu___float64_subif_13341_32004), .in1(out_truth_or_expr_FU_1_1_1_59_i7_fu___float64_subif_13341_31967), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i9_fu___float64_subif_13341_31983), .in3(out_ui_cond_expr_FU_8_8_8_8_101_i7_fu___float64_subif_13341_31962));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32009 (.out1(out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_subif_13341_32009), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988), .in2(out_truth_or_expr_FU_1_1_1_59_i1_fu___float64_subif_13341_31893));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_subif_13341_32010 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i12_fu___float64_subif_13341_32010), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988), .in2(out_ui_lshift_expr_FU_8_0_8_139_i1_fu___float64_subif_13341_32241), .in3(out_ui_bit_and_expr_FU_8_0_8_76_i3_fu___float64_subif_13341_13701));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32013 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i9_fu___float64_subif_13341_32013), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i7_fu___float64_subif_13341_31992), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_subif_13341_32019 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i12_fu___float64_subif_13341_32019), .in1(out_reg_70_reg_70), .in2(out_reg_79_reg_79), .in3(out_reg_80_reg_80));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32022 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i10_fu___float64_subif_13341_32022), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i8_fu___float64_subif_13341_32001), .in3(out_truth_and_expr_FU_1_1_1_57_i23_fu___float64_subif_13341_31833));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32025 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i13_fu___float64_subif_13341_32025), .in1(out_reg_70_reg_70), .in2(out_reg_71_reg_71), .in3(out_reg_60_reg_60));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32030 (.out1(out_truth_or_expr_FU_1_1_1_59_i10_fu___float64_subif_13341_32030), .in1(out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_subif_13341_32009), .in2(out_truth_or_expr_FU_1_1_1_59_i2_fu___float64_subif_13341_31902));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_subif_13341_32031 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i14_fu___float64_subif_13341_32031), .in1(out_reg_72_reg_72), .in2(out_reg_73_reg_73), .in3(out_reg_57_reg_57));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32034 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i11_fu___float64_subif_13341_32034), .in1(out_reg_72_reg_72), .in2(out_reg_74_reg_74), .in3(out_const_29));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32037 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i12_fu___float64_subif_13341_32037), .in1(out_reg_72_reg_72), .in2(out_reg_70_reg_70), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_subif_13341_32040 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i13_fu___float64_subif_13341_32040), .in1(out_reg_72_reg_72), .in2(out_ui_rshift_expr_FU_64_0_64_184_i6_fu___float64_subif_13341_32267), .in3(out_reg_81_reg_81));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32043 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i13_fu___float64_subif_13341_32043), .in1(out_reg_72_reg_72), .in2(out_reg_75_reg_75), .in3(out_reg_78_reg_78));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32046 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i15_fu___float64_subif_13341_32046), .in1(out_reg_72_reg_72), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i13_fu___float64_subif_13341_32025), .in3(out_reg_61_reg_61));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32051 (.out1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in1(out_reg_76_reg_76), .in2(out_reg_69_reg_69));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_subif_13341_32052 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i16_fu___float64_subif_13341_32052), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i14_fu___float64_subif_13341_32031), .in3(out_reg_58_reg_58));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32055 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i14_fu___float64_subif_13341_32055), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i11_fu___float64_subif_13341_32034), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32058 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i15_fu___float64_subif_13341_32058), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i12_fu___float64_subif_13341_32037), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(47), .BITSIZE_in3(47), .BITSIZE_out1(47)) fu___float64_subif_13341_32061 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i14_fu___float64_subif_13341_32061), .in1(out_reg_76_reg_76), .in2(out_ui_rshift_expr_FU_64_0_64_184_i8_fu___float64_subif_13341_32277), .in3(out_reg_82_reg_82));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32064 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i16_fu___float64_subif_13341_32064), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i13_fu___float64_subif_13341_32043), .in3(out_reg_67_reg_67));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32067 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i17_fu___float64_subif_13341_32067), .in1(out_reg_76_reg_76), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i15_fu___float64_subif_13341_32046), .in3(out_reg_62_reg_62));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu___float64_subif_13341_32071 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i18_fu___float64_subif_13341_32071), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i16_fu___float64_subif_13341_32052), .in3(out_reg_59_reg_59));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32073 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i17_fu___float64_subif_13341_32073), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i14_fu___float64_subif_13341_32055), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32075 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i18_fu___float64_subif_13341_32075), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i15_fu___float64_subif_13341_32058), .in3(out_const_0));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_subif_13341_32077 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i15_fu___float64_subif_13341_32077), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in2(out_ui_rshift_expr_FU_64_0_64_180_i2_fu___float64_subif_13341_32287), .in3(out_reg_83_reg_83));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32079 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i19_fu___float64_subif_13341_32079), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i16_fu___float64_subif_13341_32064), .in3(out_reg_66_reg_66));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32081 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i19_fu___float64_subif_13341_32081), .in1(out_truth_or_expr_FU_1_1_1_59_i11_fu___float64_subif_13341_32051), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i17_fu___float64_subif_13341_32067), .in3(out_reg_63_reg_63));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32085 (.out1(out_truth_not_expr_FU_1_1_58_i18_fu___float64_subif_13341_32085), .in1(out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_subif_13341_31823));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32088 (.out1(out_truth_and_expr_FU_1_1_1_57_i26_fu___float64_subif_13341_32088), .in1(out_reg_77_reg_77), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i19_fu___float64_subif_13341_32079));
  truth_or_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32091 (.out1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091), .in1(out_reg_68_reg_68), .in2(out_truth_and_expr_FU_1_1_1_57_i26_fu___float64_subif_13341_32088));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32093 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i20_fu___float64_subif_13341_32093), .in1(out_reg_68_reg_68), .in2(out_const_0), .in3(out_ui_rshift_expr_FU_8_0_8_191_i5_fu___float64_subif_13341_32304));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32095 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i20_fu___float64_subif_13341_32095), .in1(out_reg_68_reg_68), .in2(out_const_29), .in3(out_ui_cond_expr_FU_1_1_1_1_98_i17_fu___float64_subif_13341_32073));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32097 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i21_fu___float64_subif_13341_32097), .in1(out_reg_68_reg_68), .in2(out_const_29), .in3(out_ui_cond_expr_FU_1_1_1_1_98_i18_fu___float64_subif_13341_32075));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_subif_13341_32099 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i16_fu___float64_subif_13341_32099), .in1(out_reg_68_reg_68), .in2(out_const_0), .in3(out_ui_rshift_expr_FU_64_0_64_180_i4_fu___float64_subif_13341_32297));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32101 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i21_fu___float64_subif_13341_32101), .in1(out_reg_68_reg_68), .in2(out_const_31), .in3(out_ui_cond_expr_FU_8_8_8_8_101_i19_fu___float64_subif_13341_32081));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32103 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i22_fu___float64_subif_13341_32103), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091), .in2(out_ui_rshift_expr_FU_8_0_8_191_i6_fu___float64_subif_13341_32321), .in3(out_ui_rshift_expr_FU_8_0_8_191_i7_fu___float64_subif_13341_32324));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32105 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i22_fu___float64_subif_13341_32105), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i20_fu___float64_subif_13341_32095), .in3(out_ui_cond_expr_FU_1_1_1_1_98_i17_fu___float64_subif_13341_32073));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32107 (.out1(out_ui_cond_expr_FU_1_1_1_1_98_i23_fu___float64_subif_13341_32107), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091), .in2(out_ui_cond_expr_FU_1_1_1_1_98_i21_fu___float64_subif_13341_32097), .in3(out_ui_cond_expr_FU_1_1_1_1_98_i18_fu___float64_subif_13341_32075));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(55), .BITSIZE_in3(55), .BITSIZE_out1(55)) fu___float64_subif_13341_32109 (.out1(out_ui_cond_expr_FU_64_64_64_64_100_i17_fu___float64_subif_13341_32109), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091), .in2(out_ui_rshift_expr_FU_64_0_64_180_i5_fu___float64_subif_13341_32311), .in3(out_ui_rshift_expr_FU_64_0_64_180_i4_fu___float64_subif_13341_32297));
  ui_cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(3), .BITSIZE_in3(3), .BITSIZE_out1(3)) fu___float64_subif_13341_32111 (.out1(out_ui_cond_expr_FU_8_8_8_8_101_i23_fu___float64_subif_13341_32111), .in1(out_truth_or_expr_FU_1_1_1_59_i12_fu___float64_subif_13341_32091), .in2(out_ui_cond_expr_FU_8_8_8_8_101_i21_fu___float64_subif_13341_32101), .in3(out_ui_cond_expr_FU_8_8_8_8_101_i19_fu___float64_subif_13341_32081));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_subif_13341_32114 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i0_fu___float64_subif_13341_32114), .in1(out_ui_lshift_expr_FU_64_0_64_124_i4_fu___float64_subif_13341_13723), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_subif_13341_32117 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i1_fu___float64_subif_13341_32117), .in1(out_ui_lshift_expr_FU_64_0_64_120_i1_fu___float64_subif_13341_13707), .in2(out_const_34));
  ui_lshift_expr_FU #(.BITSIZE_in1(31), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32121 (.out1(out_ui_lshift_expr_FU_64_0_64_125_i0_fu___float64_subif_13341_32121), .in1(out_ui_cond_expr_FU_32_32_32_32_99_i1_fu___float64_subif_13341_31936), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32130 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i0_fu___float64_subif_13341_32130), .in1(out_ui_lshift_expr_FU_64_0_64_124_i3_fu___float64_subif_13341_13722), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32133 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i1_fu___float64_subif_13341_32133), .in1(out_ui_lshift_expr_FU_64_0_64_120_i0_fu___float64_subif_13341_13550), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32137 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i0_fu___float64_subif_13341_32137), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i8_fu___float64_subif_13341_31919), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_subif_13341_32143 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i0_fu___float64_subif_13341_32143), .in1(out_ui_lshift_expr_FU_64_0_64_124_i2_fu___float64_subif_13341_13721), .in2(out_const_38));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(23), .PRECISION(64)) fu___float64_subif_13341_32146 (.out1(out_ui_rshift_expr_FU_64_0_64_181_i1_fu___float64_subif_13341_32146), .in1(out_ui_lshift_expr_FU_64_0_64_114_i1_fu___float64_subif_13341_13554), .in2(out_const_38));
  ui_lshift_expr_FU #(.BITSIZE_in1(23), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32150 (.out1(out_ui_lshift_expr_FU_64_0_64_127_i0_fu___float64_subif_13341_32150), .in1(out_ui_cond_expr_FU_32_32_32_32_99_i0_fu___float64_subif_13341_31913), .in2(out_const_38));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32153 (.out1(out_truth_not_expr_FU_1_1_58_i19_fu___float64_subif_13341_32153), .in1(out_truth_and_expr_FU_1_1_1_57_i10_fu___float64_subif_13341_31769));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(39), .PRECISION(64)) fu___float64_subif_13341_32159 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i0_fu___float64_subif_13341_32159), .in1(out_ui_lshift_expr_FU_64_0_64_123_i1_fu___float64_subif_13341_13703), .in2(out_const_40));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(39), .PRECISION(64)) fu___float64_subif_13341_32162 (.out1(out_ui_rshift_expr_FU_64_0_64_182_i1_fu___float64_subif_13341_32162), .in1(out_ui_lshift_expr_FU_64_0_64_124_i1_fu___float64_subif_13341_13720), .in2(out_const_40));
  ui_lshift_expr_FU #(.BITSIZE_in1(39), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32166 (.out1(out_ui_lshift_expr_FU_64_0_64_128_i0_fu___float64_subif_13341_32166), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i7_fu___float64_subif_13341_31904), .in2(out_const_40));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_subif_13341_32172 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i0_fu___float64_subif_13341_32172), .in1(out_ui_lshift_expr_FU_64_0_64_124_i0_fu___float64_subif_13341_13719), .in2(out_const_45));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_subif_13341_32175 (.out1(out_ui_rshift_expr_FU_64_0_64_183_i1_fu___float64_subif_13341_32175), .in1(out_ui_lshift_expr_FU_64_0_64_123_i0_fu___float64_subif_13341_13699), .in2(out_const_45));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32179 (.out1(out_ui_lshift_expr_FU_64_0_64_129_i0_fu___float64_subif_13341_32179), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i0_fu___float64_subif_13341_31895), .in2(out_const_45));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32185 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i0_fu___float64_subif_13341_32185), .in1(out_ui_lshift_expr_FU_64_0_64_124_i6_fu___float64_subif_13341_13725), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32188 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i1_fu___float64_subif_13341_32188), .in1(out_ui_lshift_expr_FU_64_0_64_120_i2_fu___float64_subif_13341_13711), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32192 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i0_fu___float64_subif_13341_32192), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i9_fu___float64_subif_13341_31958), .in2(out_const_33));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu___float64_subif_13341_32195 (.out1(out_truth_not_expr_FU_1_1_58_i20_fu___float64_subif_13341_32195), .in1(out_truth_and_expr_FU_1_1_1_57_i20_fu___float64_subif_13341_31819));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(15), .PRECISION(64)) fu___float64_subif_13341_32201 (.out1(out_ui_rshift_expr_FU_64_0_64_185_i0_fu___float64_subif_13341_32201), .in1(out_ui_lshift_expr_FU_64_0_64_120_i3_fu___float64_subif_13341_13715), .in2(out_const_41));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(15), .PRECISION(64)) fu___float64_subif_13341_32204 (.out1(out_ui_rshift_expr_FU_64_0_64_185_i1_fu___float64_subif_13341_32204), .in1(out_ui_lshift_expr_FU_64_0_64_124_i5_fu___float64_subif_13341_13724), .in2(out_const_41));
  ui_lshift_expr_FU #(.BITSIZE_in1(15), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32208 (.out1(out_ui_lshift_expr_FU_64_0_64_131_i0_fu___float64_subif_13341_32208), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i8_fu___float64_subif_13341_31949), .in2(out_const_41));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_subif_13341_32211 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i1_fu___float64_subif_13341_32211), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i0_fu___float64_subif_13341_13561), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_subif_13341_32214 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i2_fu___float64_subif_13341_32214), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i1_fu___float64_subif_13341_13566), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(64)) fu___float64_subif_13341_32218 (.out1(out_ui_lshift_expr_FU_8_0_8_139_i0_fu___float64_subif_13341_32218), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i8_fu___float64_subif_13341_31968), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_subif_13341_32224 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i2_fu___float64_subif_13341_32224), .in1(out_ui_lshift_expr_FU_64_0_64_125_i0_fu___float64_subif_13341_32121), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(31), .PRECISION(64)) fu___float64_subif_13341_32227 (.out1(out_ui_rshift_expr_FU_64_0_64_179_i3_fu___float64_subif_13341_32227), .in1(out_ui_lshift_expr_FU_64_0_64_131_i0_fu___float64_subif_13341_32208), .in2(out_const_34));
  ui_lshift_expr_FU #(.BITSIZE_in1(31), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32231 (.out1(out_ui_lshift_expr_FU_64_0_64_125_i1_fu___float64_subif_13341_32231), .in1(out_ui_cond_expr_FU_32_32_32_32_99_i2_fu___float64_subif_13341_31977), .in2(out_const_34));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_subif_13341_32234 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i3_fu___float64_subif_13341_32234), .in1(out_ui_lshift_expr_FU_8_0_8_139_i0_fu___float64_subif_13341_32218), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(64)) fu___float64_subif_13341_32237 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i4_fu___float64_subif_13341_32237), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i2_fu___float64_subif_13341_13571), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(64)) fu___float64_subif_13341_32241 (.out1(out_ui_lshift_expr_FU_8_0_8_139_i1_fu___float64_subif_13341_32241), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i10_fu___float64_subif_13341_31989), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32244 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i2_fu___float64_subif_13341_32244), .in1(out_ui_lshift_expr_FU_64_0_64_125_i1_fu___float64_subif_13341_32231), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32247 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i3_fu___float64_subif_13341_32247), .in1(out_ui_lshift_expr_FU_64_0_64_130_i0_fu___float64_subif_13341_32192), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32251 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i1_fu___float64_subif_13341_32251), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i11_fu___float64_subif_13341_31998), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32257 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i4_fu___float64_subif_13341_32257), .in1(out_ui_lshift_expr_FU_64_0_64_130_i1_fu___float64_subif_13341_32251), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32260 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i5_fu___float64_subif_13341_32260), .in1(out_ui_lshift_expr_FU_64_0_64_129_i0_fu___float64_subif_13341_32179), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32264 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i2_fu___float64_subif_13341_32264), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i12_fu___float64_subif_13341_32019), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32267 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i6_fu___float64_subif_13341_32267), .in1(out_ui_lshift_expr_FU_64_0_64_130_i2_fu___float64_subif_13341_32264), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32270 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i7_fu___float64_subif_13341_32270), .in1(out_ui_lshift_expr_FU_64_0_64_128_i0_fu___float64_subif_13341_32166), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32274 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i3_fu___float64_subif_13341_32274), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i13_fu___float64_subif_13341_32040), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32277 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i8_fu___float64_subif_13341_32277), .in1(out_ui_lshift_expr_FU_64_0_64_130_i3_fu___float64_subif_13341_32274), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(5), .BITSIZE_out1(47), .PRECISION(64)) fu___float64_subif_13341_32280 (.out1(out_ui_rshift_expr_FU_64_0_64_184_i9_fu___float64_subif_13341_32280), .in1(out_ui_lshift_expr_FU_64_0_64_127_i0_fu___float64_subif_13341_32150), .in2(out_const_33));
  ui_lshift_expr_FU #(.BITSIZE_in1(47), .BITSIZE_in2(5), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32284 (.out1(out_ui_lshift_expr_FU_64_0_64_130_i4_fu___float64_subif_13341_32284), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i14_fu___float64_subif_13341_32061), .in2(out_const_33));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32287 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i2_fu___float64_subif_13341_32287), .in1(out_ui_lshift_expr_FU_64_0_64_130_i4_fu___float64_subif_13341_32284), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32290 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i3_fu___float64_subif_13341_32290), .in1(out_ui_lshift_expr_FU_64_0_64_126_i0_fu___float64_subif_13341_32137), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32294 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i1_fu___float64_subif_13341_32294), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i15_fu___float64_subif_13341_32077), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32297 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i4_fu___float64_subif_13341_32297), .in1(out_ui_lshift_expr_FU_64_0_64_126_i1_fu___float64_subif_13341_32294), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32301 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i2_fu___float64_subif_13341_32301), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i16_fu___float64_subif_13341_32099), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___float64_subif_13341_32304 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i5_fu___float64_subif_13341_32304), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i18_fu___float64_subif_13341_32071), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_subif_13341_32308 (.out1(out_ui_lshift_expr_FU_8_0_8_139_i2_fu___float64_subif_13341_32308), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i20_fu___float64_subif_13341_32093), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32311 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i5_fu___float64_subif_13341_32311), .in1(out_ui_lshift_expr_FU_64_0_64_126_i2_fu___float64_subif_13341_32301), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32318 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i3_fu___float64_subif_13341_32318), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i17_fu___float64_subif_13341_32109), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___float64_subif_13341_32321 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i6_fu___float64_subif_13341_32321), .in1(out_ui_bit_and_expr_FU_8_0_8_77_i0_fu___float64_subif_13341_13603), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(4), .BITSIZE_in2(1), .BITSIZE_out1(3), .PRECISION(64)) fu___float64_subif_13341_32324 (.out1(out_ui_rshift_expr_FU_8_0_8_191_i7_fu___float64_subif_13341_32324), .in1(out_ui_rshift_expr_FU_8_0_8_189_i0_fu___float64_subif_13341_13604), .in2(out_const_29));
  ui_lshift_expr_FU #(.BITSIZE_in1(3), .BITSIZE_in2(1), .BITSIZE_out1(4), .PRECISION(64)) fu___float64_subif_13341_32328 (.out1(out_ui_lshift_expr_FU_8_0_8_139_i3_fu___float64_subif_13341_32328), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i22_fu___float64_subif_13341_32103), .in2(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32331 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i6_fu___float64_subif_13341_32331), .in1(out_ui_lshift_expr_FU_64_0_64_113_i2_fu___float64_subif_13341_13613), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32334 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i7_fu___float64_subif_13341_32334), .in1(out_ui_lshift_expr_FU_64_0_64_126_i3_fu___float64_subif_13341_32318), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32338 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i4_fu___float64_subif_13341_32338), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i6_fu___float64_subif_13341_31889), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32341 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i8_fu___float64_subif_13341_32341), .in1(out_ui_lshift_expr_FU_64_0_64_121_i0_fu___float64_subif_13341_13619), .in2(out_const_32));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(4), .BITSIZE_out1(55), .PRECISION(64)) fu___float64_subif_13341_32344 (.out1(out_ui_rshift_expr_FU_64_0_64_180_i9_fu___float64_subif_13341_32344), .in1(out_ui_lshift_expr_FU_64_0_64_126_i4_fu___float64_subif_13341_32338), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(55), .BITSIZE_in2(4), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32348 (.out1(out_ui_lshift_expr_FU_64_0_64_126_i5_fu___float64_subif_13341_32348), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i4_fu___float64_subif_13341_31867), .in2(out_const_32));
  ui_lshift_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_32352 (.out1(out_ui_lshift_expr_FU_64_0_64_132_i0_fu___float64_subif_13341_32352), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i0_fu___float64_subif_13341_31710), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(12), .PRECISION(64)) fu___float64_subif_13341_32355 (.out1(out_ui_rshift_expr_FU_64_0_64_186_i0_fu___float64_subif_13341_32355), .in1(out_ui_lshift_expr_FU_64_0_64_112_i2_fu___float64_subif_13341_13650), .in2(out_const_43));
  ui_lshift_expr_FU #(.BITSIZE_in1(12), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_32359 (.out1(out_ui_lshift_expr_FU_64_0_64_133_i0_fu___float64_subif_13341_32359), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i4_fu___float64_subif_13341_31871), .in2(out_const_43));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(13), .PRECISION(64)) fu___float64_subif_13341_32362 (.out1(out_ui_rshift_expr_FU_64_0_64_187_i0_fu___float64_subif_13341_32362), .in1(out_ui_lshift_expr_FU_64_0_64_132_i0_fu___float64_subif_13341_32352), .in2(out_const_42));
  ui_lshift_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_32366 (.out1(out_ui_lshift_expr_FU_64_0_64_132_i1_fu___float64_subif_13341_32366), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i6_fu___float64_subif_13341_31883), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(1), .PRECISION(64)) fu___float64_subif_13341_32369 (.out1(out_ui_rshift_expr_FU_64_0_64_188_i0_fu___float64_subif_13341_32369), .in1(out_ui_cond_expr_FU_64_64_64_64_100_i0_fu___float64_subif_13341_31707), .in2(out_const_47));
  ui_lshift_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_32373 (.out1(out_ui_lshift_expr_FU_64_0_64_134_i0_fu___float64_subif_13341_32373), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i4_fu___float64_subif_13341_31881), .in2(out_const_47));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(13), .PRECISION(64)) fu___float64_subif_13341_32376 (.out1(out_ui_rshift_expr_FU_64_0_64_187_i1_fu___float64_subif_13341_32376), .in1(out_ui_lshift_expr_FU_64_0_64_132_i1_fu___float64_subif_13341_32366), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(6), .BITSIZE_out1(13), .PRECISION(64)) fu___float64_subif_13341_32379 (.out1(out_ui_rshift_expr_FU_64_0_64_187_i2_fu___float64_subif_13341_32379), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i16_fu___float64_subif_13341_13689), .in2(out_const_42));
  ui_lshift_expr_FU #(.BITSIZE_in1(13), .BITSIZE_in2(6), .BITSIZE_out1(64), .PRECISION(64)) fu___float64_subif_13341_32383 (.out1(out_ui_lshift_expr_FU_64_0_64_132_i2_fu___float64_subif_13341_32383), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i7_fu___float64_subif_13341_31885), .in2(out_const_42));
  ui_rshift_expr_FU #(.BITSIZE_in1(63), .BITSIZE_in2(6), .BITSIZE_out1(11), .PRECISION(64)) fu___float64_subif_13341_32386 (.out1(out_ui_rshift_expr_FU_64_0_64_186_i1_fu___float64_subif_13341_32386), .in1(out_ui_lshift_expr_FU_64_0_64_112_i3_fu___float64_subif_13341_13671), .in2(out_const_43));
  ui_lshift_expr_FU #(.BITSIZE_in1(11), .BITSIZE_in2(6), .BITSIZE_out1(63), .PRECISION(64)) fu___float64_subif_13341_32390 (.out1(out_ui_lshift_expr_FU_64_0_64_133_i1_fu___float64_subif_13341_32390), .in1(out_ui_cond_expr_FU_16_16_16_16_97_i5_fu___float64_subif_13341_31873), .in2(out_const_43));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_70_i0_fu___float64_subif_13341_13351), .wenable(wrenable_reg_0));
  register_STD #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_5_i0_fu___float64_subif_13341_13355), .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i2_fu___float64_subif_13341_13673), .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i3_fu___float64_subif_13341_13679), .wenable(wrenable_reg_11));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_1_1_1_89_i2_fu___float64_subif_13341_13683), .wenable(wrenable_reg_12));
  register_SE #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_122_i0_fu___float64_subif_13341_13688), .wenable(wrenable_reg_13));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_ui_lt_expr_FU_1_1_1_141_i0_fu___float64_subif_13341_29894), .wenable(wrenable_reg_14));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_truth_xor_expr_FU_1_1_1_61_i0_fu___float64_subif_13341_30417), .wenable(wrenable_reg_15));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out_truth_xor_expr_FU_1_0_1_60_i0_fu___float64_subif_13341_30426), .wenable(wrenable_reg_16));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_ui_extract_bit_expr_FU_8_i0_fu___float64_subif_13341_30467), .wenable(wrenable_reg_17));
  register_SE #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_16_16_16_88_i1_fu___float64_subif_13341_13404), .wenable(wrenable_reg_18));
  register_STD #(.BITSIZE_in1(12), .BITSIZE_out1(12)) reg_19 (.out1(out_reg_19_reg_19), .clock(clock), .reset(reset), .in1(out_ui_minus_expr_FU_16_16_16_143_i0_fu___float64_subif_13341_13405), .wenable(wrenable_reg_19));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_70_i1_fu___float64_subif_13341_13356), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_20 (.out1(out_reg_20_reg_20), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i2_fu___float64_subif_13341_31865), .wenable(wrenable_reg_20));
  register_SE #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_21 (.out1(out_reg_21_reg_21), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_113_i0_fu___float64_subif_13341_13419), .wenable(wrenable_reg_21));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_22 (.out1(out_reg_22_reg_22), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_113_i1_fu___float64_subif_13341_13423), .wenable(wrenable_reg_22));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_23 (.out1(out_reg_23_reg_23), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_8_8_8_91_i2_fu___float64_subif_13341_13430), .wenable(wrenable_reg_23));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_24 (.out1(out_reg_24_reg_24), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_152_i0_fu___float64_subif_13341_13431), .wenable(wrenable_reg_24));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_25 (.out1(out_reg_25_reg_25), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_153_i0_fu___float64_subif_13341_13433), .wenable(wrenable_reg_25));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_26 (.out1(out_reg_26_reg_26), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_114_i0_fu___float64_subif_13341_13440), .wenable(wrenable_reg_26));
  register_STD #(.BITSIZE_in1(23), .BITSIZE_out1(23)) reg_27 (.out1(out_reg_27_reg_27), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_160_i0_fu___float64_subif_13341_13442), .wenable(wrenable_reg_27));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_28 (.out1(out_reg_28_reg_28), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_154_i0_fu___float64_subif_13341_13447), .wenable(wrenable_reg_28));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_29 (.out1(out_reg_29_reg_29), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_155_i0_fu___float64_subif_13341_13465), .wenable(wrenable_reg_29));
  register_STD #(.BITSIZE_in1(11), .BITSIZE_out1(11)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_7_i0_fu___float64_subif_13341_13360), .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_30 (.out1(out_reg_30_reg_30), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_156_i0_fu___float64_subif_13341_13483), .wenable(wrenable_reg_30));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_31 (.out1(out_reg_31_reg_31), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_16_0_16_157_i0_fu___float64_subif_13341_13501), .wenable(wrenable_reg_31));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_32 (.out1(out_reg_32_reg_32), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_16_0_16_104_i0_fu___float64_subif_13341_29890), .wenable(wrenable_reg_32));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_33 (.out1(out_reg_33_reg_33), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i6_fu___float64_subif_13341_13457), .wenable(wrenable_reg_33));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_34 (.out1(out_reg_34_reg_34), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i7_fu___float64_subif_13341_13459), .wenable(wrenable_reg_34));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_35 (.out1(out_reg_35_reg_35), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i4_fu___float64_subif_13341_13464), .wenable(wrenable_reg_35));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_36 (.out1(out_reg_36_reg_36), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_24_i0_fu___float64_subif_13341_13471), .wenable(wrenable_reg_36));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_37 (.out1(out_reg_37_reg_37), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_116_i0_fu___float64_subif_13341_13472), .wenable(wrenable_reg_37));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_38 (.out1(out_reg_38_reg_38), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_93_i3_fu___float64_subif_13341_13476), .wenable(wrenable_reg_38));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_39 (.out1(out_reg_39_reg_39), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_162_i1_fu___float64_subif_13341_13479), .wenable(wrenable_reg_39));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_ui_ne_expr_FU_16_0_16_144_i0_fu___float64_subif_13341_13364), .wenable(wrenable_reg_4));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_40 (.out1(out_reg_40_reg_40), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_26_i0_fu___float64_subif_13341_13489), .wenable(wrenable_reg_40));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_41 (.out1(out_reg_41_reg_41), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_93_i4_fu___float64_subif_13341_13494), .wenable(wrenable_reg_41));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_42 (.out1(out_reg_42_reg_42), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_28_i0_fu___float64_subif_13341_13507), .wenable(wrenable_reg_42));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_43 (.out1(out_reg_43_reg_43), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_93_i5_fu___float64_subif_13341_13512), .wenable(wrenable_reg_43));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_44 (.out1(out_reg_44_reg_44), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_30_i0_fu___float64_subif_13341_13524), .wenable(wrenable_reg_44));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_45 (.out1(out_reg_45_reg_45), .clock(clock), .reset(reset), .in1(out_ui_bit_not_expr_FU_64_64_93_i6_fu___float64_subif_13341_13529), .wenable(wrenable_reg_45));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_46 (.out1(out_reg_46_reg_46), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_64_64_64_90_i9_fu___float64_subif_13341_13496), .wenable(wrenable_reg_46));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_47 (.out1(out_reg_47_reg_47), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_118_i0_fu___float64_subif_13341_13508), .wenable(wrenable_reg_47));
  register_STD #(.BITSIZE_in1(62), .BITSIZE_out1(62)) reg_48 (.out1(out_reg_48_reg_48), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_164_i0_fu___float64_subif_13341_13509), .wenable(wrenable_reg_48));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_49 (.out1(out_reg_49_reg_49), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_119_i0_fu___float64_subif_13341_13525), .wenable(wrenable_reg_49));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_ui_eq_expr_FU_16_0_16_102_i1_fu___float64_subif_13341_13365), .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(54), .BITSIZE_out1(54)) reg_50 (.out1(out_reg_50_reg_50), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i24_fu___float64_subif_13341_13533), .wenable(wrenable_reg_50));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_51 (.out1(out_reg_51_reg_51), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_64_64_75_i25_fu___float64_subif_13341_13534), .wenable(wrenable_reg_51));
  register_SE #(.BITSIZE_in1(56), .BITSIZE_out1(56)) reg_52 (.out1(out_reg_52_reg_52), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_72_i0_fu___float64_subif_13341_13543), .wenable(wrenable_reg_52));
  register_STD #(.BITSIZE_in1(61), .BITSIZE_out1(61)) reg_53 (.out1(out_reg_53_reg_53), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_177_i0_fu___float64_subif_13341_30430), .wenable(wrenable_reg_53));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_54 (.out1(out_reg_54_reg_54), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_33_i0_fu___float64_subif_13341_13546), .wenable(wrenable_reg_54));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_55 (.out1(out_reg_55_reg_55), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_34_i0_fu___float64_subif_13341_13657), .wenable(wrenable_reg_55));
  register_STD #(.BITSIZE_in1(57), .BITSIZE_out1(57)) reg_56 (.out1(out_reg_56_reg_56), .clock(clock), .reset(reset), .in1(out_ui_ternary_plus_expr_FU_64_64_64_64_193_i0_fu___float64_subif_13341_13548), .wenable(wrenable_reg_56));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_57 (.out1(out_reg_57_reg_57), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i4_fu___float64_subif_13341_13705), .wenable(wrenable_reg_57));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_58 (.out1(out_reg_58_reg_58), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_8_0_8_76_i5_fu___float64_subif_13341_13727), .wenable(wrenable_reg_58));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_59 (.out1(out_reg_59_reg_59), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_172_i0_fu___float64_subif_13341_13729), .wenable(wrenable_reg_59));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_ne_expr_FU_16_0_16_144_i1_fu___float64_subif_13341_13368), .wenable(wrenable_reg_6));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_60 (.out1(out_reg_60_reg_60), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i1_fu___float64_subif_13341_31899), .wenable(wrenable_reg_60));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_61 (.out1(out_reg_61_reg_61), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i2_fu___float64_subif_13341_31908), .wenable(wrenable_reg_61));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_62 (.out1(out_reg_62_reg_62), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i3_fu___float64_subif_13341_31917), .wenable(wrenable_reg_62));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_63 (.out1(out_reg_63_reg_63), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i4_fu___float64_subif_13341_31923), .wenable(wrenable_reg_63));
  register_STD #(.BITSIZE_in1(6), .BITSIZE_out1(6)) reg_64 (.out1(out_reg_64_reg_64), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_8_0_8_138_i0_fu___float64_subif_13341_13631), .wenable(wrenable_reg_64));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_65 (.out1(out_reg_65_reg_65), .clock(clock), .reset(reset), .in1(out_ui_lt_expr_FU_1_1_1_141_i2_fu___float64_subif_13341_29898), .wenable(wrenable_reg_65));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_66 (.out1(out_reg_66_reg_66), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_57_i4_fu___float64_subif_13341_31739), .wenable(wrenable_reg_66));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_67 (.out1(out_reg_67_reg_67), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_57_i17_fu___float64_subif_13341_31803), .wenable(wrenable_reg_67));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_68 (.out1(out_reg_68_reg_68), .clock(clock), .reset(reset), .in1(out_truth_and_expr_FU_1_1_1_57_i21_fu___float64_subif_13341_31823), .wenable(wrenable_reg_68));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_69 (.out1(out_reg_69_reg_69), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i3_fu___float64_subif_13341_31911), .wenable(wrenable_reg_69));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i2_fu___float64_subif_13341_13375), .wenable(wrenable_reg_7));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_70 (.out1(out_reg_70_reg_70), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i8_fu___float64_subif_13341_31988), .wenable(wrenable_reg_70));
  register_STD #(.BITSIZE_in1(3), .BITSIZE_out1(3)) reg_71 (.out1(out_reg_71_reg_71), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i11_fu___float64_subif_13341_32004), .wenable(wrenable_reg_71));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_72 (.out1(out_reg_72_reg_72), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i9_fu___float64_subif_13341_32009), .wenable(wrenable_reg_72));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_73 (.out1(out_reg_73_reg_73), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_8_8_8_8_101_i12_fu___float64_subif_13341_32010), .wenable(wrenable_reg_73));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_74 (.out1(out_reg_74_reg_74), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i9_fu___float64_subif_13341_32013), .wenable(wrenable_reg_74));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_75 (.out1(out_reg_75_reg_75), .clock(clock), .reset(reset), .in1(out_ui_cond_expr_FU_1_1_1_1_98_i10_fu___float64_subif_13341_32022), .wenable(wrenable_reg_75));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_76 (.out1(out_reg_76_reg_76), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i10_fu___float64_subif_13341_32030), .wenable(wrenable_reg_76));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_77 (.out1(out_reg_77_reg_77), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i18_fu___float64_subif_13341_32085), .wenable(wrenable_reg_77));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_78 (.out1(out_reg_78_reg_78), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i19_fu___float64_subif_13341_32153), .wenable(wrenable_reg_78));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_79 (.out1(out_reg_79_reg_79), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_184_i4_fu___float64_subif_13341_32257), .wenable(wrenable_reg_79));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_lt_expr_FU_8_8_8_52_i0_fu___float64_subif_13341_13379), .wenable(wrenable_reg_8));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_80 (.out1(out_reg_80_reg_80), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_184_i5_fu___float64_subif_13341_32260), .wenable(wrenable_reg_80));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_81 (.out1(out_reg_81_reg_81), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_184_i7_fu___float64_subif_13341_32270), .wenable(wrenable_reg_81));
  register_STD #(.BITSIZE_in1(47), .BITSIZE_out1(47)) reg_82 (.out1(out_reg_82_reg_82), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_184_i9_fu___float64_subif_13341_32280), .wenable(wrenable_reg_82));
  register_STD #(.BITSIZE_in1(55), .BITSIZE_out1(55)) reg_83 (.out1(out_reg_83_reg_83), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_180_i3_fu___float64_subif_13341_32290), .wenable(wrenable_reg_83));
  register_STD #(.BITSIZE_in1(6), .BITSIZE_out1(6)) reg_84 (.out1(out_reg_84_reg_84), .clock(clock), .reset(reset), .in1(out_UUconvert_expr_FU_40_i0_fu___float64_subif_13341_13635), .wenable(wrenable_reg_84));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_85 (.out1(out_reg_85_reg_85), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_166_i0_fu___float64_subif_13341_13652), .wenable(wrenable_reg_85));
  register_STD #(.BITSIZE_in1(2), .BITSIZE_out1(2)) reg_86 (.out1(out_reg_86_reg_86), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_165_i2_fu___float64_subif_13341_13654), .wenable(wrenable_reg_86));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_87 (.out1(out_reg_87_reg_87), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_0_1_66_i0_fu___float64_subif_13341_13656), .wenable(wrenable_reg_87));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_88 (.out1(out_reg_88_reg_88), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_0_1_67_i0_fu___float64_subif_13341_13660), .wenable(wrenable_reg_88));
  register_STD #(.BITSIZE_in1(52), .BITSIZE_out1(52)) reg_89 (.out1(out_reg_89_reg_89), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_64_0_64_74_i0_fu___float64_subif_13341_13661), .wenable(wrenable_reg_89));
  register_SE #(.BITSIZE_in1(57), .BITSIZE_out1(57)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_17_i0_fu___float64_subif_13341_13541), .wenable(wrenable_reg_9));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_90 (.out1(out_reg_90_reg_90), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_82_i0_fu___float64_subif_13341_13662), .wenable(wrenable_reg_90));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_91 (.out1(out_reg_91_reg_91), .clock(clock), .reset(reset), .in1(out_ui_bit_and_expr_FU_1_1_1_68_i4_fu___float64_subif_13341_13663), .wenable(wrenable_reg_91));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_92 (.out1(out_reg_92_reg_92), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_134_i0_fu___float64_subif_13341_32373), .wenable(wrenable_reg_92));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_93 (.out1(out_reg_93_reg_93), .clock(clock), .reset(reset), .in1(out_truth_not_expr_FU_1_1_58_i17_fu___float64_subif_13341_31843), .wenable(wrenable_reg_93));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_94 (.out1(out_reg_94_reg_94), .clock(clock), .reset(reset), .in1(out_truth_or_expr_FU_1_1_1_59_i0_fu___float64_subif_13341_31877), .wenable(wrenable_reg_94));
  register_STD #(.BITSIZE_in1(13), .BITSIZE_out1(13)) reg_95 (.out1(out_reg_95_reg_95), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_64_0_64_187_i1_fu___float64_subif_13341_32376), .wenable(wrenable_reg_95));
  register_STD #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_96 (.out1(out_reg_96_reg_96), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_64_0_64_132_i2_fu___float64_subif_13341_32383), .wenable(wrenable_reg_96));
  register_STD #(.BITSIZE_in1(63), .BITSIZE_out1(63)) reg_97 (.out1(out_reg_97_reg_97), .clock(clock), .reset(reset), .in1(out_ui_bit_ior_expr_FU_0_64_64_83_i0_fu___float64_subif_13341_13691), .wenable(wrenable_reg_97));
  ui_bit_ior_expr_FU #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) ui_bit_ior_expr_FU_64_64_64_90_i18 (.out1(out_ui_bit_ior_expr_FU_64_64_64_90_i18_ui_bit_ior_expr_FU_64_64_64_90_i18), .in1(out_reg_33_reg_33), .in2(out_reg_34_reg_34));
  // io-signal post fix
  assign return_port = out_ui_view_convert_expr_FU_46_i0_fu___float64_subif_13341_13693;

endmodule

// FSM based controller description for __float64_subif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller___float64_subif(done_port, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_54, wrenable_reg_55, wrenable_reg_56, wrenable_reg_57, wrenable_reg_58, wrenable_reg_59, wrenable_reg_6, wrenable_reg_60, wrenable_reg_61, wrenable_reg_62, wrenable_reg_63, wrenable_reg_64, wrenable_reg_65, wrenable_reg_66, wrenable_reg_67, wrenable_reg_68, wrenable_reg_69, wrenable_reg_7, wrenable_reg_70, wrenable_reg_71, wrenable_reg_72, wrenable_reg_73, wrenable_reg_74, wrenable_reg_75, wrenable_reg_76, wrenable_reg_77, wrenable_reg_78, wrenable_reg_79, wrenable_reg_8, wrenable_reg_80, wrenable_reg_81, wrenable_reg_82, wrenable_reg_83, wrenable_reg_84, wrenable_reg_85, wrenable_reg_86, wrenable_reg_87, wrenable_reg_88, wrenable_reg_89, wrenable_reg_9, wrenable_reg_90, wrenable_reg_91, wrenable_reg_92, wrenable_reg_93, wrenable_reg_94, wrenable_reg_95, wrenable_reg_96, wrenable_reg_97, clock, reset, start_port);
  // IN
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_24;
  output wrenable_reg_25;
  output wrenable_reg_26;
  output wrenable_reg_27;
  output wrenable_reg_28;
  output wrenable_reg_29;
  output wrenable_reg_3;
  output wrenable_reg_30;
  output wrenable_reg_31;
  output wrenable_reg_32;
  output wrenable_reg_33;
  output wrenable_reg_34;
  output wrenable_reg_35;
  output wrenable_reg_36;
  output wrenable_reg_37;
  output wrenable_reg_38;
  output wrenable_reg_39;
  output wrenable_reg_4;
  output wrenable_reg_40;
  output wrenable_reg_41;
  output wrenable_reg_42;
  output wrenable_reg_43;
  output wrenable_reg_44;
  output wrenable_reg_45;
  output wrenable_reg_46;
  output wrenable_reg_47;
  output wrenable_reg_48;
  output wrenable_reg_49;
  output wrenable_reg_5;
  output wrenable_reg_50;
  output wrenable_reg_51;
  output wrenable_reg_52;
  output wrenable_reg_53;
  output wrenable_reg_54;
  output wrenable_reg_55;
  output wrenable_reg_56;
  output wrenable_reg_57;
  output wrenable_reg_58;
  output wrenable_reg_59;
  output wrenable_reg_6;
  output wrenable_reg_60;
  output wrenable_reg_61;
  output wrenable_reg_62;
  output wrenable_reg_63;
  output wrenable_reg_64;
  output wrenable_reg_65;
  output wrenable_reg_66;
  output wrenable_reg_67;
  output wrenable_reg_68;
  output wrenable_reg_69;
  output wrenable_reg_7;
  output wrenable_reg_70;
  output wrenable_reg_71;
  output wrenable_reg_72;
  output wrenable_reg_73;
  output wrenable_reg_74;
  output wrenable_reg_75;
  output wrenable_reg_76;
  output wrenable_reg_77;
  output wrenable_reg_78;
  output wrenable_reg_79;
  output wrenable_reg_8;
  output wrenable_reg_80;
  output wrenable_reg_81;
  output wrenable_reg_82;
  output wrenable_reg_83;
  output wrenable_reg_84;
  output wrenable_reg_85;
  output wrenable_reg_86;
  output wrenable_reg_87;
  output wrenable_reg_88;
  output wrenable_reg_89;
  output wrenable_reg_9;
  output wrenable_reg_90;
  output wrenable_reg_91;
  output wrenable_reg_92;
  output wrenable_reg_93;
  output wrenable_reg_94;
  output wrenable_reg_95;
  output wrenable_reg_96;
  output wrenable_reg_97;
  parameter [11:0] S_0 = 12'b000000000001,
    S_1 = 12'b000000000010,
    S_2 = 12'b000000000100,
    S_3 = 12'b000000001000,
    S_4 = 12'b000000010000,
    S_5 = 12'b000000100000,
    S_6 = 12'b000001000000,
    S_7 = 12'b000010000000,
    S_8 = 12'b000100000000,
    S_9 = 12'b001000000000,
    S_10 = 12'b010000000000,
    S_11 = 12'b100000000000;
  reg [11:0] _present_state, _next_state;
  reg done_port;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_24;
  reg wrenable_reg_25;
  reg wrenable_reg_26;
  reg wrenable_reg_27;
  reg wrenable_reg_28;
  reg wrenable_reg_29;
  reg wrenable_reg_3;
  reg wrenable_reg_30;
  reg wrenable_reg_31;
  reg wrenable_reg_32;
  reg wrenable_reg_33;
  reg wrenable_reg_34;
  reg wrenable_reg_35;
  reg wrenable_reg_36;
  reg wrenable_reg_37;
  reg wrenable_reg_38;
  reg wrenable_reg_39;
  reg wrenable_reg_4;
  reg wrenable_reg_40;
  reg wrenable_reg_41;
  reg wrenable_reg_42;
  reg wrenable_reg_43;
  reg wrenable_reg_44;
  reg wrenable_reg_45;
  reg wrenable_reg_46;
  reg wrenable_reg_47;
  reg wrenable_reg_48;
  reg wrenable_reg_49;
  reg wrenable_reg_5;
  reg wrenable_reg_50;
  reg wrenable_reg_51;
  reg wrenable_reg_52;
  reg wrenable_reg_53;
  reg wrenable_reg_54;
  reg wrenable_reg_55;
  reg wrenable_reg_56;
  reg wrenable_reg_57;
  reg wrenable_reg_58;
  reg wrenable_reg_59;
  reg wrenable_reg_6;
  reg wrenable_reg_60;
  reg wrenable_reg_61;
  reg wrenable_reg_62;
  reg wrenable_reg_63;
  reg wrenable_reg_64;
  reg wrenable_reg_65;
  reg wrenable_reg_66;
  reg wrenable_reg_67;
  reg wrenable_reg_68;
  reg wrenable_reg_69;
  reg wrenable_reg_7;
  reg wrenable_reg_70;
  reg wrenable_reg_71;
  reg wrenable_reg_72;
  reg wrenable_reg_73;
  reg wrenable_reg_74;
  reg wrenable_reg_75;
  reg wrenable_reg_76;
  reg wrenable_reg_77;
  reg wrenable_reg_78;
  reg wrenable_reg_79;
  reg wrenable_reg_8;
  reg wrenable_reg_80;
  reg wrenable_reg_81;
  reg wrenable_reg_82;
  reg wrenable_reg_83;
  reg wrenable_reg_84;
  reg wrenable_reg_85;
  reg wrenable_reg_86;
  reg wrenable_reg_87;
  reg wrenable_reg_88;
  reg wrenable_reg_89;
  reg wrenable_reg_9;
  reg wrenable_reg_90;
  reg wrenable_reg_91;
  reg wrenable_reg_92;
  reg wrenable_reg_93;
  reg wrenable_reg_94;
  reg wrenable_reg_95;
  reg wrenable_reg_96;
  reg wrenable_reg_97;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_24 = 1'b0;
    wrenable_reg_25 = 1'b0;
    wrenable_reg_26 = 1'b0;
    wrenable_reg_27 = 1'b0;
    wrenable_reg_28 = 1'b0;
    wrenable_reg_29 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_30 = 1'b0;
    wrenable_reg_31 = 1'b0;
    wrenable_reg_32 = 1'b0;
    wrenable_reg_33 = 1'b0;
    wrenable_reg_34 = 1'b0;
    wrenable_reg_35 = 1'b0;
    wrenable_reg_36 = 1'b0;
    wrenable_reg_37 = 1'b0;
    wrenable_reg_38 = 1'b0;
    wrenable_reg_39 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_40 = 1'b0;
    wrenable_reg_41 = 1'b0;
    wrenable_reg_42 = 1'b0;
    wrenable_reg_43 = 1'b0;
    wrenable_reg_44 = 1'b0;
    wrenable_reg_45 = 1'b0;
    wrenable_reg_46 = 1'b0;
    wrenable_reg_47 = 1'b0;
    wrenable_reg_48 = 1'b0;
    wrenable_reg_49 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_50 = 1'b0;
    wrenable_reg_51 = 1'b0;
    wrenable_reg_52 = 1'b0;
    wrenable_reg_53 = 1'b0;
    wrenable_reg_54 = 1'b0;
    wrenable_reg_55 = 1'b0;
    wrenable_reg_56 = 1'b0;
    wrenable_reg_57 = 1'b0;
    wrenable_reg_58 = 1'b0;
    wrenable_reg_59 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_60 = 1'b0;
    wrenable_reg_61 = 1'b0;
    wrenable_reg_62 = 1'b0;
    wrenable_reg_63 = 1'b0;
    wrenable_reg_64 = 1'b0;
    wrenable_reg_65 = 1'b0;
    wrenable_reg_66 = 1'b0;
    wrenable_reg_67 = 1'b0;
    wrenable_reg_68 = 1'b0;
    wrenable_reg_69 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_70 = 1'b0;
    wrenable_reg_71 = 1'b0;
    wrenable_reg_72 = 1'b0;
    wrenable_reg_73 = 1'b0;
    wrenable_reg_74 = 1'b0;
    wrenable_reg_75 = 1'b0;
    wrenable_reg_76 = 1'b0;
    wrenable_reg_77 = 1'b0;
    wrenable_reg_78 = 1'b0;
    wrenable_reg_79 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_80 = 1'b0;
    wrenable_reg_81 = 1'b0;
    wrenable_reg_82 = 1'b0;
    wrenable_reg_83 = 1'b0;
    wrenable_reg_84 = 1'b0;
    wrenable_reg_85 = 1'b0;
    wrenable_reg_86 = 1'b0;
    wrenable_reg_87 = 1'b0;
    wrenable_reg_88 = 1'b0;
    wrenable_reg_89 = 1'b0;
    wrenable_reg_9 = 1'b0;
    wrenable_reg_90 = 1'b0;
    wrenable_reg_91 = 1'b0;
    wrenable_reg_92 = 1'b0;
    wrenable_reg_93 = 1'b0;
    wrenable_reg_94 = 1'b0;
    wrenable_reg_95 = 1'b0;
    wrenable_reg_96 = 1'b0;
    wrenable_reg_97 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_15 = 1'b1;
          wrenable_reg_16 = 1'b1;
          wrenable_reg_17 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_1;
        end
        else
        begin
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_54 = 1'bX;
          wrenable_reg_55 = 1'bX;
          wrenable_reg_56 = 1'bX;
          wrenable_reg_57 = 1'bX;
          wrenable_reg_58 = 1'bX;
          wrenable_reg_59 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_60 = 1'bX;
          wrenable_reg_61 = 1'bX;
          wrenable_reg_62 = 1'bX;
          wrenable_reg_63 = 1'bX;
          wrenable_reg_64 = 1'bX;
          wrenable_reg_65 = 1'bX;
          wrenable_reg_66 = 1'bX;
          wrenable_reg_67 = 1'bX;
          wrenable_reg_68 = 1'bX;
          wrenable_reg_69 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_70 = 1'bX;
          wrenable_reg_71 = 1'bX;
          wrenable_reg_72 = 1'bX;
          wrenable_reg_73 = 1'bX;
          wrenable_reg_74 = 1'bX;
          wrenable_reg_75 = 1'bX;
          wrenable_reg_76 = 1'bX;
          wrenable_reg_77 = 1'bX;
          wrenable_reg_78 = 1'bX;
          wrenable_reg_79 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_80 = 1'bX;
          wrenable_reg_81 = 1'bX;
          wrenable_reg_82 = 1'bX;
          wrenable_reg_83 = 1'bX;
          wrenable_reg_84 = 1'bX;
          wrenable_reg_85 = 1'bX;
          wrenable_reg_86 = 1'bX;
          wrenable_reg_87 = 1'bX;
          wrenable_reg_88 = 1'bX;
          wrenable_reg_89 = 1'bX;
          wrenable_reg_9 = 1'bX;
          wrenable_reg_90 = 1'bX;
          wrenable_reg_91 = 1'bX;
          wrenable_reg_92 = 1'bX;
          wrenable_reg_93 = 1'bX;
          wrenable_reg_94 = 1'bX;
          wrenable_reg_95 = 1'bX;
          wrenable_reg_96 = 1'bX;
          wrenable_reg_97 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_18 = 1'b1;
          wrenable_reg_19 = 1'b1;
          wrenable_reg_20 = 1'b1;
          wrenable_reg_21 = 1'b1;
          wrenable_reg_22 = 1'b1;
          wrenable_reg_23 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_25 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_27 = 1'b1;
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          wrenable_reg_31 = 1'b1;
          wrenable_reg_32 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          wrenable_reg_33 = 1'b1;
          wrenable_reg_34 = 1'b1;
          wrenable_reg_35 = 1'b1;
          wrenable_reg_36 = 1'b1;
          wrenable_reg_37 = 1'b1;
          wrenable_reg_38 = 1'b1;
          wrenable_reg_39 = 1'b1;
          wrenable_reg_40 = 1'b1;
          wrenable_reg_41 = 1'b1;
          wrenable_reg_42 = 1'b1;
          wrenable_reg_43 = 1'b1;
          wrenable_reg_44 = 1'b1;
          wrenable_reg_45 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          wrenable_reg_46 = 1'b1;
          wrenable_reg_47 = 1'b1;
          wrenable_reg_48 = 1'b1;
          wrenable_reg_49 = 1'b1;
          wrenable_reg_50 = 1'b1;
          wrenable_reg_51 = 1'b1;
          _next_state = S_4;
        end
      S_4 :
        begin
          wrenable_reg_52 = 1'b1;
          wrenable_reg_53 = 1'b1;
          _next_state = S_5;
        end
      S_5 :
        begin
          wrenable_reg_54 = 1'b1;
          wrenable_reg_55 = 1'b1;
          _next_state = S_6;
        end
      S_6 :
        begin
          wrenable_reg_56 = 1'b1;
          _next_state = S_7;
        end
      S_7 :
        begin
          wrenable_reg_57 = 1'b1;
          wrenable_reg_58 = 1'b1;
          wrenable_reg_59 = 1'b1;
          wrenable_reg_60 = 1'b1;
          wrenable_reg_61 = 1'b1;
          wrenable_reg_62 = 1'b1;
          wrenable_reg_63 = 1'b1;
          wrenable_reg_64 = 1'b1;
          wrenable_reg_65 = 1'b1;
          wrenable_reg_66 = 1'b1;
          wrenable_reg_67 = 1'b1;
          wrenable_reg_68 = 1'b1;
          wrenable_reg_69 = 1'b1;
          wrenable_reg_70 = 1'b1;
          wrenable_reg_71 = 1'b1;
          wrenable_reg_72 = 1'b1;
          wrenable_reg_73 = 1'b1;
          wrenable_reg_74 = 1'b1;
          wrenable_reg_75 = 1'b1;
          wrenable_reg_76 = 1'b1;
          wrenable_reg_77 = 1'b1;
          wrenable_reg_78 = 1'b1;
          wrenable_reg_79 = 1'b1;
          wrenable_reg_80 = 1'b1;
          wrenable_reg_81 = 1'b1;
          wrenable_reg_82 = 1'b1;
          wrenable_reg_83 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          wrenable_reg_84 = 1'b1;
          wrenable_reg_85 = 1'b1;
          wrenable_reg_86 = 1'b1;
          wrenable_reg_87 = 1'b1;
          wrenable_reg_88 = 1'b1;
          wrenable_reg_89 = 1'b1;
          _next_state = S_9;
        end
      S_9 :
        begin
          wrenable_reg_90 = 1'b1;
          wrenable_reg_91 = 1'b1;
          wrenable_reg_92 = 1'b1;
          wrenable_reg_93 = 1'b1;
          wrenable_reg_94 = 1'b1;
          wrenable_reg_95 = 1'b1;
          _next_state = S_10;
        end
      S_10 :
        begin
          wrenable_reg_96 = 1'b1;
          wrenable_reg_97 = 1'b1;
          _next_state = S_11;
          done_port = 1'b1;
        end
      S_11 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_54 = 1'bX;
          wrenable_reg_55 = 1'bX;
          wrenable_reg_56 = 1'bX;
          wrenable_reg_57 = 1'bX;
          wrenable_reg_58 = 1'bX;
          wrenable_reg_59 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_60 = 1'bX;
          wrenable_reg_61 = 1'bX;
          wrenable_reg_62 = 1'bX;
          wrenable_reg_63 = 1'bX;
          wrenable_reg_64 = 1'bX;
          wrenable_reg_65 = 1'bX;
          wrenable_reg_66 = 1'bX;
          wrenable_reg_67 = 1'bX;
          wrenable_reg_68 = 1'bX;
          wrenable_reg_69 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_70 = 1'bX;
          wrenable_reg_71 = 1'bX;
          wrenable_reg_72 = 1'bX;
          wrenable_reg_73 = 1'bX;
          wrenable_reg_74 = 1'bX;
          wrenable_reg_75 = 1'bX;
          wrenable_reg_76 = 1'bX;
          wrenable_reg_77 = 1'bX;
          wrenable_reg_78 = 1'bX;
          wrenable_reg_79 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_80 = 1'bX;
          wrenable_reg_81 = 1'bX;
          wrenable_reg_82 = 1'bX;
          wrenable_reg_83 = 1'bX;
          wrenable_reg_84 = 1'bX;
          wrenable_reg_85 = 1'bX;
          wrenable_reg_86 = 1'bX;
          wrenable_reg_87 = 1'bX;
          wrenable_reg_88 = 1'bX;
          wrenable_reg_89 = 1'bX;
          wrenable_reg_9 = 1'bX;
          wrenable_reg_90 = 1'bX;
          wrenable_reg_91 = 1'bX;
          wrenable_reg_92 = 1'bX;
          wrenable_reg_93 = 1'bX;
          wrenable_reg_94 = 1'bX;
          wrenable_reg_95 = 1'bX;
          wrenable_reg_96 = 1'bX;
          wrenable_reg_97 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for __float64_subif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module __float64_subif(clock, reset, start_port, done_port, a, b, return_port);
  // IN
  input clock;
  input reset;
  input start_port;
  input [63:0] a;
  input [63:0] b;
  // OUT
  output done_port;
  output [63:0] return_port;
  // Component and signal declarations
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_24;
  wire wrenable_reg_25;
  wire wrenable_reg_26;
  wire wrenable_reg_27;
  wire wrenable_reg_28;
  wire wrenable_reg_29;
  wire wrenable_reg_3;
  wire wrenable_reg_30;
  wire wrenable_reg_31;
  wire wrenable_reg_32;
  wire wrenable_reg_33;
  wire wrenable_reg_34;
  wire wrenable_reg_35;
  wire wrenable_reg_36;
  wire wrenable_reg_37;
  wire wrenable_reg_38;
  wire wrenable_reg_39;
  wire wrenable_reg_4;
  wire wrenable_reg_40;
  wire wrenable_reg_41;
  wire wrenable_reg_42;
  wire wrenable_reg_43;
  wire wrenable_reg_44;
  wire wrenable_reg_45;
  wire wrenable_reg_46;
  wire wrenable_reg_47;
  wire wrenable_reg_48;
  wire wrenable_reg_49;
  wire wrenable_reg_5;
  wire wrenable_reg_50;
  wire wrenable_reg_51;
  wire wrenable_reg_52;
  wire wrenable_reg_53;
  wire wrenable_reg_54;
  wire wrenable_reg_55;
  wire wrenable_reg_56;
  wire wrenable_reg_57;
  wire wrenable_reg_58;
  wire wrenable_reg_59;
  wire wrenable_reg_6;
  wire wrenable_reg_60;
  wire wrenable_reg_61;
  wire wrenable_reg_62;
  wire wrenable_reg_63;
  wire wrenable_reg_64;
  wire wrenable_reg_65;
  wire wrenable_reg_66;
  wire wrenable_reg_67;
  wire wrenable_reg_68;
  wire wrenable_reg_69;
  wire wrenable_reg_7;
  wire wrenable_reg_70;
  wire wrenable_reg_71;
  wire wrenable_reg_72;
  wire wrenable_reg_73;
  wire wrenable_reg_74;
  wire wrenable_reg_75;
  wire wrenable_reg_76;
  wire wrenable_reg_77;
  wire wrenable_reg_78;
  wire wrenable_reg_79;
  wire wrenable_reg_8;
  wire wrenable_reg_80;
  wire wrenable_reg_81;
  wire wrenable_reg_82;
  wire wrenable_reg_83;
  wire wrenable_reg_84;
  wire wrenable_reg_85;
  wire wrenable_reg_86;
  wire wrenable_reg_87;
  wire wrenable_reg_88;
  wire wrenable_reg_89;
  wire wrenable_reg_9;
  wire wrenable_reg_90;
  wire wrenable_reg_91;
  wire wrenable_reg_92;
  wire wrenable_reg_93;
  wire wrenable_reg_94;
  wire wrenable_reg_95;
  wire wrenable_reg_96;
  wire wrenable_reg_97;
  
  controller___float64_subif Controller_i (.done_port(done_delayed_REG_signal_in), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_54(wrenable_reg_54), .wrenable_reg_55(wrenable_reg_55), .wrenable_reg_56(wrenable_reg_56), .wrenable_reg_57(wrenable_reg_57), .wrenable_reg_58(wrenable_reg_58), .wrenable_reg_59(wrenable_reg_59), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_60(wrenable_reg_60), .wrenable_reg_61(wrenable_reg_61), .wrenable_reg_62(wrenable_reg_62), .wrenable_reg_63(wrenable_reg_63), .wrenable_reg_64(wrenable_reg_64), .wrenable_reg_65(wrenable_reg_65), .wrenable_reg_66(wrenable_reg_66), .wrenable_reg_67(wrenable_reg_67), .wrenable_reg_68(wrenable_reg_68), .wrenable_reg_69(wrenable_reg_69), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_70(wrenable_reg_70), .wrenable_reg_71(wrenable_reg_71), .wrenable_reg_72(wrenable_reg_72), .wrenable_reg_73(wrenable_reg_73), .wrenable_reg_74(wrenable_reg_74), .wrenable_reg_75(wrenable_reg_75), .wrenable_reg_76(wrenable_reg_76), .wrenable_reg_77(wrenable_reg_77), .wrenable_reg_78(wrenable_reg_78), .wrenable_reg_79(wrenable_reg_79), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_80(wrenable_reg_80), .wrenable_reg_81(wrenable_reg_81), .wrenable_reg_82(wrenable_reg_82), .wrenable_reg_83(wrenable_reg_83), .wrenable_reg_84(wrenable_reg_84), .wrenable_reg_85(wrenable_reg_85), .wrenable_reg_86(wrenable_reg_86), .wrenable_reg_87(wrenable_reg_87), .wrenable_reg_88(wrenable_reg_88), .wrenable_reg_89(wrenable_reg_89), .wrenable_reg_9(wrenable_reg_9), .wrenable_reg_90(wrenable_reg_90), .wrenable_reg_91(wrenable_reg_91), .wrenable_reg_92(wrenable_reg_92), .wrenable_reg_93(wrenable_reg_93), .wrenable_reg_94(wrenable_reg_94), .wrenable_reg_95(wrenable_reg_95), .wrenable_reg_96(wrenable_reg_96), .wrenable_reg_97(wrenable_reg_97), .clock(clock), .reset(reset), .start_port(start_port));
  datapath___float64_subif Datapath_i (.return_port(return_port), .clock(clock), .reset(reset), .in_port_a(a), .in_port_b(b), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_54(wrenable_reg_54), .wrenable_reg_55(wrenable_reg_55), .wrenable_reg_56(wrenable_reg_56), .wrenable_reg_57(wrenable_reg_57), .wrenable_reg_58(wrenable_reg_58), .wrenable_reg_59(wrenable_reg_59), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_60(wrenable_reg_60), .wrenable_reg_61(wrenable_reg_61), .wrenable_reg_62(wrenable_reg_62), .wrenable_reg_63(wrenable_reg_63), .wrenable_reg_64(wrenable_reg_64), .wrenable_reg_65(wrenable_reg_65), .wrenable_reg_66(wrenable_reg_66), .wrenable_reg_67(wrenable_reg_67), .wrenable_reg_68(wrenable_reg_68), .wrenable_reg_69(wrenable_reg_69), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_70(wrenable_reg_70), .wrenable_reg_71(wrenable_reg_71), .wrenable_reg_72(wrenable_reg_72), .wrenable_reg_73(wrenable_reg_73), .wrenable_reg_74(wrenable_reg_74), .wrenable_reg_75(wrenable_reg_75), .wrenable_reg_76(wrenable_reg_76), .wrenable_reg_77(wrenable_reg_77), .wrenable_reg_78(wrenable_reg_78), .wrenable_reg_79(wrenable_reg_79), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_80(wrenable_reg_80), .wrenable_reg_81(wrenable_reg_81), .wrenable_reg_82(wrenable_reg_82), .wrenable_reg_83(wrenable_reg_83), .wrenable_reg_84(wrenable_reg_84), .wrenable_reg_85(wrenable_reg_85), .wrenable_reg_86(wrenable_reg_86), .wrenable_reg_87(wrenable_reg_87), .wrenable_reg_88(wrenable_reg_88), .wrenable_reg_89(wrenable_reg_89), .wrenable_reg_9(wrenable_reg_9), .wrenable_reg_90(wrenable_reg_90), .wrenable_reg_91(wrenable_reg_91), .wrenable_reg_92(wrenable_reg_92), .wrenable_reg_93(wrenable_reg_93), .wrenable_reg_94(wrenable_reg_94), .wrenable_reg_95(wrenable_reg_95), .wrenable_reg_96(wrenable_reg_96), .wrenable_reg_97(wrenable_reg_97));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Proxy module for function: PROXY_PREF___float64_divSRT4if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module PROXY_PREF___float64_divSRT4if(start_port, a, b, done_port, return_port, PROXY_PREF_start_port, PROXY_PREF_a, PROXY_PREF_b, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___float64_divSRT4if);
  // IN
  input start_port;
  input [63:0] a;
  input [63:0] b;
  input PROXY_PREF_done_port;
  input [63:0] PROXY_PREF_return_port;
  input sel___float64_divSRT4if;
  // OUT
  output done_port;
  output [63:0] return_port;
  output PROXY_PREF_start_port;
  output [63:0] PROXY_PREF_a;
  output [63:0] PROXY_PREF_b;
  assign PROXY_PREF_start_port = start_port;
  assign PROXY_PREF_a = sel___float64_divSRT4if ? a : 0;
  assign PROXY_PREF_b = sel___float64_divSRT4if ? b : 0;
  assign done_port = PROXY_PREF_done_port;
  assign return_port = PROXY_PREF_return_port;
endmodule

// Proxy module for function: PROXY_PREF___float64_mulif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module PROXY_PREF___float64_mulif(start_port, a, b, done_port, return_port, PROXY_PREF_start_port, PROXY_PREF_a, PROXY_PREF_b, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___float64_mulif);
  // IN
  input start_port;
  input [63:0] a;
  input [63:0] b;
  input PROXY_PREF_done_port;
  input [63:0] PROXY_PREF_return_port;
  input sel___float64_mulif;
  // OUT
  output done_port;
  output [63:0] return_port;
  output PROXY_PREF_start_port;
  output [63:0] PROXY_PREF_a;
  output [63:0] PROXY_PREF_b;
  assign PROXY_PREF_start_port = start_port;
  assign PROXY_PREF_a = sel___float64_mulif ? a : 0;
  assign PROXY_PREF_b = sel___float64_mulif ? b : 0;
  assign done_port = PROXY_PREF_done_port;
  assign return_port = PROXY_PREF_return_port;
endmodule

// Proxy module for function: PROXY_PREF___float64_to_int32_round_to_zeroif
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module PROXY_PREF___float64_to_int32_round_to_zeroif(start_port, a, done_port, return_port, PROXY_PREF_start_port, PROXY_PREF_a, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___float64_to_int32_round_to_zeroif);
  // IN
  input start_port;
  input [63:0] a;
  input PROXY_PREF_done_port;
  input signed [31:0] PROXY_PREF_return_port;
  input sel___float64_to_int32_round_to_zeroif;
  // OUT
  output done_port;
  output signed [31:0] return_port;
  output PROXY_PREF_start_port;
  output [63:0] PROXY_PREF_a;
  assign PROXY_PREF_start_port = start_port;
  assign PROXY_PREF_a = sel___float64_to_int32_round_to_zeroif ? a : 0;
  assign done_port = PROXY_PREF_done_port;
  assign return_port = PROXY_PREF_return_port;
endmodule

// Proxy module for function: PROXY_PREF___int32_to_float64if
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module PROXY_PREF___int32_to_float64if(start_port, a, done_port, return_port, PROXY_PREF_start_port, PROXY_PREF_a, PROXY_PREF_done_port, PROXY_PREF_return_port, sel___int32_to_float64if);
  // IN
  input start_port;
  input signed [31:0] a;
  input PROXY_PREF_done_port;
  input [63:0] PROXY_PREF_return_port;
  input sel___int32_to_float64if;
  // OUT
  output done_port;
  output [63:0] return_port;
  output PROXY_PREF_start_port;
  output signed [31:0] PROXY_PREF_a;
  assign PROXY_PREF_start_port = start_port;
  assign PROXY_PREF_a = sel___int32_to_float64if ? a : 0;
  assign done_port = PROXY_PREF_done_port;
  assign return_port = PROXY_PREF_return_port;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2013-2020 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module bus_merger(in1, out1);
  parameter BITSIZE_in1=1, PORTSIZE_in1=2, BITSIZE_out1=1;
  // IN
  input [(PORTSIZE_in1*BITSIZE_in1)+(-1):0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  
  function [BITSIZE_out1-1:0] merge;
    input [BITSIZE_in1*PORTSIZE_in1-1:0] m;
    reg [BITSIZE_out1-1:0] res;
    integer i1;
  begin
    res={BITSIZE_in1{1'b0}};
    for(i1 = 0; i1 < PORTSIZE_in1; i1 = i1 + 1)
    begin
      res = res | m[i1*BITSIZE_in1 +:BITSIZE_in1];
    end
    merge = res;
  end
  endfunction
  
  assign out1 = merge(in1);
endmodule

// Datapath RTL description for mysin
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath_mysin(clock, reset, in_port_rad, return_port, PROXY_PREF_done_port___float64_divSRT4if, PROXY_PREF_return_port___float64_divSRT4if, PROXY_PREF_start_port___float64_divSRT4if, PROXY_PREF_a___float64_divSRT4if, PROXY_PREF_b___float64_divSRT4if, PROXY_PREF_done_port___float64_mulif, PROXY_PREF_return_port___float64_mulif, PROXY_PREF_start_port___float64_mulif, PROXY_PREF_a___float64_mulif, PROXY_PREF_b___float64_mulif, PROXY_PREF_done_port___float64_to_int32_round_to_zeroif, PROXY_PREF_return_port___float64_to_int32_round_to_zeroif, PROXY_PREF_start_port___float64_to_int32_round_to_zeroif, PROXY_PREF_a___float64_to_int32_round_to_zeroif, PROXY_PREF_done_port___int32_to_float64if, PROXY_PREF_return_port___int32_to_float64if, PROXY_PREF_start_port___int32_to_float64if, PROXY_PREF_a___int32_to_float64if, selector_IN_UNBOUNDED_mysin_28866_29025, selector_IN_UNBOUNDED_mysin_28866_29026, selector_IN_UNBOUNDED_mysin_28866_29032, selector_IN_UNBOUNDED_mysin_28866_29045, selector_IN_UNBOUNDED_mysin_28866_29046, selector_IN_UNBOUNDED_mysin_28866_29051, selector_IN_UNBOUNDED_mysin_28866_29065, selector_IN_UNBOUNDED_mysin_28866_29066, selector_IN_UNBOUNDED_mysin_28866_29067, selector_IN_UNBOUNDED_mysin_28866_29101, selector_IN_UNBOUNDED_mysin_28866_29102, selector_IN_UNBOUNDED_mysin_28866_29103, selector_IN_UNBOUNDED_mysin_28866_29104, selector_IN_UNBOUNDED_mysin_28866_29105, selector_IN_UNBOUNDED_mysin_28866_29106, selector_IN_UNBOUNDED_mysin_28866_29107, selector_IN_UNBOUNDED_mysin_28866_29155, selector_IN_UNBOUNDED_mysin_28866_29672, selector_IN_UNBOUNDED_mysin_28866_29674, selector_IN_UNBOUNDED_mysin_28866_29676, selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0, selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0, selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0, selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0, selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1, selector_MUX_25___float64_addif_36_i0_0_0_0, selector_MUX_26___float64_addif_36_i0_1_0_0, selector_MUX_54_reg_10_0_0_0, selector_MUX_55_reg_11_0_0_0, selector_MUX_57_reg_13_0_0_0, selector_MUX_64_reg_2_0_0_0, selector_MUX_64_reg_2_0_0_1, fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if, fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if, fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif, fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif, fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif, fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif, fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if, fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION_mysin_28866_29040, OUT_CONDITION_mysin_28866_29057, OUT_CONDITION_mysin_28866_29156, OUT_UNBOUNDED_mysin_28866_29025, OUT_UNBOUNDED_mysin_28866_29026, OUT_UNBOUNDED_mysin_28866_29032, OUT_UNBOUNDED_mysin_28866_29045, OUT_UNBOUNDED_mysin_28866_29046, OUT_UNBOUNDED_mysin_28866_29051, OUT_UNBOUNDED_mysin_28866_29065, OUT_UNBOUNDED_mysin_28866_29066, OUT_UNBOUNDED_mysin_28866_29067, OUT_UNBOUNDED_mysin_28866_29101, OUT_UNBOUNDED_mysin_28866_29102, OUT_UNBOUNDED_mysin_28866_29103, OUT_UNBOUNDED_mysin_28866_29104, OUT_UNBOUNDED_mysin_28866_29105, OUT_UNBOUNDED_mysin_28866_29106, OUT_UNBOUNDED_mysin_28866_29107, OUT_UNBOUNDED_mysin_28866_29155, OUT_UNBOUNDED_mysin_28866_29672, OUT_UNBOUNDED_mysin_28866_29674, OUT_UNBOUNDED_mysin_28866_29676);
  // IN
  input clock;
  input reset;
  input signed [7:0] in_port_rad;
  input PROXY_PREF_done_port___float64_divSRT4if;
  input [63:0] PROXY_PREF_return_port___float64_divSRT4if;
  input PROXY_PREF_done_port___float64_mulif;
  input [63:0] PROXY_PREF_return_port___float64_mulif;
  input PROXY_PREF_done_port___float64_to_int32_round_to_zeroif;
  input signed [31:0] PROXY_PREF_return_port___float64_to_int32_round_to_zeroif;
  input PROXY_PREF_done_port___int32_to_float64if;
  input [63:0] PROXY_PREF_return_port___int32_to_float64if;
  input selector_IN_UNBOUNDED_mysin_28866_29025;
  input selector_IN_UNBOUNDED_mysin_28866_29026;
  input selector_IN_UNBOUNDED_mysin_28866_29032;
  input selector_IN_UNBOUNDED_mysin_28866_29045;
  input selector_IN_UNBOUNDED_mysin_28866_29046;
  input selector_IN_UNBOUNDED_mysin_28866_29051;
  input selector_IN_UNBOUNDED_mysin_28866_29065;
  input selector_IN_UNBOUNDED_mysin_28866_29066;
  input selector_IN_UNBOUNDED_mysin_28866_29067;
  input selector_IN_UNBOUNDED_mysin_28866_29101;
  input selector_IN_UNBOUNDED_mysin_28866_29102;
  input selector_IN_UNBOUNDED_mysin_28866_29103;
  input selector_IN_UNBOUNDED_mysin_28866_29104;
  input selector_IN_UNBOUNDED_mysin_28866_29105;
  input selector_IN_UNBOUNDED_mysin_28866_29106;
  input selector_IN_UNBOUNDED_mysin_28866_29107;
  input selector_IN_UNBOUNDED_mysin_28866_29155;
  input selector_IN_UNBOUNDED_mysin_28866_29672;
  input selector_IN_UNBOUNDED_mysin_28866_29674;
  input selector_IN_UNBOUNDED_mysin_28866_29676;
  input selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0;
  input selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0;
  input selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0;
  input selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0;
  input selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1;
  input selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0;
  input selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1;
  input selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2;
  input selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0;
  input selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1;
  input selector_MUX_25___float64_addif_36_i0_0_0_0;
  input selector_MUX_26___float64_addif_36_i0_1_0_0;
  input selector_MUX_54_reg_10_0_0_0;
  input selector_MUX_55_reg_11_0_0_0;
  input selector_MUX_57_reg_13_0_0_0;
  input selector_MUX_64_reg_2_0_0_0;
  input selector_MUX_64_reg_2_0_0_1;
  input fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if;
  input fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if;
  input fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif;
  input fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif;
  input fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif;
  input fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif;
  input fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if;
  input fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output signed [7:0] return_port;
  output PROXY_PREF_start_port___float64_divSRT4if;
  output [63:0] PROXY_PREF_a___float64_divSRT4if;
  output [63:0] PROXY_PREF_b___float64_divSRT4if;
  output PROXY_PREF_start_port___float64_mulif;
  output [63:0] PROXY_PREF_a___float64_mulif;
  output [63:0] PROXY_PREF_b___float64_mulif;
  output PROXY_PREF_start_port___float64_to_int32_round_to_zeroif;
  output [63:0] PROXY_PREF_a___float64_to_int32_round_to_zeroif;
  output PROXY_PREF_start_port___int32_to_float64if;
  output signed [31:0] PROXY_PREF_a___int32_to_float64if;
  output OUT_CONDITION_mysin_28866_29040;
  output OUT_CONDITION_mysin_28866_29057;
  output OUT_CONDITION_mysin_28866_29156;
  output OUT_UNBOUNDED_mysin_28866_29025;
  output OUT_UNBOUNDED_mysin_28866_29026;
  output OUT_UNBOUNDED_mysin_28866_29032;
  output OUT_UNBOUNDED_mysin_28866_29045;
  output OUT_UNBOUNDED_mysin_28866_29046;
  output OUT_UNBOUNDED_mysin_28866_29051;
  output OUT_UNBOUNDED_mysin_28866_29065;
  output OUT_UNBOUNDED_mysin_28866_29066;
  output OUT_UNBOUNDED_mysin_28866_29067;
  output OUT_UNBOUNDED_mysin_28866_29101;
  output OUT_UNBOUNDED_mysin_28866_29102;
  output OUT_UNBOUNDED_mysin_28866_29103;
  output OUT_UNBOUNDED_mysin_28866_29104;
  output OUT_UNBOUNDED_mysin_28866_29105;
  output OUT_UNBOUNDED_mysin_28866_29106;
  output OUT_UNBOUNDED_mysin_28866_29107;
  output OUT_UNBOUNDED_mysin_28866_29155;
  output OUT_UNBOUNDED_mysin_28866_29672;
  output OUT_UNBOUNDED_mysin_28866_29674;
  output OUT_UNBOUNDED_mysin_28866_29676;
  // Component and signal declarations
  wire signed [7:0] out_ASSIGN_SIGNED_FU_12_i0_fu_mysin_28866_32540;
  wire signed [14:0] out_ASSIGN_SIGNED_FU_13_i0_fu_mysin_28866_32542;
  wire signed [7:0] out_IIdata_converter_FU_11_i0_fu_mysin_28866_29061;
  wire signed [22:0] out_IIdata_converter_FU_14_i0_fu_mysin_28866_30019;
  wire signed [7:0] out_IIdata_converter_FU_15_i0_fu_mysin_28866_30023;
  wire signed [22:0] out_IIdata_converter_FU_17_i0_fu_mysin_28866_30026;
  wire signed [7:0] out_IIdata_converter_FU_18_i0_fu_mysin_28866_30033;
  wire signed [7:0] out_IIdata_converter_FU_23_i0_fu_mysin_28866_29099;
  wire signed [7:0] out_IIdata_converter_FU_24_i0_fu_mysin_28866_30029;
  wire signed [7:0] out_IIdata_converter_FU_25_i0_fu_mysin_28866_30036;
  wire signed [7:0] out_IIdata_converter_FU_4_i0_fu_mysin_28866_29998;
  wire signed [7:0] out_IIdata_converter_FU_5_i0_fu_mysin_28866_30001;
  wire signed [7:0] out_IIdata_converter_FU_8_i0_fu_mysin_28866_30009;
  wire signed [7:0] out_IIdata_converter_FU_9_i0_fu_mysin_28866_30012;
  wire [7:0] out_IUdata_converter_FU_21_i0_fu_mysin_28866_29145;
  wire [63:0] out_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0;
  wire [63:0] out_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0;
  wire [63:0] out_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0;
  wire [63:0] out_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0;
  wire [63:0] out_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1;
  wire [31:0] out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0;
  wire [31:0] out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1;
  wire [31:0] out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2;
  wire [31:0] out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0;
  wire [31:0] out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1;
  wire [63:0] out_MUX_25___float64_addif_36_i0_0_0_0;
  wire [63:0] out_MUX_26___float64_addif_36_i0_1_0_0;
  wire [7:0] out_MUX_54_reg_10_0_0_0;
  wire [7:0] out_MUX_55_reg_11_0_0_0;
  wire [7:0] out_MUX_57_reg_13_0_0_0;
  wire [7:0] out_MUX_64_reg_2_0_0_0;
  wire [7:0] out_MUX_64_reg_2_0_0_1;
  wire [63:0] out_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if_41_i0;
  wire [63:0] out_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif_42_i0;
  wire signed [31:0] out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0;
  wire [63:0] out_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if_44_i0;
  wire signed [7:0] out_UIdata_converter_FU_22_i0_fu_mysin_28866_29147;
  wire [63:0] out___float64_addif_36_i0___float64_addif_36_i0;
  wire out___float64_geif_37_i0_fu_mysin_28866_29676;
  wire out___float64_gtif_38_i0_fu_mysin_28866_29672;
  wire out___float64_ltif_39_i0_fu_mysin_28866_29674;
  wire [63:0] out___float64_subif_40_i0_fu_mysin_28866_29025;
  wire signed [7:0] out_cond_expr_FU_8_8_8_8_28_i0_fu_mysin_28866_32537;
  wire out_const_0;
  wire [63:0] out_const_1;
  wire [63:0] out_const_2;
  wire [1:0] out_const_3;
  wire [2:0] out_const_4;
  wire [63:0] out_const_5;
  wire [63:0] out_const_6;
  wire [63:0] out_const_7;
  wire [63:0] out_const_8;
  wire [8:0] out_conv_out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_I_32_9;
  wire [7:0] out_conv_out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0_I_3_8;
  wire signed [31:0] out_conv_out_reg_0_reg_0_I_8_I_32;
  wire signed [31:0] out_conv_out_reg_14_reg_14_I_8_I_32;
  wire signed [31:0] out_conv_out_reg_15_reg_15_I_8_I_32;
  wire signed [31:0] out_conv_out_reg_17_reg_17_I_23_I_32;
  wire signed [31:0] out_conv_out_reg_3_reg_3_I_8_I_32;
  wire signed [31:0] out_conv_out_reg_9_reg_9_I_23_I_32;
  wire out_ge_expr_FU_8_0_8_29_i0_fu_mysin_28866_29626;
  wire signed [2:0] out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0;
  wire signed [14:0] out_negate_expr_FU_16_16_30_i0_fu_mysin_28866_29063;
  wire signed [7:0] out_plus_expr_FU_8_0_8_31_i0_fu_mysin_28866_29109;
  wire signed [7:0] out_plus_expr_FU_8_8_8_32_i0_fu_mysin_28866_29068;
  wire signed [7:0] out_plus_expr_FU_8_8_8_32_i1_fu_mysin_28866_29108;
  wire out_read_cond_FU_10_i0_fu_mysin_28866_29057;
  wire out_read_cond_FU_26_i0_fu_mysin_28866_29156;
  wire out_read_cond_FU_6_i0_fu_mysin_28866_29040;
  wire [7:0] out_reg_0_reg_0;
  wire [7:0] out_reg_10_reg_10;
  wire [7:0] out_reg_11_reg_11;
  wire [7:0] out_reg_12_reg_12;
  wire [7:0] out_reg_13_reg_13;
  wire [7:0] out_reg_14_reg_14;
  wire [7:0] out_reg_15_reg_15;
  wire out_reg_16_reg_16;
  wire [22:0] out_reg_17_reg_17;
  wire [63:0] out_reg_18_reg_18;
  wire [63:0] out_reg_19_reg_19;
  wire out_reg_1_reg_1;
  wire [63:0] out_reg_20_reg_20;
  wire [8:0] out_reg_21_reg_21;
  wire [63:0] out_reg_22_reg_22;
  wire [63:0] out_reg_23_reg_23;
  wire [7:0] out_reg_2_reg_2;
  wire [7:0] out_reg_3_reg_3;
  wire [63:0] out_reg_4_reg_4;
  wire out_reg_5_reg_5;
  wire [15:0] out_reg_6_reg_6;
  wire [7:0] out_reg_7_reg_7;
  wire [14:0] out_reg_8_reg_8;
  wire [22:0] out_reg_9_reg_9;
  wire [7:0] out_ui_negate_expr_FU_8_8_33_i0_fu_mysin_28866_29146;
  wire signed [22:0] out_widen_mult_expr_FU_16_16_32_2_34_i0_fu_mysin_28866_29064;
  wire signed [22:0] out_widen_mult_expr_FU_16_16_32_2_34_i1_fu_mysin_28866_29100;
  wire signed [15:0] out_widen_mult_expr_FU_8_8_16_0_35_i0_fu_mysin_28866_29062;
  wire s_PROXY_PREF___float64_divSRT4if_41_i01;
  wire s_PROXY_PREF___float64_mulif_42_i02;
  wire s_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i03;
  wire s_PROXY_PREF___int32_to_float64if_44_i04;
  wire s___float64_addif_36_i00;
  wire s_done_PROXY_PREF___float64_divSRT4if_41_i0;
  wire s_done_PROXY_PREF___float64_mulif_42_i0;
  wire s_done_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0;
  wire s_done_PROXY_PREF___int32_to_float64if_44_i0;
  wire s_done___float64_addif_36_i0;
  wire s_done_fu_mysin_28866_29025;
  wire s_done_fu_mysin_28866_29672;
  wire s_done_fu_mysin_28866_29674;
  wire s_done_fu_mysin_28866_29676;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_a___float64_divSRT4if0_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_a___float64_mulif1_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_0;
  wire signed [31:0] sig_in_bus_mergerPROXY_PREF_a___int32_to_float64if3_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_b___float64_divSRT4if4_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_b___float64_mulif5_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port___float64_mulif7_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port___int32_to_float64if9_0;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_a___float64_divSRT4if0_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_a___float64_mulif1_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_;
  wire [31:0] sig_out_bus_mergerPROXY_PREF_a___int32_to_float64if3_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_b___float64_divSRT4if4_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_b___float64_mulif5_;
  wire sig_out_bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_;
  wire sig_out_bus_mergerPROXY_PREF_start_port___float64_mulif7_;
  wire sig_out_bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_;
  wire sig_out_bus_mergerPROXY_PREF_start_port___int32_to_float64if9_;
  
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(3), .BITSIZE_out1(3)) ASSIGN_SIGNED_FU_i_assign_0 (.out1(out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0), .in1(out_const_4));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0 (.out1(out_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0), .sel(selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0), .in1(out_reg_19_reg_19), .in2(out_const_6));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0 (.out1(out_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0), .sel(selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0), .in1(out_reg_4_reg_4), .in2(out_reg_18_reg_18));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0 (.out1(out_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0), .sel(selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0), .in1(out_reg_22_reg_22), .in2(out_const_5));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0 (.out1(out_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0), .sel(selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0), .in1(out_reg_23_reg_23), .in2(out_reg_22_reg_22));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 (.out1(out_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1), .sel(selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1), .in1(out_reg_20_reg_20), .in2(out_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0 (.out1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0), .sel(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0), .in1(out_conv_out_reg_9_reg_9_I_23_I_32), .in2(out_conv_out_reg_3_reg_3_I_8_I_32));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1 (.out1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1), .sel(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1), .in1(out_conv_out_reg_17_reg_17_I_23_I_32), .in2(out_conv_out_reg_15_reg_15_I_8_I_32));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2 (.out1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2), .sel(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2), .in1(out_conv_out_reg_14_reg_14_I_8_I_32), .in2(out_conv_out_reg_0_reg_0_I_8_I_32));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 (.out1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0), .sel(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0), .in1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0), .in2(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 (.out1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1), .sel(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1), .in1(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2), .in2(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_25___float64_addif_36_i0_0_0_0 (.out1(out_MUX_25___float64_addif_36_i0_0_0_0), .sel(selector_MUX_25___float64_addif_36_i0_0_0_0), .in1(out_reg_4_reg_4), .in2(out_reg_18_reg_18));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_26___float64_addif_36_i0_1_0_0 (.out1(out_MUX_26___float64_addif_36_i0_1_0_0), .sel(selector_MUX_26___float64_addif_36_i0_1_0_0), .in1(out_const_2), .in2(out_const_7));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_54_reg_10_0_0_0 (.out1(out_MUX_54_reg_10_0_0_0), .sel(selector_MUX_54_reg_10_0_0_0), .in1(out_IIdata_converter_FU_15_i0_fu_mysin_28866_30023), .in2(out_IIdata_converter_FU_18_i0_fu_mysin_28866_30033));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_55_reg_11_0_0_0 (.out1(out_MUX_55_reg_11_0_0_0), .sel(selector_MUX_55_reg_11_0_0_0), .in1(out_plus_expr_FU_8_8_8_32_i0_fu_mysin_28866_29068), .in2(out_plus_expr_FU_8_8_8_32_i1_fu_mysin_28866_29108));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_57_reg_13_0_0_0 (.out1(out_MUX_57_reg_13_0_0_0), .sel(selector_MUX_57_reg_13_0_0_0), .in1(out_conv_out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0_I_3_8), .in2(out_plus_expr_FU_8_0_8_31_i0_fu_mysin_28866_29109));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_64_reg_2_0_0_0 (.out1(out_MUX_64_reg_2_0_0_0), .sel(selector_MUX_64_reg_2_0_0_0), .in1(out_IIdata_converter_FU_4_i0_fu_mysin_28866_29998), .in2(out_IIdata_converter_FU_8_i0_fu_mysin_28866_30009));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_64_reg_2_0_0_1 (.out1(out_MUX_64_reg_2_0_0_1), .sel(selector_MUX_64_reg_2_0_0_1), .in1(in_port_rad), .in2(out_MUX_64_reg_2_0_0_0));
  PROXY_PREF___float64_divSRT4if PROXY_PREF___float64_divSRT4if_41_i0 (.done_port(s_done_PROXY_PREF___float64_divSRT4if_41_i0), .return_port(out_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if_41_i0), .PROXY_PREF_start_port(sig_in_bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_0), .PROXY_PREF_a(sig_in_bus_mergerPROXY_PREF_a___float64_divSRT4if0_0), .PROXY_PREF_b(sig_in_bus_mergerPROXY_PREF_b___float64_divSRT4if4_0), .start_port(s_PROXY_PREF___float64_divSRT4if_41_i01), .a(out_reg_4_reg_4), .b(out_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0), .PROXY_PREF_done_port(PROXY_PREF_done_port___float64_divSRT4if), .PROXY_PREF_return_port(PROXY_PREF_return_port___float64_divSRT4if), .sel___float64_divSRT4if(fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if));
  PROXY_PREF___float64_mulif PROXY_PREF___float64_mulif_42_i0 (.done_port(s_done_PROXY_PREF___float64_mulif_42_i0), .return_port(out_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif_42_i0), .PROXY_PREF_start_port(sig_in_bus_mergerPROXY_PREF_start_port___float64_mulif7_0), .PROXY_PREF_a(sig_in_bus_mergerPROXY_PREF_a___float64_mulif1_0), .PROXY_PREF_b(sig_in_bus_mergerPROXY_PREF_b___float64_mulif5_0), .start_port(s_PROXY_PREF___float64_mulif_42_i02), .a(out_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0), .b(out_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0), .PROXY_PREF_done_port(PROXY_PREF_done_port___float64_mulif), .PROXY_PREF_return_port(PROXY_PREF_return_port___float64_mulif), .sel___float64_mulif(fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif));
  PROXY_PREF___float64_to_int32_round_to_zeroif PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0 (.done_port(s_done_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0), .return_port(out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0), .PROXY_PREF_start_port(sig_in_bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_0), .PROXY_PREF_a(sig_in_bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_0), .start_port(s_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i03), .a(out_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1), .PROXY_PREF_done_port(PROXY_PREF_done_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_return_port(PROXY_PREF_return_port___float64_to_int32_round_to_zeroif), .sel___float64_to_int32_round_to_zeroif(fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif));
  PROXY_PREF___int32_to_float64if PROXY_PREF___int32_to_float64if_44_i0 (.done_port(s_done_PROXY_PREF___int32_to_float64if_44_i0), .return_port(out_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if_44_i0), .PROXY_PREF_start_port(sig_in_bus_mergerPROXY_PREF_start_port___int32_to_float64if9_0), .PROXY_PREF_a(sig_in_bus_mergerPROXY_PREF_a___int32_to_float64if3_0), .start_port(s_PROXY_PREF___int32_to_float64if_44_i04), .a(out_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1), .PROXY_PREF_done_port(PROXY_PREF_done_port___int32_to_float64if), .PROXY_PREF_return_port(PROXY_PREF_return_port___int32_to_float64if), .sel___int32_to_float64if(fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if));
  __float64_addif __float64_addif_36_i0 (.done_port(s_done___float64_addif_36_i0), .return_port(out___float64_addif_36_i0___float64_addif_36_i0), .clock(clock), .reset(reset), .start_port(s___float64_addif_36_i00), .a(out_MUX_25___float64_addif_36_i0_0_0_0), .b(out_MUX_26___float64_addif_36_i0_1_0_0));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_a___float64_divSRT4if0_ (.out1(sig_out_bus_mergerPROXY_PREF_a___float64_divSRT4if0_), .in1({sig_in_bus_mergerPROXY_PREF_a___float64_divSRT4if0_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_a___float64_mulif1_ (.out1(sig_out_bus_mergerPROXY_PREF_a___float64_mulif1_), .in1({sig_in_bus_mergerPROXY_PREF_a___float64_mulif1_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_ (.out1(sig_out_bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_), .in1({sig_in_bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_0}));
  bus_merger #(.BITSIZE_in1(32), .PORTSIZE_in1(1), .BITSIZE_out1(32)) bus_mergerPROXY_PREF_a___int32_to_float64if3_ (.out1(sig_out_bus_mergerPROXY_PREF_a___int32_to_float64if3_), .in1({sig_in_bus_mergerPROXY_PREF_a___int32_to_float64if3_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_b___float64_divSRT4if4_ (.out1(sig_out_bus_mergerPROXY_PREF_b___float64_divSRT4if4_), .in1({sig_in_bus_mergerPROXY_PREF_b___float64_divSRT4if4_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_b___float64_mulif5_ (.out1(sig_out_bus_mergerPROXY_PREF_b___float64_mulif5_), .in1({sig_in_bus_mergerPROXY_PREF_b___float64_mulif5_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_), .in1({sig_in_bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port___float64_mulif7_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port___float64_mulif7_), .in1({sig_in_bus_mergerPROXY_PREF_start_port___float64_mulif7_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_), .in1({sig_in_bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port___int32_to_float64if9_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port___int32_to_float64if9_), .in1({sig_in_bus_mergerPROXY_PREF_start_port___int32_to_float64if9_0}));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(64), .value(64'b0011111011100100111110001011010110001000111000110110100011110001)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(64), .value(64'b0011111111110000000000000000000000000000000000000000000000000000)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(3), .value(3'b010)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(64), .value(64'b0100000000000000000000000000000000000000000000000000000000000000)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(64), .value(64'b0100000000011000000000000000000000000000000000000000000000000000)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(64), .value(64'b0100000000011001001000011111100111110000000110111000011001101110)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(64), .value(64'b1100000000011001001000011111100111110000000110111000011001101110)) const_8 (.out1(out_const_8));
  IUdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(9)) conv_out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_I_32_9 (.out1(out_conv_out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_I_32_9), .in1(out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0));
  IUdata_converter_FU #(.BITSIZE_in1(3), .BITSIZE_out1(8)) conv_out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0_I_3_8 (.out1(out_conv_out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0_I_3_8), .in1(out_i_assign_conn_obj_0_ASSIGN_SIGNED_FU_i_assign_0));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(32)) conv_out_reg_0_reg_0_I_8_I_32 (.out1(out_conv_out_reg_0_reg_0_I_8_I_32), .in1(out_reg_0_reg_0));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(32)) conv_out_reg_14_reg_14_I_8_I_32 (.out1(out_conv_out_reg_14_reg_14_I_8_I_32), .in1(out_reg_14_reg_14));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(32)) conv_out_reg_15_reg_15_I_8_I_32 (.out1(out_conv_out_reg_15_reg_15_I_8_I_32), .in1(out_reg_15_reg_15));
  IIdata_converter_FU #(.BITSIZE_in1(23), .BITSIZE_out1(32)) conv_out_reg_17_reg_17_I_23_I_32 (.out1(out_conv_out_reg_17_reg_17_I_23_I_32), .in1(out_reg_17_reg_17));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(32)) conv_out_reg_3_reg_3_I_8_I_32 (.out1(out_conv_out_reg_3_reg_3_I_8_I_32), .in1(out_reg_3_reg_3));
  IIdata_converter_FU #(.BITSIZE_in1(23), .BITSIZE_out1(32)) conv_out_reg_9_reg_9_I_23_I_32 (.out1(out_conv_out_reg_9_reg_9_I_23_I_32), .in1(out_reg_9_reg_9));
  __float64_subif fu_mysin_28866_29025 (.done_port(s_done_fu_mysin_28866_29025), .return_port(out___float64_subif_40_i0_fu_mysin_28866_29025), .clock(clock), .reset(reset), .start_port(selector_IN_UNBOUNDED_mysin_28866_29025), .a(out_reg_4_reg_4), .b(out_const_7));
  read_cond_FU #(.BITSIZE_in1(1)) fu_mysin_28866_29040 (.out1(out_read_cond_FU_6_i0_fu_mysin_28866_29040), .in1(out_reg_1_reg_1));
  read_cond_FU #(.BITSIZE_in1(1)) fu_mysin_28866_29057 (.out1(out_read_cond_FU_10_i0_fu_mysin_28866_29057), .in1(out_reg_5_reg_5));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_29061 (.out1(out_IIdata_converter_FU_11_i0_fu_mysin_28866_29061), .in1(out_reg_2_reg_2));
  widen_mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(16), .PIPE_PARAMETER(0)) fu_mysin_28866_29062 (.out1(out_widen_mult_expr_FU_8_8_16_0_35_i0_fu_mysin_28866_29062), .clock(clock), .in1(out_IIdata_converter_FU_11_i0_fu_mysin_28866_29061), .in2(out_IIdata_converter_FU_11_i0_fu_mysin_28866_29061));
  negate_expr_FU #(.BITSIZE_in1(16), .BITSIZE_out1(15)) fu_mysin_28866_29063 (.out1(out_negate_expr_FU_16_16_30_i0_fu_mysin_28866_29063), .in1(out_reg_6_reg_6));
  widen_mult_expr_FU #(.BITSIZE_in1(15), .BITSIZE_in2(8), .BITSIZE_out1(23), .PIPE_PARAMETER(2)) fu_mysin_28866_29064 (.out1(out_widen_mult_expr_FU_16_16_32_2_34_i0_fu_mysin_28866_29064), .clock(clock), .in1(out_negate_expr_FU_16_16_30_i0_fu_mysin_28866_29063), .in2(out_reg_7_reg_7));
  plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_mysin_28866_29068 (.out1(out_plus_expr_FU_8_8_8_32_i0_fu_mysin_28866_29068), .in1(out_IIdata_converter_FU_15_i0_fu_mysin_28866_30023), .in2(out_reg_2_reg_2));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_29099 (.out1(out_IIdata_converter_FU_23_i0_fu_mysin_28866_29099), .in1(out_reg_10_reg_10));
  widen_mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(15), .BITSIZE_out1(23), .PIPE_PARAMETER(2)) fu_mysin_28866_29100 (.out1(out_widen_mult_expr_FU_16_16_32_2_34_i1_fu_mysin_28866_29100), .clock(clock), .in1(out_reg_12_reg_12), .in2(out_reg_8_reg_8));
  plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_mysin_28866_29108 (.out1(out_plus_expr_FU_8_8_8_32_i1_fu_mysin_28866_29108), .in1(out_IIdata_converter_FU_18_i0_fu_mysin_28866_30033), .in2(out_reg_11_reg_11));
  plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(8)) fu_mysin_28866_29109 (.out1(out_plus_expr_FU_8_0_8_31_i0_fu_mysin_28866_29109), .in1(out_reg_13_reg_13), .in2(out_const_3));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_29145 (.out1(out_IUdata_converter_FU_21_i0_fu_mysin_28866_29145), .in1(out_reg_10_reg_10));
  ui_negate_expr_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_29146 (.out1(out_ui_negate_expr_FU_8_8_33_i0_fu_mysin_28866_29146), .in1(out_IUdata_converter_FU_21_i0_fu_mysin_28866_29145));
  UIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_29147 (.out1(out_UIdata_converter_FU_22_i0_fu_mysin_28866_29147), .in1(out_ui_negate_expr_FU_8_8_33_i0_fu_mysin_28866_29146));
  read_cond_FU #(.BITSIZE_in1(1)) fu_mysin_28866_29156 (.out1(out_read_cond_FU_26_i0_fu_mysin_28866_29156), .in1(out_reg_16_reg_16));
  ge_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu_mysin_28866_29626 (.out1(out_ge_expr_FU_8_0_8_29_i0_fu_mysin_28866_29626), .in1(out_reg_10_reg_10), .in2(out_const_0));
  __float64_gtif fu_mysin_28866_29672 (.done_port(s_done_fu_mysin_28866_29672), .return_port(out___float64_gtif_38_i0_fu_mysin_28866_29672), .clock(clock), .reset(reset), .start_port(selector_IN_UNBOUNDED_mysin_28866_29672), .a(out_reg_4_reg_4), .b(out_const_7));
  __float64_ltif fu_mysin_28866_29674 (.done_port(s_done_fu_mysin_28866_29674), .return_port(out___float64_ltif_39_i0_fu_mysin_28866_29674), .clock(clock), .reset(reset), .start_port(selector_IN_UNBOUNDED_mysin_28866_29674), .a(out_reg_4_reg_4), .b(out_const_8));
  __float64_geif fu_mysin_28866_29676 (.done_port(s_done_fu_mysin_28866_29676), .return_port(out___float64_geif_37_i0_fu_mysin_28866_29676), .clock(clock), .reset(reset), .start_port(selector_IN_UNBOUNDED_mysin_28866_29676), .a(out_reg_4_reg_4), .b(out_const_1));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_mysin_28866_29998 (.out1(out_IIdata_converter_FU_4_i0_fu_mysin_28866_29998), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_30001 (.out1(out_IIdata_converter_FU_5_i0_fu_mysin_28866_30001), .in1(out_reg_2_reg_2));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_mysin_28866_30009 (.out1(out_IIdata_converter_FU_8_i0_fu_mysin_28866_30009), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_30012 (.out1(out_IIdata_converter_FU_9_i0_fu_mysin_28866_30012), .in1(out_reg_2_reg_2));
  IIdata_converter_FU #(.BITSIZE_in1(23), .BITSIZE_out1(23)) fu_mysin_28866_30019 (.out1(out_IIdata_converter_FU_14_i0_fu_mysin_28866_30019), .in1(out_widen_mult_expr_FU_16_16_32_2_34_i0_fu_mysin_28866_29064));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_mysin_28866_30023 (.out1(out_IIdata_converter_FU_15_i0_fu_mysin_28866_30023), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(23), .BITSIZE_out1(23)) fu_mysin_28866_30026 (.out1(out_IIdata_converter_FU_17_i0_fu_mysin_28866_30026), .in1(out_widen_mult_expr_FU_16_16_32_2_34_i1_fu_mysin_28866_29100));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_30029 (.out1(out_IIdata_converter_FU_24_i0_fu_mysin_28866_30029), .in1(out_reg_13_reg_13));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_mysin_28866_30033 (.out1(out_IIdata_converter_FU_18_i0_fu_mysin_28866_30033), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_30036 (.out1(out_IIdata_converter_FU_25_i0_fu_mysin_28866_30036), .in1(out_cond_expr_FU_8_8_8_8_28_i0_fu_mysin_28866_32537));
  cond_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu_mysin_28866_32537 (.out1(out_cond_expr_FU_8_8_8_8_28_i0_fu_mysin_28866_32537), .in1(out_ge_expr_FU_8_0_8_29_i0_fu_mysin_28866_29626), .in2(out_reg_10_reg_10), .in3(out_UIdata_converter_FU_22_i0_fu_mysin_28866_29147));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_mysin_28866_32540 (.out1(out_ASSIGN_SIGNED_FU_12_i0_fu_mysin_28866_32540), .in1(out_IIdata_converter_FU_11_i0_fu_mysin_28866_29061));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(15), .BITSIZE_out1(15)) fu_mysin_28866_32542 (.out1(out_ASSIGN_SIGNED_FU_13_i0_fu_mysin_28866_32542), .in1(out_negate_expr_FU_16_16_30_i0_fu_mysin_28866_29063));
  or or_or_PROXY_PREF___float64_divSRT4if_41_i01( s_PROXY_PREF___float64_divSRT4if_41_i01, selector_IN_UNBOUNDED_mysin_28866_29066, selector_IN_UNBOUNDED_mysin_28866_29106);
  or or_or_PROXY_PREF___float64_mulif_42_i02( s_PROXY_PREF___float64_mulif_42_i02, selector_IN_UNBOUNDED_mysin_28866_29103, selector_IN_UNBOUNDED_mysin_28866_29105);
  or or_or_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i03( s_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i03, selector_IN_UNBOUNDED_mysin_28866_29026, selector_IN_UNBOUNDED_mysin_28866_29046, selector_IN_UNBOUNDED_mysin_28866_29067, selector_IN_UNBOUNDED_mysin_28866_29107);
  or or_or_PROXY_PREF___int32_to_float64if_44_i04( s_PROXY_PREF___int32_to_float64if_44_i04, selector_IN_UNBOUNDED_mysin_28866_29032, selector_IN_UNBOUNDED_mysin_28866_29051, selector_IN_UNBOUNDED_mysin_28866_29065, selector_IN_UNBOUNDED_mysin_28866_29101, selector_IN_UNBOUNDED_mysin_28866_29102, selector_IN_UNBOUNDED_mysin_28866_29155);
  or or_or___float64_addif_36_i00( s___float64_addif_36_i00, selector_IN_UNBOUNDED_mysin_28866_29045, selector_IN_UNBOUNDED_mysin_28866_29104);
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_5_i0_fu_mysin_28866_30001), .wenable(wrenable_reg_0));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out___float64_gtif_38_i0_fu_mysin_28866_29672), .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_MUX_54_reg_10_0_0_0), .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_MUX_55_reg_11_0_0_0), .wenable(wrenable_reg_11));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_23_i0_fu_mysin_28866_29099), .wenable(wrenable_reg_12));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_MUX_57_reg_13_0_0_0), .wenable(wrenable_reg_13));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_24_i0_fu_mysin_28866_30029), .wenable(wrenable_reg_14));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_25_i0_fu_mysin_28866_30036), .wenable(wrenable_reg_15));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out___float64_geif_37_i0_fu_mysin_28866_29676), .wenable(wrenable_reg_16));
  register_SE #(.BITSIZE_in1(23), .BITSIZE_out1(23)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_17_i0_fu_mysin_28866_30026), .wenable(wrenable_reg_17));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif_42_i0), .wenable(wrenable_reg_18));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_19 (.out1(out_reg_19_reg_19), .clock(clock), .reset(reset), .in1(out_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif_42_i0), .wenable(wrenable_reg_19));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_MUX_64_reg_2_0_0_1), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_20 (.out1(out_reg_20_reg_20), .clock(clock), .reset(reset), .in1(out_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if_41_i0), .wenable(wrenable_reg_20));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_21 (.out1(out_reg_21_reg_21), .clock(clock), .reset(reset), .in1(out_conv_out_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_I_32_9), .wenable(wrenable_reg_21));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_22 (.out1(out_reg_22_reg_22), .clock(clock), .reset(reset), .in1(out___float64_addif_36_i0___float64_addif_36_i0), .wenable(wrenable_reg_22));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_23 (.out1(out_reg_23_reg_23), .clock(clock), .reset(reset), .in1(out___float64_subif_40_i0_fu_mysin_28866_29025), .wenable(wrenable_reg_23));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_9_i0_fu_mysin_28866_30012), .wenable(wrenable_reg_3));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if_44_i0), .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out___float64_ltif_39_i0_fu_mysin_28866_29674), .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(16), .BITSIZE_out1(16)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_widen_mult_expr_FU_8_8_16_0_35_i0_fu_mysin_28866_29062), .wenable(wrenable_reg_6));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ASSIGN_SIGNED_FU_12_i0_fu_mysin_28866_32540), .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(15), .BITSIZE_out1(15)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_ASSIGN_SIGNED_FU_13_i0_fu_mysin_28866_32542), .wenable(wrenable_reg_8));
  register_SE #(.BITSIZE_in1(23), .BITSIZE_out1(23)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_14_i0_fu_mysin_28866_30019), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign return_port = out_reg_11_reg_11;
  assign PROXY_PREF_start_port___float64_divSRT4if = sig_out_bus_mergerPROXY_PREF_start_port___float64_divSRT4if6_;
  assign PROXY_PREF_a___float64_divSRT4if = sig_out_bus_mergerPROXY_PREF_a___float64_divSRT4if0_;
  assign PROXY_PREF_b___float64_divSRT4if = sig_out_bus_mergerPROXY_PREF_b___float64_divSRT4if4_;
  assign PROXY_PREF_start_port___float64_mulif = sig_out_bus_mergerPROXY_PREF_start_port___float64_mulif7_;
  assign PROXY_PREF_a___float64_mulif = sig_out_bus_mergerPROXY_PREF_a___float64_mulif1_;
  assign PROXY_PREF_b___float64_mulif = sig_out_bus_mergerPROXY_PREF_b___float64_mulif5_;
  assign PROXY_PREF_start_port___float64_to_int32_round_to_zeroif = sig_out_bus_mergerPROXY_PREF_start_port___float64_to_int32_round_to_zeroif8_;
  assign PROXY_PREF_a___float64_to_int32_round_to_zeroif = sig_out_bus_mergerPROXY_PREF_a___float64_to_int32_round_to_zeroif2_;
  assign PROXY_PREF_start_port___int32_to_float64if = sig_out_bus_mergerPROXY_PREF_start_port___int32_to_float64if9_;
  assign PROXY_PREF_a___int32_to_float64if = sig_out_bus_mergerPROXY_PREF_a___int32_to_float64if3_;
  assign OUT_CONDITION_mysin_28866_29040 = out_read_cond_FU_6_i0_fu_mysin_28866_29040;
  assign OUT_CONDITION_mysin_28866_29057 = out_read_cond_FU_10_i0_fu_mysin_28866_29057;
  assign OUT_CONDITION_mysin_28866_29156 = out_read_cond_FU_26_i0_fu_mysin_28866_29156;
  assign OUT_UNBOUNDED_mysin_28866_29025 = s_done_fu_mysin_28866_29025;
  assign OUT_UNBOUNDED_mysin_28866_29026 = s_done_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0;
  assign OUT_UNBOUNDED_mysin_28866_29032 = s_done_PROXY_PREF___int32_to_float64if_44_i0;
  assign OUT_UNBOUNDED_mysin_28866_29045 = s_done___float64_addif_36_i0;
  assign OUT_UNBOUNDED_mysin_28866_29046 = s_done_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0;
  assign OUT_UNBOUNDED_mysin_28866_29051 = s_done_PROXY_PREF___int32_to_float64if_44_i0;
  assign OUT_UNBOUNDED_mysin_28866_29065 = s_done_PROXY_PREF___int32_to_float64if_44_i0;
  assign OUT_UNBOUNDED_mysin_28866_29066 = s_done_PROXY_PREF___float64_divSRT4if_41_i0;
  assign OUT_UNBOUNDED_mysin_28866_29067 = s_done_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0;
  assign OUT_UNBOUNDED_mysin_28866_29101 = s_done_PROXY_PREF___int32_to_float64if_44_i0;
  assign OUT_UNBOUNDED_mysin_28866_29102 = s_done_PROXY_PREF___int32_to_float64if_44_i0;
  assign OUT_UNBOUNDED_mysin_28866_29103 = s_done_PROXY_PREF___float64_mulif_42_i0;
  assign OUT_UNBOUNDED_mysin_28866_29104 = s_done___float64_addif_36_i0;
  assign OUT_UNBOUNDED_mysin_28866_29105 = s_done_PROXY_PREF___float64_mulif_42_i0;
  assign OUT_UNBOUNDED_mysin_28866_29106 = s_done_PROXY_PREF___float64_divSRT4if_41_i0;
  assign OUT_UNBOUNDED_mysin_28866_29107 = s_done_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0;
  assign OUT_UNBOUNDED_mysin_28866_29155 = s_done_PROXY_PREF___int32_to_float64if_44_i0;
  assign OUT_UNBOUNDED_mysin_28866_29672 = s_done_fu_mysin_28866_29672;
  assign OUT_UNBOUNDED_mysin_28866_29674 = s_done_fu_mysin_28866_29674;
  assign OUT_UNBOUNDED_mysin_28866_29676 = s_done_fu_mysin_28866_29676;

endmodule

// FSM based controller description for mysin
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller_mysin(done_port, selector_IN_UNBOUNDED_mysin_28866_29025, selector_IN_UNBOUNDED_mysin_28866_29026, selector_IN_UNBOUNDED_mysin_28866_29032, selector_IN_UNBOUNDED_mysin_28866_29045, selector_IN_UNBOUNDED_mysin_28866_29046, selector_IN_UNBOUNDED_mysin_28866_29051, selector_IN_UNBOUNDED_mysin_28866_29065, selector_IN_UNBOUNDED_mysin_28866_29066, selector_IN_UNBOUNDED_mysin_28866_29067, selector_IN_UNBOUNDED_mysin_28866_29101, selector_IN_UNBOUNDED_mysin_28866_29102, selector_IN_UNBOUNDED_mysin_28866_29103, selector_IN_UNBOUNDED_mysin_28866_29104, selector_IN_UNBOUNDED_mysin_28866_29105, selector_IN_UNBOUNDED_mysin_28866_29106, selector_IN_UNBOUNDED_mysin_28866_29107, selector_IN_UNBOUNDED_mysin_28866_29155, selector_IN_UNBOUNDED_mysin_28866_29672, selector_IN_UNBOUNDED_mysin_28866_29674, selector_IN_UNBOUNDED_mysin_28866_29676, selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0, selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0, selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0, selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0, selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0, selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1, selector_MUX_25___float64_addif_36_i0_0_0_0, selector_MUX_26___float64_addif_36_i0_1_0_0, selector_MUX_54_reg_10_0_0_0, selector_MUX_55_reg_11_0_0_0, selector_MUX_57_reg_13_0_0_0, selector_MUX_64_reg_2_0_0_0, selector_MUX_64_reg_2_0_0_1, fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if, fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if, fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif, fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif, fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif, fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif, fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if, fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_3, wrenable_reg_4, wrenable_reg_5, wrenable_reg_6, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION_mysin_28866_29040, OUT_CONDITION_mysin_28866_29057, OUT_CONDITION_mysin_28866_29156, OUT_UNBOUNDED_mysin_28866_29025, OUT_UNBOUNDED_mysin_28866_29026, OUT_UNBOUNDED_mysin_28866_29032, OUT_UNBOUNDED_mysin_28866_29045, OUT_UNBOUNDED_mysin_28866_29046, OUT_UNBOUNDED_mysin_28866_29051, OUT_UNBOUNDED_mysin_28866_29065, OUT_UNBOUNDED_mysin_28866_29066, OUT_UNBOUNDED_mysin_28866_29067, OUT_UNBOUNDED_mysin_28866_29101, OUT_UNBOUNDED_mysin_28866_29102, OUT_UNBOUNDED_mysin_28866_29103, OUT_UNBOUNDED_mysin_28866_29104, OUT_UNBOUNDED_mysin_28866_29105, OUT_UNBOUNDED_mysin_28866_29106, OUT_UNBOUNDED_mysin_28866_29107, OUT_UNBOUNDED_mysin_28866_29155, OUT_UNBOUNDED_mysin_28866_29672, OUT_UNBOUNDED_mysin_28866_29674, OUT_UNBOUNDED_mysin_28866_29676, clock, reset, start_port);
  // IN
  input OUT_CONDITION_mysin_28866_29040;
  input OUT_CONDITION_mysin_28866_29057;
  input OUT_CONDITION_mysin_28866_29156;
  input OUT_UNBOUNDED_mysin_28866_29025;
  input OUT_UNBOUNDED_mysin_28866_29026;
  input OUT_UNBOUNDED_mysin_28866_29032;
  input OUT_UNBOUNDED_mysin_28866_29045;
  input OUT_UNBOUNDED_mysin_28866_29046;
  input OUT_UNBOUNDED_mysin_28866_29051;
  input OUT_UNBOUNDED_mysin_28866_29065;
  input OUT_UNBOUNDED_mysin_28866_29066;
  input OUT_UNBOUNDED_mysin_28866_29067;
  input OUT_UNBOUNDED_mysin_28866_29101;
  input OUT_UNBOUNDED_mysin_28866_29102;
  input OUT_UNBOUNDED_mysin_28866_29103;
  input OUT_UNBOUNDED_mysin_28866_29104;
  input OUT_UNBOUNDED_mysin_28866_29105;
  input OUT_UNBOUNDED_mysin_28866_29106;
  input OUT_UNBOUNDED_mysin_28866_29107;
  input OUT_UNBOUNDED_mysin_28866_29155;
  input OUT_UNBOUNDED_mysin_28866_29672;
  input OUT_UNBOUNDED_mysin_28866_29674;
  input OUT_UNBOUNDED_mysin_28866_29676;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output selector_IN_UNBOUNDED_mysin_28866_29025;
  output selector_IN_UNBOUNDED_mysin_28866_29026;
  output selector_IN_UNBOUNDED_mysin_28866_29032;
  output selector_IN_UNBOUNDED_mysin_28866_29045;
  output selector_IN_UNBOUNDED_mysin_28866_29046;
  output selector_IN_UNBOUNDED_mysin_28866_29051;
  output selector_IN_UNBOUNDED_mysin_28866_29065;
  output selector_IN_UNBOUNDED_mysin_28866_29066;
  output selector_IN_UNBOUNDED_mysin_28866_29067;
  output selector_IN_UNBOUNDED_mysin_28866_29101;
  output selector_IN_UNBOUNDED_mysin_28866_29102;
  output selector_IN_UNBOUNDED_mysin_28866_29103;
  output selector_IN_UNBOUNDED_mysin_28866_29104;
  output selector_IN_UNBOUNDED_mysin_28866_29105;
  output selector_IN_UNBOUNDED_mysin_28866_29106;
  output selector_IN_UNBOUNDED_mysin_28866_29107;
  output selector_IN_UNBOUNDED_mysin_28866_29155;
  output selector_IN_UNBOUNDED_mysin_28866_29672;
  output selector_IN_UNBOUNDED_mysin_28866_29674;
  output selector_IN_UNBOUNDED_mysin_28866_29676;
  output selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0;
  output selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0;
  output selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0;
  output selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0;
  output selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1;
  output selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0;
  output selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1;
  output selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2;
  output selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0;
  output selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1;
  output selector_MUX_25___float64_addif_36_i0_0_0_0;
  output selector_MUX_26___float64_addif_36_i0_1_0_0;
  output selector_MUX_54_reg_10_0_0_0;
  output selector_MUX_55_reg_11_0_0_0;
  output selector_MUX_57_reg_13_0_0_0;
  output selector_MUX_64_reg_2_0_0_0;
  output selector_MUX_64_reg_2_0_0_1;
  output fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if;
  output fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if;
  output fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif;
  output fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif;
  output fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif;
  output fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif;
  output fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if;
  output fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [58:0] S_0 = 59'b00000000000000000000000000000000000000000000000000000000001,
    S_1 = 59'b00000000000000000000000000000000000000000000000000000000010,
    S_7 = 59'b00000000000000000000000000000000000000000000000000010000000,
    S_8 = 59'b00000000000000000000000000000000000000000000000000100000000,
    S_9 = 59'b00000000000000000000000000000000000000000000000001000000000,
    S_10 = 59'b00000000000000000000000000000000000000000000000010000000000,
    S_11 = 59'b00000000000000000000000000000000000000000000000100000000000,
    S_12 = 59'b00000000000000000000000000000000000000000000001000000000000,
    S_18 = 59'b00000000000000000000000000000000000000001000000000000000000,
    S_19 = 59'b00000000000000000000000000000000000000010000000000000000000,
    S_20 = 59'b00000000000000000000000000000000000000100000000000000000000,
    S_21 = 59'b00000000000000000000000000000000000001000000000000000000000,
    S_22 = 59'b00000000000000000000000000000000000010000000000000000000000,
    S_23 = 59'b00000000000000000000000000000000000100000000000000000000000,
    S_24 = 59'b00000000000000000000000000000000001000000000000000000000000,
    S_25 = 59'b00000000000000000000000000000000010000000000000000000000000,
    S_26 = 59'b00000000000000000000000000000000100000000000000000000000000,
    S_27 = 59'b00000000000000000000000000000001000000000000000000000000000,
    S_28 = 59'b00000000000000000000000000000010000000000000000000000000000,
    S_29 = 59'b00000000000000000000000000000100000000000000000000000000000,
    S_30 = 59'b00000000000000000000000000001000000000000000000000000000000,
    S_31 = 59'b00000000000000000000000000010000000000000000000000000000000,
    S_32 = 59'b00000000000000000000000000100000000000000000000000000000000,
    S_33 = 59'b00000000000000000000000001000000000000000000000000000000000,
    S_34 = 59'b00000000000000000000000010000000000000000000000000000000000,
    S_52 = 59'b00000010000000000000000000000000000000000000000000000000000,
    S_53 = 59'b00000100000000000000000000000000000000000000000000000000000,
    S_54 = 59'b00001000000000000000000000000000000000000000000000000000000,
    S_55 = 59'b00010000000000000000000000000000000000000000000000000000000,
    S_56 = 59'b00100000000000000000000000000000000000000000000000000000000,
    S_57 = 59'b01000000000000000000000000000000000000000000000000000000000,
    S_58 = 59'b10000000000000000000000000000000000000000000000000000000000,
    S_35 = 59'b00000000000000000000000100000000000000000000000000000000000,
    S_36 = 59'b00000000000000000000001000000000000000000000000000000000000,
    S_37 = 59'b00000000000000000000010000000000000000000000000000000000000,
    S_38 = 59'b00000000000000000000100000000000000000000000000000000000000,
    S_39 = 59'b00000000000000000001000000000000000000000000000000000000000,
    S_40 = 59'b00000000000000000010000000000000000000000000000000000000000,
    S_41 = 59'b00000000000000000100000000000000000000000000000000000000000,
    S_42 = 59'b00000000000000001000000000000000000000000000000000000000000,
    S_43 = 59'b00000000000000010000000000000000000000000000000000000000000,
    S_44 = 59'b00000000000000100000000000000000000000000000000000000000000,
    S_45 = 59'b00000000000001000000000000000000000000000000000000000000000,
    S_46 = 59'b00000000000010000000000000000000000000000000000000000000000,
    S_47 = 59'b00000000000100000000000000000000000000000000000000000000000,
    S_48 = 59'b00000000001000000000000000000000000000000000000000000000000,
    S_49 = 59'b00000000010000000000000000000000000000000000000000000000000,
    S_50 = 59'b00000000100000000000000000000000000000000000000000000000000,
    S_51 = 59'b00000001000000000000000000000000000000000000000000000000000,
    S_13 = 59'b00000000000000000000000000000000000000000000010000000000000,
    S_14 = 59'b00000000000000000000000000000000000000000000100000000000000,
    S_15 = 59'b00000000000000000000000000000000000000000001000000000000000,
    S_16 = 59'b00000000000000000000000000000000000000000010000000000000000,
    S_17 = 59'b00000000000000000000000000000000000000000100000000000000000,
    S_2 = 59'b00000000000000000000000000000000000000000000000000000000100,
    S_3 = 59'b00000000000000000000000000000000000000000000000000000001000,
    S_4 = 59'b00000000000000000000000000000000000000000000000000000010000,
    S_5 = 59'b00000000000000000000000000000000000000000000000000000100000,
    S_6 = 59'b00000000000000000000000000000000000000000000000000001000000;
  reg [58:0] _present_state, _next_state;
  reg done_port;
  reg selector_IN_UNBOUNDED_mysin_28866_29025;
  reg selector_IN_UNBOUNDED_mysin_28866_29026;
  reg selector_IN_UNBOUNDED_mysin_28866_29032;
  reg selector_IN_UNBOUNDED_mysin_28866_29045;
  reg selector_IN_UNBOUNDED_mysin_28866_29046;
  reg selector_IN_UNBOUNDED_mysin_28866_29051;
  reg selector_IN_UNBOUNDED_mysin_28866_29065;
  reg selector_IN_UNBOUNDED_mysin_28866_29066;
  reg selector_IN_UNBOUNDED_mysin_28866_29067;
  reg selector_IN_UNBOUNDED_mysin_28866_29101;
  reg selector_IN_UNBOUNDED_mysin_28866_29102;
  reg selector_IN_UNBOUNDED_mysin_28866_29103;
  reg selector_IN_UNBOUNDED_mysin_28866_29104;
  reg selector_IN_UNBOUNDED_mysin_28866_29105;
  reg selector_IN_UNBOUNDED_mysin_28866_29106;
  reg selector_IN_UNBOUNDED_mysin_28866_29107;
  reg selector_IN_UNBOUNDED_mysin_28866_29155;
  reg selector_IN_UNBOUNDED_mysin_28866_29672;
  reg selector_IN_UNBOUNDED_mysin_28866_29674;
  reg selector_IN_UNBOUNDED_mysin_28866_29676;
  reg selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0;
  reg selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0;
  reg selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0;
  reg selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0;
  reg selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1;
  reg selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0;
  reg selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1;
  reg selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2;
  reg selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0;
  reg selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1;
  reg selector_MUX_25___float64_addif_36_i0_0_0_0;
  reg selector_MUX_26___float64_addif_36_i0_1_0_0;
  reg selector_MUX_54_reg_10_0_0_0;
  reg selector_MUX_55_reg_11_0_0_0;
  reg selector_MUX_57_reg_13_0_0_0;
  reg selector_MUX_64_reg_2_0_0_0;
  reg selector_MUX_64_reg_2_0_0_1;
  reg fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if;
  reg fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if;
  reg fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif;
  reg fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif;
  reg fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif;
  reg fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif;
  reg fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if;
  reg fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29025 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29026 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29032 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29045 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29046 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29051 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29065 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29066 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29067 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29101 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29102 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29103 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29104 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29105 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29106 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29107 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29155 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29672 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29674 = 1'b0;
    selector_IN_UNBOUNDED_mysin_28866_29676 = 1'b0;
    selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0 = 1'b0;
    selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0 = 1'b0;
    selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0 = 1'b0;
    selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0 = 1'b0;
    selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'b0;
    selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0 = 1'b0;
    selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1 = 1'b0;
    selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2 = 1'b0;
    selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'b0;
    selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'b0;
    selector_MUX_25___float64_addif_36_i0_0_0_0 = 1'b0;
    selector_MUX_26___float64_addif_36_i0_1_0_0 = 1'b0;
    selector_MUX_54_reg_10_0_0_0 = 1'b0;
    selector_MUX_55_reg_11_0_0_0 = 1'b0;
    selector_MUX_57_reg_13_0_0_0 = 1'b0;
    selector_MUX_64_reg_2_0_0_0 = 1'b0;
    selector_MUX_64_reg_2_0_0_1 = 1'b0;
    fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if = 1'b0;
    fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if = 1'b0;
    fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif = 1'b0;
    fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif = 1'b0;
    fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b0;
    fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif = 1'b0;
    fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b0;
    fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          _next_state = S_1;
        end
        else
        begin
          selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0 = 1'bX;
          selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0 = 1'bX;
          selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0 = 1'bX;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0 = 1'bX;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'bX;
          selector_MUX_25___float64_addif_36_i0_0_0_0 = 1'bX;
          selector_MUX_26___float64_addif_36_i0_1_0_0 = 1'bX;
          selector_MUX_54_reg_10_0_0_0 = 1'bX;
          selector_MUX_55_reg_11_0_0_0 = 1'bX;
          selector_MUX_57_reg_13_0_0_0 = 1'bX;
          selector_MUX_64_reg_2_0_0_0 = 1'bX;
          selector_MUX_64_reg_2_0_0_1 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          selector_MUX_64_reg_2_0_0_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          _next_state = S_7;
        end
      S_7 :
        begin
          wrenable_reg_0 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29032 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29032 == 1'b0)
            begin
              _next_state = S_9;
            end
          else
            begin
              _next_state = S_10;
            end
        end
      S_9 :
        begin
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29032 == 1'b0)
            begin
              _next_state = S_9;
            end
          else
            begin
              _next_state = S_10;
            end
        end
      S_10 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29672 = 1'b1;
          wrenable_reg_1 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29672 == 1'b0)
            begin
              _next_state = S_11;
            end
          else
            begin
              _next_state = S_12;
            end
        end
      S_11 :
        begin
          wrenable_reg_1 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29672 == 1'b0)
            begin
              _next_state = S_11;
            end
          else
            begin
              _next_state = S_12;
            end
        end
      S_12 :
        begin
          if (OUT_CONDITION_mysin_28866_29040 == 1'b1)
            begin
              _next_state = S_2;
            end
          else
            begin
              _next_state = S_18;
            end
        end
      S_18 :
        begin
          wrenable_reg_3 = 1'b1;
          _next_state = S_19;
        end
      S_19 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29051 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29051 == 1'b0)
            begin
              _next_state = S_20;
            end
          else
            begin
              _next_state = S_21;
            end
        end
      S_20 :
        begin
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29051 == 1'b0)
            begin
              _next_state = S_20;
            end
          else
            begin
              _next_state = S_21;
            end
        end
      S_21 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29674 = 1'b1;
          wrenable_reg_5 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29674 == 1'b0)
            begin
              _next_state = S_22;
            end
          else
            begin
              _next_state = S_23;
            end
        end
      S_22 :
        begin
          wrenable_reg_5 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29674 == 1'b0)
            begin
              _next_state = S_22;
            end
          else
            begin
              _next_state = S_23;
            end
        end
      S_23 :
        begin
          if (OUT_CONDITION_mysin_28866_29057 == 1'b1)
            begin
              _next_state = S_13;
            end
          else
            begin
              _next_state = S_24;
            end
        end
      S_24 :
        begin
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          _next_state = S_25;
        end
      S_25 :
        begin
          wrenable_reg_8 = 1'b1;
          _next_state = S_26;
        end
      S_26 :
        begin
          _next_state = S_27;
        end
      S_27 :
        begin
          wrenable_reg_9 = 1'b1;
          _next_state = S_28;
        end
      S_28 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29065 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29065 == 1'b0)
            begin
              _next_state = S_29;
            end
          else
            begin
              _next_state = S_30;
            end
        end
      S_29 :
        begin
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29065 == 1'b0)
            begin
              _next_state = S_29;
            end
          else
            begin
              _next_state = S_30;
            end
        end
      S_30 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29066 = 1'b1;
          fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29066 == 1'b0)
            begin
              _next_state = S_31;
            end
          else
            begin
              _next_state = S_32;
            end
        end
      S_31 :
        begin
          fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29066 == 1'b0)
            begin
              _next_state = S_31;
            end
          else
            begin
              _next_state = S_32;
            end
        end
      S_32 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29067 = 1'b1;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29067 == 1'b0)
            begin
              _next_state = S_33;
            end
          else
            begin
              _next_state = S_34;
            end
        end
      S_33 :
        begin
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29067 == 1'b0)
            begin
              _next_state = S_33;
            end
          else
            begin
              _next_state = S_34;
            end
        end
      S_34 :
        begin
          selector_MUX_54_reg_10_0_0_0 = 1'b1;
          selector_MUX_55_reg_11_0_0_0 = 1'b1;
          selector_MUX_57_reg_13_0_0_0 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_13 = 1'b1;
          _next_state = S_52;
        end
      S_52 :
        begin
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_15 = 1'b1;
          _next_state = S_53;
        end
      S_53 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29155 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29155 == 1'b0)
            begin
              _next_state = S_54;
            end
          else
            begin
              _next_state = S_55;
            end
        end
      S_54 :
        begin
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29155 == 1'b0)
            begin
              _next_state = S_54;
            end
          else
            begin
              _next_state = S_55;
            end
        end
      S_55 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29676 = 1'b1;
          _next_state = S_56;
        end
      S_56 :
        begin
          wrenable_reg_16 = 1'b1;
          _next_state = S_57;
        end
      S_57 :
        begin
          if (OUT_CONDITION_mysin_28866_29156 == 1'b1)
            begin
              _next_state = S_35;
            end
          else
            begin
              _next_state = S_58;
              done_port = 1'b1;
            end
        end
      S_58 :
        begin
          _next_state = S_0;
        end
      S_35 :
        begin
          _next_state = S_36;
        end
      S_36 :
        begin
          _next_state = S_37;
        end
      S_37 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29102 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29102 == 1'b0)
            begin
              _next_state = S_38;
            end
          else
            begin
              _next_state = S_39;
            end
        end
      S_38 :
        begin
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29102 == 1'b0)
            begin
              _next_state = S_38;
            end
          else
            begin
              _next_state = S_39;
            end
        end
      S_39 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29103 = 1'b1;
          selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif = 1'b1;
          wrenable_reg_18 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29103 == 1'b0)
            begin
              _next_state = S_40;
            end
          else
            begin
              _next_state = S_41;
            end
        end
      S_40 :
        begin
          selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif = 1'b1;
          wrenable_reg_18 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29103 == 1'b0)
            begin
              _next_state = S_40;
            end
          else
            begin
              _next_state = S_41;
            end
        end
      S_41 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29104 = 1'b1;
          selector_MUX_26___float64_addif_36_i0_1_0_0 = 1'b1;
          wrenable_reg_22 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29104 == 1'b0)
            begin
              _next_state = S_42;
            end
          else
            begin
              _next_state = S_43;
            end
        end
      S_42 :
        begin
          selector_MUX_26___float64_addif_36_i0_1_0_0 = 1'b1;
          wrenable_reg_22 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29104 == 1'b0)
            begin
              _next_state = S_42;
            end
          else
            begin
              _next_state = S_43;
            end
        end
      S_43 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29105 = 1'b1;
          selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif = 1'b1;
          wrenable_reg_19 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29105 == 1'b0)
            begin
              _next_state = S_44;
            end
          else
            begin
              _next_state = S_45;
            end
        end
      S_44 :
        begin
          selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif = 1'b1;
          wrenable_reg_19 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29105 == 1'b0)
            begin
              _next_state = S_44;
            end
          else
            begin
              _next_state = S_45;
            end
        end
      S_45 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29101 = 1'b1;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29101 == 1'b0)
            begin
              _next_state = S_46;
            end
          else
            begin
              _next_state = S_47;
            end
        end
      S_46 :
        begin
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1 = 1'b1;
          fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if = 1'b1;
          wrenable_reg_4 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29101 == 1'b0)
            begin
              _next_state = S_46;
            end
          else
            begin
              _next_state = S_47;
            end
        end
      S_47 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29106 = 1'b1;
          selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29106 == 1'b0)
            begin
              _next_state = S_48;
            end
          else
            begin
              _next_state = S_49;
            end
        end
      S_48 :
        begin
          selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29106 == 1'b0)
            begin
              _next_state = S_48;
            end
          else
            begin
              _next_state = S_49;
            end
        end
      S_49 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29107 = 1'b1;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29107 == 1'b0)
            begin
              _next_state = S_50;
            end
          else
            begin
              _next_state = S_51;
            end
        end
      S_50 :
        begin
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29107 == 1'b0)
            begin
              _next_state = S_50;
            end
          else
            begin
              _next_state = S_51;
            end
        end
      S_51 :
        begin
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          _next_state = S_52;
        end
      S_13 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29045 = 1'b1;
          selector_MUX_25___float64_addif_36_i0_0_0_0 = 1'b1;
          wrenable_reg_22 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29045 == 1'b0)
            begin
              _next_state = S_14;
            end
          else
            begin
              _next_state = S_15;
            end
        end
      S_14 :
        begin
          selector_MUX_25___float64_addif_36_i0_0_0_0 = 1'b1;
          wrenable_reg_22 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29045 == 1'b0)
            begin
              _next_state = S_14;
            end
          else
            begin
              _next_state = S_15;
            end
        end
      S_15 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29046 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29046 == 1'b0)
            begin
              _next_state = S_16;
            end
          else
            begin
              _next_state = S_17;
            end
        end
      S_16 :
        begin
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29046 == 1'b0)
            begin
              _next_state = S_16;
            end
          else
            begin
              _next_state = S_17;
            end
        end
      S_17 :
        begin
          wrenable_reg_2 = 1'b1;
          _next_state = S_18;
        end
      S_2 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29025 = 1'b1;
          wrenable_reg_23 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29025 == 1'b0)
            begin
              _next_state = S_3;
            end
          else
            begin
              _next_state = S_4;
            end
        end
      S_3 :
        begin
          wrenable_reg_23 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29025 == 1'b0)
            begin
              _next_state = S_3;
            end
          else
            begin
              _next_state = S_4;
            end
        end
      S_4 :
        begin
          selector_IN_UNBOUNDED_mysin_28866_29026 = 1'b1;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29026 == 1'b0)
            begin
              _next_state = S_5;
            end
          else
            begin
              _next_state = S_6;
            end
        end
      S_5 :
        begin
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0 = 1'b1;
          fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_mysin_28866_29026 == 1'b0)
            begin
              _next_state = S_5;
            end
          else
            begin
              _next_state = S_6;
            end
        end
      S_6 :
        begin
          selector_MUX_64_reg_2_0_0_0 = 1'b1;
          wrenable_reg_2 = 1'b1;
          _next_state = S_7;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0 = 1'bX;
          selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0 = 1'bX;
          selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0 = 1'bX;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0 = 1'bX;
          selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0 = 1'bX;
          selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1 = 1'bX;
          selector_MUX_25___float64_addif_36_i0_0_0_0 = 1'bX;
          selector_MUX_26___float64_addif_36_i0_1_0_0 = 1'bX;
          selector_MUX_54_reg_10_0_0_0 = 1'bX;
          selector_MUX_55_reg_11_0_0_0 = 1'bX;
          selector_MUX_57_reg_13_0_0_0 = 1'bX;
          selector_MUX_64_reg_2_0_0_0 = 1'bX;
          selector_MUX_64_reg_2_0_0_1 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for mysin
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module mysin(clock, reset, start_port, done_port, rad, return_port, PROXY_PREF_done_port___float64_divSRT4if, PROXY_PREF_return_port___float64_divSRT4if, PROXY_PREF_done_port___float64_mulif, PROXY_PREF_return_port___float64_mulif, PROXY_PREF_done_port___float64_to_int32_round_to_zeroif, PROXY_PREF_return_port___float64_to_int32_round_to_zeroif, PROXY_PREF_done_port___int32_to_float64if, PROXY_PREF_return_port___int32_to_float64if, PROXY_PREF_start_port___float64_divSRT4if, PROXY_PREF_a___float64_divSRT4if, PROXY_PREF_b___float64_divSRT4if, PROXY_PREF_start_port___float64_mulif, PROXY_PREF_a___float64_mulif, PROXY_PREF_b___float64_mulif, PROXY_PREF_start_port___float64_to_int32_round_to_zeroif, PROXY_PREF_a___float64_to_int32_round_to_zeroif, PROXY_PREF_start_port___int32_to_float64if, PROXY_PREF_a___int32_to_float64if);
  // IN
  input clock;
  input reset;
  input start_port;
  input signed [7:0] rad;
  input PROXY_PREF_done_port___float64_divSRT4if;
  input [63:0] PROXY_PREF_return_port___float64_divSRT4if;
  input PROXY_PREF_done_port___float64_mulif;
  input [63:0] PROXY_PREF_return_port___float64_mulif;
  input PROXY_PREF_done_port___float64_to_int32_round_to_zeroif;
  input signed [31:0] PROXY_PREF_return_port___float64_to_int32_round_to_zeroif;
  input PROXY_PREF_done_port___int32_to_float64if;
  input [63:0] PROXY_PREF_return_port___int32_to_float64if;
  // OUT
  output done_port;
  output signed [7:0] return_port;
  output PROXY_PREF_start_port___float64_divSRT4if;
  output [63:0] PROXY_PREF_a___float64_divSRT4if;
  output [63:0] PROXY_PREF_b___float64_divSRT4if;
  output PROXY_PREF_start_port___float64_mulif;
  output [63:0] PROXY_PREF_a___float64_mulif;
  output [63:0] PROXY_PREF_b___float64_mulif;
  output PROXY_PREF_start_port___float64_to_int32_round_to_zeroif;
  output [63:0] PROXY_PREF_a___float64_to_int32_round_to_zeroif;
  output PROXY_PREF_start_port___int32_to_float64if;
  output signed [31:0] PROXY_PREF_a___int32_to_float64if;
  // Component and signal declarations
  wire OUT_CONDITION_mysin_28866_29040;
  wire OUT_CONDITION_mysin_28866_29057;
  wire OUT_CONDITION_mysin_28866_29156;
  wire OUT_UNBOUNDED_mysin_28866_29025;
  wire OUT_UNBOUNDED_mysin_28866_29026;
  wire OUT_UNBOUNDED_mysin_28866_29032;
  wire OUT_UNBOUNDED_mysin_28866_29045;
  wire OUT_UNBOUNDED_mysin_28866_29046;
  wire OUT_UNBOUNDED_mysin_28866_29051;
  wire OUT_UNBOUNDED_mysin_28866_29065;
  wire OUT_UNBOUNDED_mysin_28866_29066;
  wire OUT_UNBOUNDED_mysin_28866_29067;
  wire OUT_UNBOUNDED_mysin_28866_29101;
  wire OUT_UNBOUNDED_mysin_28866_29102;
  wire OUT_UNBOUNDED_mysin_28866_29103;
  wire OUT_UNBOUNDED_mysin_28866_29104;
  wire OUT_UNBOUNDED_mysin_28866_29105;
  wire OUT_UNBOUNDED_mysin_28866_29106;
  wire OUT_UNBOUNDED_mysin_28866_29107;
  wire OUT_UNBOUNDED_mysin_28866_29155;
  wire OUT_UNBOUNDED_mysin_28866_29672;
  wire OUT_UNBOUNDED_mysin_28866_29674;
  wire OUT_UNBOUNDED_mysin_28866_29676;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if;
  wire fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if;
  wire fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif;
  wire fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif;
  wire fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif;
  wire fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif;
  wire fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if;
  wire fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if;
  wire signed [7:0] in_port_rad_SIGI1;
  wire [7:0] in_port_rad_SIGI2;
  wire selector_IN_UNBOUNDED_mysin_28866_29025;
  wire selector_IN_UNBOUNDED_mysin_28866_29026;
  wire selector_IN_UNBOUNDED_mysin_28866_29032;
  wire selector_IN_UNBOUNDED_mysin_28866_29045;
  wire selector_IN_UNBOUNDED_mysin_28866_29046;
  wire selector_IN_UNBOUNDED_mysin_28866_29051;
  wire selector_IN_UNBOUNDED_mysin_28866_29065;
  wire selector_IN_UNBOUNDED_mysin_28866_29066;
  wire selector_IN_UNBOUNDED_mysin_28866_29067;
  wire selector_IN_UNBOUNDED_mysin_28866_29101;
  wire selector_IN_UNBOUNDED_mysin_28866_29102;
  wire selector_IN_UNBOUNDED_mysin_28866_29103;
  wire selector_IN_UNBOUNDED_mysin_28866_29104;
  wire selector_IN_UNBOUNDED_mysin_28866_29105;
  wire selector_IN_UNBOUNDED_mysin_28866_29106;
  wire selector_IN_UNBOUNDED_mysin_28866_29107;
  wire selector_IN_UNBOUNDED_mysin_28866_29155;
  wire selector_IN_UNBOUNDED_mysin_28866_29672;
  wire selector_IN_UNBOUNDED_mysin_28866_29674;
  wire selector_IN_UNBOUNDED_mysin_28866_29676;
  wire selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0;
  wire selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0;
  wire selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0;
  wire selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0;
  wire selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1;
  wire selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0;
  wire selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1;
  wire selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2;
  wire selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0;
  wire selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1;
  wire selector_MUX_25___float64_addif_36_i0_0_0_0;
  wire selector_MUX_26___float64_addif_36_i0_1_0_0;
  wire selector_MUX_54_reg_10_0_0_0;
  wire selector_MUX_55_reg_11_0_0_0;
  wire selector_MUX_57_reg_13_0_0_0;
  wire selector_MUX_64_reg_2_0_0_0;
  wire selector_MUX_64_reg_2_0_0_1;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller_mysin Controller_i (.done_port(done_delayed_REG_signal_in), .selector_IN_UNBOUNDED_mysin_28866_29025(selector_IN_UNBOUNDED_mysin_28866_29025), .selector_IN_UNBOUNDED_mysin_28866_29026(selector_IN_UNBOUNDED_mysin_28866_29026), .selector_IN_UNBOUNDED_mysin_28866_29032(selector_IN_UNBOUNDED_mysin_28866_29032), .selector_IN_UNBOUNDED_mysin_28866_29045(selector_IN_UNBOUNDED_mysin_28866_29045), .selector_IN_UNBOUNDED_mysin_28866_29046(selector_IN_UNBOUNDED_mysin_28866_29046), .selector_IN_UNBOUNDED_mysin_28866_29051(selector_IN_UNBOUNDED_mysin_28866_29051), .selector_IN_UNBOUNDED_mysin_28866_29065(selector_IN_UNBOUNDED_mysin_28866_29065), .selector_IN_UNBOUNDED_mysin_28866_29066(selector_IN_UNBOUNDED_mysin_28866_29066), .selector_IN_UNBOUNDED_mysin_28866_29067(selector_IN_UNBOUNDED_mysin_28866_29067), .selector_IN_UNBOUNDED_mysin_28866_29101(selector_IN_UNBOUNDED_mysin_28866_29101), .selector_IN_UNBOUNDED_mysin_28866_29102(selector_IN_UNBOUNDED_mysin_28866_29102), .selector_IN_UNBOUNDED_mysin_28866_29103(selector_IN_UNBOUNDED_mysin_28866_29103), .selector_IN_UNBOUNDED_mysin_28866_29104(selector_IN_UNBOUNDED_mysin_28866_29104), .selector_IN_UNBOUNDED_mysin_28866_29105(selector_IN_UNBOUNDED_mysin_28866_29105), .selector_IN_UNBOUNDED_mysin_28866_29106(selector_IN_UNBOUNDED_mysin_28866_29106), .selector_IN_UNBOUNDED_mysin_28866_29107(selector_IN_UNBOUNDED_mysin_28866_29107), .selector_IN_UNBOUNDED_mysin_28866_29155(selector_IN_UNBOUNDED_mysin_28866_29155), .selector_IN_UNBOUNDED_mysin_28866_29672(selector_IN_UNBOUNDED_mysin_28866_29672), .selector_IN_UNBOUNDED_mysin_28866_29674(selector_IN_UNBOUNDED_mysin_28866_29674), .selector_IN_UNBOUNDED_mysin_28866_29676(selector_IN_UNBOUNDED_mysin_28866_29676), .selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0(selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0), .selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0(selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0), .selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0(selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0), .selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0(selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0), .selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1(selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1), .selector_MUX_25___float64_addif_36_i0_0_0_0(selector_MUX_25___float64_addif_36_i0_0_0_0), .selector_MUX_26___float64_addif_36_i0_1_0_0(selector_MUX_26___float64_addif_36_i0_1_0_0), .selector_MUX_54_reg_10_0_0_0(selector_MUX_54_reg_10_0_0_0), .selector_MUX_55_reg_11_0_0_0(selector_MUX_55_reg_11_0_0_0), .selector_MUX_57_reg_13_0_0_0(selector_MUX_57_reg_13_0_0_0), .selector_MUX_64_reg_2_0_0_0(selector_MUX_64_reg_2_0_0_0), .selector_MUX_64_reg_2_0_0_1(selector_MUX_64_reg_2_0_0_1), .fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if(fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if), .fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if(fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if), .fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif(fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif), .fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif(fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif), .fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif(fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif), .fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif(fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif), .fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if(fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if), .fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if(fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_CONDITION_mysin_28866_29040(OUT_CONDITION_mysin_28866_29040), .OUT_CONDITION_mysin_28866_29057(OUT_CONDITION_mysin_28866_29057), .OUT_CONDITION_mysin_28866_29156(OUT_CONDITION_mysin_28866_29156), .OUT_UNBOUNDED_mysin_28866_29025(OUT_UNBOUNDED_mysin_28866_29025), .OUT_UNBOUNDED_mysin_28866_29026(OUT_UNBOUNDED_mysin_28866_29026), .OUT_UNBOUNDED_mysin_28866_29032(OUT_UNBOUNDED_mysin_28866_29032), .OUT_UNBOUNDED_mysin_28866_29045(OUT_UNBOUNDED_mysin_28866_29045), .OUT_UNBOUNDED_mysin_28866_29046(OUT_UNBOUNDED_mysin_28866_29046), .OUT_UNBOUNDED_mysin_28866_29051(OUT_UNBOUNDED_mysin_28866_29051), .OUT_UNBOUNDED_mysin_28866_29065(OUT_UNBOUNDED_mysin_28866_29065), .OUT_UNBOUNDED_mysin_28866_29066(OUT_UNBOUNDED_mysin_28866_29066), .OUT_UNBOUNDED_mysin_28866_29067(OUT_UNBOUNDED_mysin_28866_29067), .OUT_UNBOUNDED_mysin_28866_29101(OUT_UNBOUNDED_mysin_28866_29101), .OUT_UNBOUNDED_mysin_28866_29102(OUT_UNBOUNDED_mysin_28866_29102), .OUT_UNBOUNDED_mysin_28866_29103(OUT_UNBOUNDED_mysin_28866_29103), .OUT_UNBOUNDED_mysin_28866_29104(OUT_UNBOUNDED_mysin_28866_29104), .OUT_UNBOUNDED_mysin_28866_29105(OUT_UNBOUNDED_mysin_28866_29105), .OUT_UNBOUNDED_mysin_28866_29106(OUT_UNBOUNDED_mysin_28866_29106), .OUT_UNBOUNDED_mysin_28866_29107(OUT_UNBOUNDED_mysin_28866_29107), .OUT_UNBOUNDED_mysin_28866_29155(OUT_UNBOUNDED_mysin_28866_29155), .OUT_UNBOUNDED_mysin_28866_29672(OUT_UNBOUNDED_mysin_28866_29672), .OUT_UNBOUNDED_mysin_28866_29674(OUT_UNBOUNDED_mysin_28866_29674), .OUT_UNBOUNDED_mysin_28866_29676(OUT_UNBOUNDED_mysin_28866_29676), .clock(clock), .reset(reset), .start_port(start_port));
  datapath_mysin Datapath_i (.return_port(return_port), .PROXY_PREF_start_port___float64_divSRT4if(PROXY_PREF_start_port___float64_divSRT4if), .PROXY_PREF_a___float64_divSRT4if(PROXY_PREF_a___float64_divSRT4if), .PROXY_PREF_b___float64_divSRT4if(PROXY_PREF_b___float64_divSRT4if), .PROXY_PREF_start_port___float64_mulif(PROXY_PREF_start_port___float64_mulif), .PROXY_PREF_a___float64_mulif(PROXY_PREF_a___float64_mulif), .PROXY_PREF_b___float64_mulif(PROXY_PREF_b___float64_mulif), .PROXY_PREF_start_port___float64_to_int32_round_to_zeroif(PROXY_PREF_start_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_a___float64_to_int32_round_to_zeroif(PROXY_PREF_a___float64_to_int32_round_to_zeroif), .PROXY_PREF_start_port___int32_to_float64if(PROXY_PREF_start_port___int32_to_float64if), .PROXY_PREF_a___int32_to_float64if(PROXY_PREF_a___int32_to_float64if), .OUT_CONDITION_mysin_28866_29040(OUT_CONDITION_mysin_28866_29040), .OUT_CONDITION_mysin_28866_29057(OUT_CONDITION_mysin_28866_29057), .OUT_CONDITION_mysin_28866_29156(OUT_CONDITION_mysin_28866_29156), .OUT_UNBOUNDED_mysin_28866_29025(OUT_UNBOUNDED_mysin_28866_29025), .OUT_UNBOUNDED_mysin_28866_29026(OUT_UNBOUNDED_mysin_28866_29026), .OUT_UNBOUNDED_mysin_28866_29032(OUT_UNBOUNDED_mysin_28866_29032), .OUT_UNBOUNDED_mysin_28866_29045(OUT_UNBOUNDED_mysin_28866_29045), .OUT_UNBOUNDED_mysin_28866_29046(OUT_UNBOUNDED_mysin_28866_29046), .OUT_UNBOUNDED_mysin_28866_29051(OUT_UNBOUNDED_mysin_28866_29051), .OUT_UNBOUNDED_mysin_28866_29065(OUT_UNBOUNDED_mysin_28866_29065), .OUT_UNBOUNDED_mysin_28866_29066(OUT_UNBOUNDED_mysin_28866_29066), .OUT_UNBOUNDED_mysin_28866_29067(OUT_UNBOUNDED_mysin_28866_29067), .OUT_UNBOUNDED_mysin_28866_29101(OUT_UNBOUNDED_mysin_28866_29101), .OUT_UNBOUNDED_mysin_28866_29102(OUT_UNBOUNDED_mysin_28866_29102), .OUT_UNBOUNDED_mysin_28866_29103(OUT_UNBOUNDED_mysin_28866_29103), .OUT_UNBOUNDED_mysin_28866_29104(OUT_UNBOUNDED_mysin_28866_29104), .OUT_UNBOUNDED_mysin_28866_29105(OUT_UNBOUNDED_mysin_28866_29105), .OUT_UNBOUNDED_mysin_28866_29106(OUT_UNBOUNDED_mysin_28866_29106), .OUT_UNBOUNDED_mysin_28866_29107(OUT_UNBOUNDED_mysin_28866_29107), .OUT_UNBOUNDED_mysin_28866_29155(OUT_UNBOUNDED_mysin_28866_29155), .OUT_UNBOUNDED_mysin_28866_29672(OUT_UNBOUNDED_mysin_28866_29672), .OUT_UNBOUNDED_mysin_28866_29674(OUT_UNBOUNDED_mysin_28866_29674), .OUT_UNBOUNDED_mysin_28866_29676(OUT_UNBOUNDED_mysin_28866_29676), .clock(clock), .reset(reset), .in_port_rad(in_port_rad_SIGI2), .PROXY_PREF_done_port___float64_divSRT4if(PROXY_PREF_done_port___float64_divSRT4if), .PROXY_PREF_return_port___float64_divSRT4if(PROXY_PREF_return_port___float64_divSRT4if), .PROXY_PREF_done_port___float64_mulif(PROXY_PREF_done_port___float64_mulif), .PROXY_PREF_return_port___float64_mulif(PROXY_PREF_return_port___float64_mulif), .PROXY_PREF_done_port___float64_to_int32_round_to_zeroif(PROXY_PREF_done_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_return_port___float64_to_int32_round_to_zeroif(PROXY_PREF_return_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_done_port___int32_to_float64if(PROXY_PREF_done_port___int32_to_float64if), .PROXY_PREF_return_port___int32_to_float64if(PROXY_PREF_return_port___int32_to_float64if), .selector_IN_UNBOUNDED_mysin_28866_29025(selector_IN_UNBOUNDED_mysin_28866_29025), .selector_IN_UNBOUNDED_mysin_28866_29026(selector_IN_UNBOUNDED_mysin_28866_29026), .selector_IN_UNBOUNDED_mysin_28866_29032(selector_IN_UNBOUNDED_mysin_28866_29032), .selector_IN_UNBOUNDED_mysin_28866_29045(selector_IN_UNBOUNDED_mysin_28866_29045), .selector_IN_UNBOUNDED_mysin_28866_29046(selector_IN_UNBOUNDED_mysin_28866_29046), .selector_IN_UNBOUNDED_mysin_28866_29051(selector_IN_UNBOUNDED_mysin_28866_29051), .selector_IN_UNBOUNDED_mysin_28866_29065(selector_IN_UNBOUNDED_mysin_28866_29065), .selector_IN_UNBOUNDED_mysin_28866_29066(selector_IN_UNBOUNDED_mysin_28866_29066), .selector_IN_UNBOUNDED_mysin_28866_29067(selector_IN_UNBOUNDED_mysin_28866_29067), .selector_IN_UNBOUNDED_mysin_28866_29101(selector_IN_UNBOUNDED_mysin_28866_29101), .selector_IN_UNBOUNDED_mysin_28866_29102(selector_IN_UNBOUNDED_mysin_28866_29102), .selector_IN_UNBOUNDED_mysin_28866_29103(selector_IN_UNBOUNDED_mysin_28866_29103), .selector_IN_UNBOUNDED_mysin_28866_29104(selector_IN_UNBOUNDED_mysin_28866_29104), .selector_IN_UNBOUNDED_mysin_28866_29105(selector_IN_UNBOUNDED_mysin_28866_29105), .selector_IN_UNBOUNDED_mysin_28866_29106(selector_IN_UNBOUNDED_mysin_28866_29106), .selector_IN_UNBOUNDED_mysin_28866_29107(selector_IN_UNBOUNDED_mysin_28866_29107), .selector_IN_UNBOUNDED_mysin_28866_29155(selector_IN_UNBOUNDED_mysin_28866_29155), .selector_IN_UNBOUNDED_mysin_28866_29672(selector_IN_UNBOUNDED_mysin_28866_29672), .selector_IN_UNBOUNDED_mysin_28866_29674(selector_IN_UNBOUNDED_mysin_28866_29674), .selector_IN_UNBOUNDED_mysin_28866_29676(selector_IN_UNBOUNDED_mysin_28866_29676), .selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0(selector_MUX_19_PROXY_PREF___float64_divSRT4if_41_i0_1_0_0), .selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0(selector_MUX_20_PROXY_PREF___float64_mulif_42_i0_0_0_0), .selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0(selector_MUX_21_PROXY_PREF___float64_mulif_42_i0_1_0_0), .selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0(selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_0), .selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1(selector_MUX_22_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_0_0_1), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_0), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_1), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_0_2), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_0), .selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1(selector_MUX_23_PROXY_PREF___int32_to_float64if_44_i0_0_1_1), .selector_MUX_25___float64_addif_36_i0_0_0_0(selector_MUX_25___float64_addif_36_i0_0_0_0), .selector_MUX_26___float64_addif_36_i0_1_0_0(selector_MUX_26___float64_addif_36_i0_1_0_0), .selector_MUX_54_reg_10_0_0_0(selector_MUX_54_reg_10_0_0_0), .selector_MUX_55_reg_11_0_0_0(selector_MUX_55_reg_11_0_0_0), .selector_MUX_57_reg_13_0_0_0(selector_MUX_57_reg_13_0_0_0), .selector_MUX_64_reg_2_0_0_0(selector_MUX_64_reg_2_0_0_0), .selector_MUX_64_reg_2_0_0_1(selector_MUX_64_reg_2_0_0_1), .fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if(fuselector_PROXY_PREF___float64_divSRT4if_41_i0___float64_divSRT4if), .fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if(fuselector_PROXY_PREF___float64_divSRT4if_41_i0_PROXY_PREF___float64_divSRT4if), .fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif(fuselector_PROXY_PREF___float64_mulif_42_i0___float64_mulif), .fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif(fuselector_PROXY_PREF___float64_mulif_42_i0_PROXY_PREF___float64_mulif), .fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif(fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0___float64_to_int32_round_to_zeroif), .fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif(fuselector_PROXY_PREF___float64_to_int32_round_to_zeroif_43_i0_PROXY_PREF___float64_to_int32_round_to_zeroif), .fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if(fuselector_PROXY_PREF___int32_to_float64if_44_i0___int32_to_float64if), .fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if(fuselector_PROXY_PREF___int32_to_float64if_44_i0_PROXY_PREF___int32_to_float64if), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) in_port_rad_REG (.out1(in_port_rad_SIGI2), .clock(clock), .reset(reset), .in1(in_port_rad_SIGI1));
  // io-signal post fix
  assign in_port_rad_SIGI1 = rad;
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Datapath RTL description for fft
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath_fft(clock, reset, in_port_nn, in_port_size, in_port_data, in_port_isign, M_Rdata_ram, M_DataRdy, Min_oe_ram, Min_we_ram, Min_addr_ram, Min_Wdata_ram, Min_data_ram_size, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size, fuselector_BMEMORY_CTRL_61_i0_LOAD, fuselector_BMEMORY_CTRL_61_i0_STORE, selector_IN_UNBOUNDED_fft_28867_29307, selector_IN_UNBOUNDED_fft_28867_29309, selector_IN_UNBOUNDED_fft_28867_29310, selector_IN_UNBOUNDED_fft_28867_29311, selector_IN_UNBOUNDED_fft_28867_29312, selector_IN_UNBOUNDED_fft_28867_29313, selector_IN_UNBOUNDED_fft_28867_29314, selector_IN_UNBOUNDED_fft_28867_29315, selector_IN_UNBOUNDED_fft_28867_29317, selector_IN_UNBOUNDED_fft_28867_29318, selector_IN_UNBOUNDED_fft_28867_29319, selector_IN_UNBOUNDED_fft_28867_29320, selector_IN_UNBOUNDED_fft_28867_29321, selector_IN_UNBOUNDED_fft_28867_29323, selector_MUX_102_reg_29_0_0_0, selector_MUX_104_reg_30_0_0_0, selector_MUX_106_reg_32_0_0_0, selector_MUX_107_reg_33_0_0_0, selector_MUX_108_reg_34_0_0_0, selector_MUX_109_reg_35_0_0_0, selector_MUX_110_reg_36_0_0_0, selector_MUX_111_reg_37_0_0_0, selector_MUX_112_reg_38_0_0_0, selector_MUX_113_reg_39_0_0_0, selector_MUX_115_reg_40_0_0_0, selector_MUX_116_reg_41_0_0_0, selector_MUX_131_reg_55_0_0_0, selector_MUX_143_reg_9_0_0_0, selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0, selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0, selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1, selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0, selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0, selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0, selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1, selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3, selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0, selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1, selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3, selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0, selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1, selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0, selector_MUX_69_mysin_99_i0_0_0_0, selector_MUX_82_reg_10_0_0_0, selector_MUX_82_reg_10_0_0_1, selector_MUX_83_reg_11_0_0_0, selector_MUX_92_reg_2_0_0_0, fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if, fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if, fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif, fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif, fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif, fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif, fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if, fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_54, wrenable_reg_55, wrenable_reg_56, wrenable_reg_57, wrenable_reg_58, wrenable_reg_59, wrenable_reg_6, wrenable_reg_60, wrenable_reg_61, wrenable_reg_62, wrenable_reg_63, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION_fft_28867_29295, OUT_CONDITION_fft_28867_29527, OUT_CONDITION_fft_28867_29529, OUT_CONDITION_fft_28867_29531, OUT_MULTIIF_fft_28867_32498, OUT_UNBOUNDED_fft_28867_29307, OUT_UNBOUNDED_fft_28867_29309, OUT_UNBOUNDED_fft_28867_29310, OUT_UNBOUNDED_fft_28867_29311, OUT_UNBOUNDED_fft_28867_29312, OUT_UNBOUNDED_fft_28867_29313, OUT_UNBOUNDED_fft_28867_29314, OUT_UNBOUNDED_fft_28867_29315, OUT_UNBOUNDED_fft_28867_29317, OUT_UNBOUNDED_fft_28867_29318, OUT_UNBOUNDED_fft_28867_29319, OUT_UNBOUNDED_fft_28867_29320, OUT_UNBOUNDED_fft_28867_29321, OUT_UNBOUNDED_fft_28867_29323);
  // IN
  input clock;
  input reset;
  input signed [7:0] in_port_nn;
  input [7:0] in_port_size;
  input [31:0] in_port_data;
  input [7:0] in_port_isign;
  input [7:0] M_Rdata_ram;
  input M_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [6:0] Min_addr_ram;
  input [7:0] Min_Wdata_ram;
  input [3:0] Min_data_ram_size;
  input fuselector_BMEMORY_CTRL_61_i0_LOAD;
  input fuselector_BMEMORY_CTRL_61_i0_STORE;
  input selector_IN_UNBOUNDED_fft_28867_29307;
  input selector_IN_UNBOUNDED_fft_28867_29309;
  input selector_IN_UNBOUNDED_fft_28867_29310;
  input selector_IN_UNBOUNDED_fft_28867_29311;
  input selector_IN_UNBOUNDED_fft_28867_29312;
  input selector_IN_UNBOUNDED_fft_28867_29313;
  input selector_IN_UNBOUNDED_fft_28867_29314;
  input selector_IN_UNBOUNDED_fft_28867_29315;
  input selector_IN_UNBOUNDED_fft_28867_29317;
  input selector_IN_UNBOUNDED_fft_28867_29318;
  input selector_IN_UNBOUNDED_fft_28867_29319;
  input selector_IN_UNBOUNDED_fft_28867_29320;
  input selector_IN_UNBOUNDED_fft_28867_29321;
  input selector_IN_UNBOUNDED_fft_28867_29323;
  input selector_MUX_102_reg_29_0_0_0;
  input selector_MUX_104_reg_30_0_0_0;
  input selector_MUX_106_reg_32_0_0_0;
  input selector_MUX_107_reg_33_0_0_0;
  input selector_MUX_108_reg_34_0_0_0;
  input selector_MUX_109_reg_35_0_0_0;
  input selector_MUX_110_reg_36_0_0_0;
  input selector_MUX_111_reg_37_0_0_0;
  input selector_MUX_112_reg_38_0_0_0;
  input selector_MUX_113_reg_39_0_0_0;
  input selector_MUX_115_reg_40_0_0_0;
  input selector_MUX_116_reg_41_0_0_0;
  input selector_MUX_131_reg_55_0_0_0;
  input selector_MUX_143_reg_9_0_0_0;
  input selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0;
  input selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0;
  input selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1;
  input selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0;
  input selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0;
  input selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0;
  input selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1;
  input selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1;
  input selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1;
  input selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0;
  input selector_MUX_69_mysin_99_i0_0_0_0;
  input selector_MUX_82_reg_10_0_0_0;
  input selector_MUX_82_reg_10_0_0_1;
  input selector_MUX_83_reg_11_0_0_0;
  input selector_MUX_92_reg_2_0_0_0;
  input fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if;
  input fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if;
  input fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif;
  input fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif;
  input fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif;
  input fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif;
  input fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if;
  input fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_24;
  input wrenable_reg_25;
  input wrenable_reg_26;
  input wrenable_reg_27;
  input wrenable_reg_28;
  input wrenable_reg_29;
  input wrenable_reg_3;
  input wrenable_reg_30;
  input wrenable_reg_31;
  input wrenable_reg_32;
  input wrenable_reg_33;
  input wrenable_reg_34;
  input wrenable_reg_35;
  input wrenable_reg_36;
  input wrenable_reg_37;
  input wrenable_reg_38;
  input wrenable_reg_39;
  input wrenable_reg_4;
  input wrenable_reg_40;
  input wrenable_reg_41;
  input wrenable_reg_42;
  input wrenable_reg_43;
  input wrenable_reg_44;
  input wrenable_reg_45;
  input wrenable_reg_46;
  input wrenable_reg_47;
  input wrenable_reg_48;
  input wrenable_reg_49;
  input wrenable_reg_5;
  input wrenable_reg_50;
  input wrenable_reg_51;
  input wrenable_reg_52;
  input wrenable_reg_53;
  input wrenable_reg_54;
  input wrenable_reg_55;
  input wrenable_reg_56;
  input wrenable_reg_57;
  input wrenable_reg_58;
  input wrenable_reg_59;
  input wrenable_reg_6;
  input wrenable_reg_60;
  input wrenable_reg_61;
  input wrenable_reg_62;
  input wrenable_reg_63;
  input wrenable_reg_7;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output Mout_oe_ram;
  output Mout_we_ram;
  output [6:0] Mout_addr_ram;
  output [7:0] Mout_Wdata_ram;
  output [3:0] Mout_data_ram_size;
  output OUT_CONDITION_fft_28867_29295;
  output OUT_CONDITION_fft_28867_29527;
  output OUT_CONDITION_fft_28867_29529;
  output OUT_CONDITION_fft_28867_29531;
  output [1:0] OUT_MULTIIF_fft_28867_32498;
  output OUT_UNBOUNDED_fft_28867_29307;
  output OUT_UNBOUNDED_fft_28867_29309;
  output OUT_UNBOUNDED_fft_28867_29310;
  output OUT_UNBOUNDED_fft_28867_29311;
  output OUT_UNBOUNDED_fft_28867_29312;
  output OUT_UNBOUNDED_fft_28867_29313;
  output OUT_UNBOUNDED_fft_28867_29314;
  output OUT_UNBOUNDED_fft_28867_29315;
  output OUT_UNBOUNDED_fft_28867_29317;
  output OUT_UNBOUNDED_fft_28867_29318;
  output OUT_UNBOUNDED_fft_28867_29319;
  output OUT_UNBOUNDED_fft_28867_29320;
  output OUT_UNBOUNDED_fft_28867_29321;
  output OUT_UNBOUNDED_fft_28867_29323;
  // Component and signal declarations
  wire PROXY_PREF_done_port___float64_divSRT4if;
  wire PROXY_PREF_done_port___float64_mulif;
  wire PROXY_PREF_done_port___float64_to_int32_round_to_zeroif;
  wire PROXY_PREF_done_port___int32_to_float64if;
  wire [63:0] PROXY_PREF_return_port___float64_divSRT4if;
  wire [63:0] PROXY_PREF_return_port___float64_mulif;
  wire signed [31:0] PROXY_PREF_return_port___float64_to_int32_round_to_zeroif;
  wire [63:0] PROXY_PREF_return_port___int32_to_float64if;
  wire signed [7:0] out_ASSIGN_SIGNED_FU_31_i0_fu_fft_28867_32506;
  wire signed [7:0] out_ASSIGN_SIGNED_FU_34_i0_fu_fft_28867_32508;
  wire signed [7:0] out_ASSIGN_SIGNED_FU_36_i0_fu_fft_28867_32510;
  wire signed [7:0] out_ASSIGN_SIGNED_FU_37_i0_fu_fft_28867_32512;
  wire [7:0] out_BMEMORY_CTRL_61_i0_BMEMORY_CTRL_61_i0;
  wire signed [7:0] out_IIdata_converter_FU_24_i0_fu_fft_28867_29962;
  wire signed [7:0] out_IIdata_converter_FU_25_i0_fu_fft_28867_29965;
  wire signed [7:0] out_IIdata_converter_FU_26_i0_fu_fft_28867_29969;
  wire signed [8:0] out_IIdata_converter_FU_27_i0_fu_fft_28867_29316;
  wire signed [7:0] out_IIdata_converter_FU_28_i0_fu_fft_28867_29972;
  wire signed [7:0] out_IIdata_converter_FU_29_i0_fu_fft_28867_29975;
  wire signed [7:0] out_IIdata_converter_FU_30_i0_fu_fft_28867_29979;
  wire signed [8:0] out_IIdata_converter_FU_32_i0_fu_fft_28867_29322;
  wire signed [7:0] out_IIdata_converter_FU_33_i0_fu_fft_28867_29982;
  wire signed [8:0] out_IIdata_converter_FU_58_i0_fu_fft_28867_29958;
  wire [7:0] out_IUdata_converter_FU_6_i0_fu_fft_28867_29180;
  wire [7:0] out_MUX_102_reg_29_0_0_0;
  wire [7:0] out_MUX_104_reg_30_0_0_0;
  wire [7:0] out_MUX_106_reg_32_0_0_0;
  wire [7:0] out_MUX_107_reg_33_0_0_0;
  wire [7:0] out_MUX_108_reg_34_0_0_0;
  wire [7:0] out_MUX_109_reg_35_0_0_0;
  wire [7:0] out_MUX_110_reg_36_0_0_0;
  wire [7:0] out_MUX_111_reg_37_0_0_0;
  wire [7:0] out_MUX_112_reg_38_0_0_0;
  wire [7:0] out_MUX_113_reg_39_0_0_0;
  wire [7:0] out_MUX_115_reg_40_0_0_0;
  wire [7:0] out_MUX_116_reg_41_0_0_0;
  wire [7:0] out_MUX_131_reg_55_0_0_0;
  wire [7:0] out_MUX_143_reg_9_0_0_0;
  wire [63:0] out_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0;
  wire [63:0] out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0;
  wire [63:0] out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1;
  wire [63:0] out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0;
  wire [63:0] out_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0;
  wire [31:0] out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0;
  wire [31:0] out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1;
  wire [31:0] out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_0_0;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_0_1;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_0_2;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_0_3;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_1_0;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_1_1;
  wire [7:0] out_MUX_4_BMEMORY_CTRL_61_i0_0_2_0;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_0_0;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_0_1;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_0_2;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_0_3;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_1_0;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_1_1;
  wire [6:0] out_MUX_5_BMEMORY_CTRL_61_i0_1_2_0;
  wire [7:0] out_MUX_69_mysin_99_i0_0_0_0;
  wire [7:0] out_MUX_82_reg_10_0_0_0;
  wire [7:0] out_MUX_82_reg_10_0_0_1;
  wire [7:0] out_MUX_83_reg_11_0_0_0;
  wire [8:0] out_MUX_92_reg_2_0_0_0;
  wire signed [8:0] out_UIdata_converter_FU_57_i0_fu_fft_28867_29308;
  wire [7:0] out_UUdata_converter_FU_20_i0_fu_fft_28867_29227;
  wire [7:0] out_UUdata_converter_FU_21_i0_fu_fft_28867_29240;
  wire [7:0] out_UUdata_converter_FU_43_i0_fu_fft_28867_29387;
  wire [7:0] out_UUdata_converter_FU_44_i0_fu_fft_28867_29399;
  wire [63:0] out_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if_instance;
  wire [63:0] out_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif_instance;
  wire signed [31:0] out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance;
  wire [63:0] out_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if_instance;
  wire out_const_0;
  wire [63:0] out_const_1;
  wire [1:0] out_const_2;
  wire [4:0] out_const_3;
  wire [63:0] out_const_4;
  wire out_const_5;
  wire [1:0] out_const_6;
  wire [1:0] out_const_7;
  wire [63:0] out_const_8;
  wire [6:0] out_conv_in_port_data_32_7;
  wire [7:0] out_conv_out_MUX_92_reg_2_0_0_0_9_8;
  wire [8:0] out_conv_out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance_I_32_9;
  wire signed [31:0] out_conv_out_const_0_I_1_I_32;
  wire [3:0] out_conv_out_const_3_5_4;
  wire [7:0] out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8;
  wire [7:0] out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8;
  wire signed [31:0] out_conv_out_reg_13_reg_13_I_9_I_32;
  wire signed [31:0] out_conv_out_reg_18_reg_18_I_8_I_32;
  wire signed [31:0] out_conv_out_reg_26_reg_26_I_8_I_32;
  wire [6:0] out_conv_out_reg_3_reg_3_9_7;
  wire [6:0] out_conv_out_reg_42_reg_42_9_7;
  wire [6:0] out_conv_out_reg_44_reg_44_9_7;
  wire [6:0] out_conv_out_reg_45_reg_45_10_7;
  wire [6:0] out_conv_out_reg_4_reg_4_10_7;
  wire [6:0] out_conv_out_reg_51_reg_51_10_7;
  wire [6:0] out_conv_out_reg_5_reg_5_9_7;
  wire [6:0] out_conv_out_reg_6_reg_6_10_7;
  wire [7:0] out_conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10_1_8;
  wire [7:0] out_conv_out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11_7_8;
  wire [8:0] out_conv_out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12_1_9;
  wire [7:0] out_conv_out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14_2_8;
  wire [7:0] out_conv_out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15_1_8;
  wire signed [1:0] out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0;
  wire signed [0:0] out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1;
  wire [7:0] out_iu_conv_conn_obj_10_IUdata_converter_FU_iu_conv_3;
  wire [7:0] out_iu_conv_conn_obj_11_IUdata_converter_FU_iu_conv_4;
  wire [7:0] out_iu_conv_conn_obj_12_IUdata_converter_FU_iu_conv_5;
  wire [7:0] out_iu_conv_conn_obj_13_IUdata_converter_FU_iu_conv_6;
  wire [7:0] out_iu_conv_conn_obj_1_IUdata_converter_FU_iu_conv_2;
  wire [7:0] out_iu_conv_conn_obj_2_IUdata_converter_FU_iu_conv_7;
  wire [7:0] out_iu_conv_conn_obj_3_IUdata_converter_FU_iu_conv_8;
  wire [7:0] out_iu_conv_conn_obj_4_IUdata_converter_FU_iu_conv_9;
  wire signed [7:0] out_minus_expr_FU_8_8_8_62_i0_fu_fft_28867_29395;
  wire signed [7:0] out_minus_expr_FU_8_8_8_62_i1_fu_fft_28867_29402;
  wire signed [7:0] out_minus_expr_FU_8_8_8_62_i2_fu_fft_28867_29407;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i0_fu_fft_28867_29390;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i1_fu_fft_28867_29394;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i2_fu_fft_28867_29396;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i3_fu_fft_28867_29397;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i4_fu_fft_28867_29460;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i5_fu_fft_28867_29462;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i6_fu_fft_28867_29476;
  wire signed [7:0] out_mult_expr_FU_8_8_8_0_63_i7_fu_fft_28867_29478;
  wire [1:0] out_multi_read_cond_FU_22_i0_fu_fft_28867_32498;
  wire signed [7:0] out_mysin_99_i0_mysin_99_i0;
  wire signed [7:0] out_plus_expr_FU_8_8_8_64_i0_fu_fft_28867_29398;
  wire signed [7:0] out_plus_expr_FU_8_8_8_64_i1_fu_fft_28867_29410;
  wire signed [7:0] out_plus_expr_FU_8_8_8_64_i2_fu_fft_28867_29413;
  wire out_read_cond_FU_14_i0_fu_fft_28867_29295;
  wire out_read_cond_FU_45_i0_fu_fft_28867_29527;
  wire out_read_cond_FU_56_i0_fu_fft_28867_29529;
  wire out_read_cond_FU_59_i0_fu_fft_28867_29531;
  wire [7:0] out_reg_0_reg_0;
  wire [7:0] out_reg_10_reg_10;
  wire [7:0] out_reg_11_reg_11;
  wire [7:0] out_reg_12_reg_12;
  wire [8:0] out_reg_13_reg_13;
  wire [6:0] out_reg_14_reg_14;
  wire [5:0] out_reg_15_reg_15;
  wire [63:0] out_reg_16_reg_16;
  wire [63:0] out_reg_17_reg_17;
  wire [7:0] out_reg_18_reg_18;
  wire [7:0] out_reg_19_reg_19;
  wire [7:0] out_reg_1_reg_1;
  wire [63:0] out_reg_20_reg_20;
  wire [8:0] out_reg_21_reg_21;
  wire [7:0] out_reg_22_reg_22;
  wire [7:0] out_reg_23_reg_23;
  wire [7:0] out_reg_24_reg_24;
  wire [7:0] out_reg_25_reg_25;
  wire [7:0] out_reg_26_reg_26;
  wire [63:0] out_reg_27_reg_27;
  wire [7:0] out_reg_28_reg_28;
  wire [7:0] out_reg_29_reg_29;
  wire [7:0] out_reg_2_reg_2;
  wire [7:0] out_reg_30_reg_30;
  wire [7:0] out_reg_31_reg_31;
  wire [7:0] out_reg_32_reg_32;
  wire [7:0] out_reg_33_reg_33;
  wire [7:0] out_reg_34_reg_34;
  wire [7:0] out_reg_35_reg_35;
  wire [7:0] out_reg_36_reg_36;
  wire [7:0] out_reg_37_reg_37;
  wire [7:0] out_reg_38_reg_38;
  wire [7:0] out_reg_39_reg_39;
  wire [8:0] out_reg_3_reg_3;
  wire [7:0] out_reg_40_reg_40;
  wire [7:0] out_reg_41_reg_41;
  wire [8:0] out_reg_42_reg_42;
  wire [8:0] out_reg_43_reg_43;
  wire [8:0] out_reg_44_reg_44;
  wire [9:0] out_reg_45_reg_45;
  wire out_reg_46_reg_46;
  wire [7:0] out_reg_47_reg_47;
  wire [7:0] out_reg_48_reg_48;
  wire [7:0] out_reg_49_reg_49;
  wire [9:0] out_reg_4_reg_4;
  wire [7:0] out_reg_50_reg_50;
  wire [9:0] out_reg_51_reg_51;
  wire [7:0] out_reg_52_reg_52;
  wire [7:0] out_reg_53_reg_53;
  wire [7:0] out_reg_54_reg_54;
  wire [7:0] out_reg_55_reg_55;
  wire [7:0] out_reg_56_reg_56;
  wire [7:0] out_reg_57_reg_57;
  wire [7:0] out_reg_58_reg_58;
  wire [7:0] out_reg_59_reg_59;
  wire [8:0] out_reg_5_reg_5;
  wire [7:0] out_reg_60_reg_60;
  wire [7:0] out_reg_61_reg_61;
  wire [7:0] out_reg_62_reg_62;
  wire [7:0] out_reg_63_reg_63;
  wire [9:0] out_reg_6_reg_6;
  wire [8:0] out_reg_7_reg_7;
  wire [7:0] out_reg_8_reg_8;
  wire [7:0] out_reg_9_reg_9;
  wire signed [7:0] out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453;
  wire signed [7:0] out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469;
  wire out_truth_and_expr_FU_1_1_1_67_i0_fu_fft_28867_32504;
  wire out_truth_not_expr_FU_1_1_68_i0_fu_fft_28867_32501;
  wire [0:0] out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10;
  wire [6:0] out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11;
  wire [0:0] out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12;
  wire [8:0] out_u_assign_conn_obj_7_ASSIGN_UNSIGNED_FU_u_assign_13;
  wire [1:0] out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14;
  wire [0:0] out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15;
  wire [0:0] out_ui_bit_and_expr_FU_1_1_1_69_i0_fu_fft_28867_29294;
  wire [1:0] out_ui_bit_and_expr_FU_8_0_8_70_i0_fu_fft_28867_30617;
  wire [7:0] out_ui_bit_ior_concat_expr_FU_71_i0_fu_fft_28867_29221;
  wire [7:0] out_ui_bit_ior_concat_expr_FU_71_i1_fu_fft_28867_29386;
  wire [7:0] out_ui_bit_ior_concat_expr_FU_71_i2_fu_fft_28867_29429;
  wire [7:0] out_ui_bit_ior_concat_expr_FU_72_i0_fu_fft_28867_29415;
  wire [7:0] out_ui_bit_ior_concat_expr_FU_73_i0_fu_fft_28867_29577;
  wire out_ui_gt_expr_FU_8_0_8_74_i0_fu_fft_28867_29292;
  wire out_ui_gt_expr_FU_8_8_8_75_i0_fu_fft_28867_29293;
  wire out_ui_gt_expr_FU_8_8_8_75_i1_fu_fft_28867_29630;
  wire out_ui_gt_expr_FU_8_8_8_75_i2_fu_fft_28867_29640;
  wire out_ui_le_expr_FU_8_8_8_76_i0_fu_fft_28867_29636;
  wire [8:0] out_ui_lshift_expr_FU_16_0_16_77_i0_fu_fft_28867_30548;
  wire [8:0] out_ui_lshift_expr_FU_16_0_16_78_i0_fu_fft_28867_30567;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_79_i0_fu_fft_28867_29181;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_79_i1_fu_fft_28867_29305;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_80_i0_fu_fft_28867_30527;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_81_i0_fu_fft_28867_30581;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_82_i0_fu_fft_28867_30596;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_82_i1_fu_fft_28867_30627;
  wire [7:0] out_ui_lshift_expr_FU_8_0_8_83_i0_fu_fft_28867_30614;
  wire out_ui_lt_expr_FU_8_8_8_84_i0_fu_fft_28867_29634;
  wire out_ui_lt_expr_FU_8_8_8_84_i1_fu_fft_28867_29638;
  wire [7:0] out_ui_minus_expr_FU_8_8_8_85_i0_fu_fft_28867_29218;
  wire [7:0] out_ui_plus_expr_FU_0_8_8_86_i0_fu_fft_28867_30544;
  wire [8:0] out_ui_plus_expr_FU_8_0_8_87_i0_fu_fft_28867_29246;
  wire [8:0] out_ui_plus_expr_FU_8_0_8_87_i1_fu_fft_28867_29391;
  wire [8:0] out_ui_plus_expr_FU_8_0_8_87_i2_fu_fft_28867_29404;
  wire [7:0] out_ui_plus_expr_FU_8_0_8_88_i0_fu_fft_28867_30564;
  wire [6:0] out_ui_plus_expr_FU_8_0_8_89_i0_fu_fft_28867_30624;
  wire [7:0] out_ui_plus_expr_FU_8_8_8_90_i0_fu_fft_28867_29202;
  wire [6:0] out_ui_plus_expr_FU_8_8_8_90_i1_fu_fft_28867_30593;
  wire [5:0] out_ui_plus_expr_FU_8_8_8_90_i2_fu_fft_28867_30611;
  wire [9:0] out_ui_pointer_plus_expr_FU_16_16_16_91_i0_fu_fft_28867_29247;
  wire [9:0] out_ui_pointer_plus_expr_FU_16_16_16_91_i1_fu_fft_28867_29392;
  wire [9:0] out_ui_pointer_plus_expr_FU_16_16_16_91_i2_fu_fft_28867_29405;
  wire [9:0] out_ui_pointer_plus_expr_FU_16_16_16_91_i3_fu_fft_28867_29600;
  wire [8:0] out_ui_pointer_plus_expr_FU_8_8_8_92_i0_fu_fft_28867_29241;
  wire [8:0] out_ui_pointer_plus_expr_FU_8_8_8_92_i1_fu_fft_28867_29388;
  wire [8:0] out_ui_pointer_plus_expr_FU_8_8_8_92_i2_fu_fft_28867_29400;
  wire [8:0] out_ui_pointer_plus_expr_FU_8_8_8_92_i3_fu_fft_28867_29580;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_93_i0_fu_fft_28867_29210;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_94_i0_fu_fft_28867_30520;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_95_i0_fu_fft_28867_30562;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_96_i0_fu_fft_28867_30572;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_97_i0_fu_fft_28867_30588;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_97_i1_fu_fft_28867_30591;
  wire [6:0] out_ui_rshift_expr_FU_8_0_8_97_i2_fu_fft_28867_30622;
  wire [5:0] out_ui_rshift_expr_FU_8_0_8_98_i0_fu_fft_28867_30605;
  wire [5:0] out_ui_rshift_expr_FU_8_0_8_98_i1_fu_fft_28867_30609;
  wire s___float64_mulif_instance5;
  wire s___float64_to_int32_round_to_zeroif_instance6;
  wire s___int32_to_float64if_instance7;
  wire s_done___float64_divSRT4if_instance;
  wire s_done___float64_mulif_instance;
  wire s_done___float64_to_int32_round_to_zeroif_instance;
  wire s_done___int32_to_float64if_instance;
  wire s_done_mysin_99_i0;
  wire s_mysin_99_i08;
  wire [7:0] sig_in_bus_mergerMout_Wdata_ram0_0;
  wire [6:0] sig_in_bus_mergerMout_addr_ram1_0;
  wire [3:0] sig_in_bus_mergerMout_data_ram_size2_0;
  wire sig_in_bus_mergerMout_oe_ram3_0;
  wire sig_in_bus_mergerMout_we_ram4_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_a11_0;
  wire signed [31:0] sig_in_bus_mergerPROXY_PREF_a13_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_a5_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_a8_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_b6_0;
  wire [63:0] sig_in_bus_mergerPROXY_PREF_b9_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port10_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port12_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port14_0;
  wire sig_in_bus_mergerPROXY_PREF_start_port7_0;
  wire [7:0] sig_out_bus_mergerMout_Wdata_ram0_;
  wire [6:0] sig_out_bus_mergerMout_addr_ram1_;
  wire [3:0] sig_out_bus_mergerMout_data_ram_size2_;
  wire sig_out_bus_mergerMout_oe_ram3_;
  wire sig_out_bus_mergerMout_we_ram4_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_a11_;
  wire [31:0] sig_out_bus_mergerPROXY_PREF_a13_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_a5_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_a8_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_b6_;
  wire [63:0] sig_out_bus_mergerPROXY_PREF_b9_;
  wire sig_out_bus_mergerPROXY_PREF_start_port10_;
  wire sig_out_bus_mergerPROXY_PREF_start_port12_;
  wire sig_out_bus_mergerPROXY_PREF_start_port14_;
  wire sig_out_bus_mergerPROXY_PREF_start_port7_;
  
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) ASSIGN_SIGNED_FU_i_assign_0 (.out1(out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0), .in1(out_const_2));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) ASSIGN_SIGNED_FU_i_assign_1 (.out1(out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1), .in1(out_const_0));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) ASSIGN_UNSIGNED_FU_u_assign_10 (.out1(out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10), .in1(out_const_5));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(7), .BITSIZE_out1(7)) ASSIGN_UNSIGNED_FU_u_assign_11 (.out1(out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11), .in1(out_ui_rshift_expr_FU_8_0_8_93_i0_fu_fft_28867_29210));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) ASSIGN_UNSIGNED_FU_u_assign_12 (.out1(out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12), .in1(out_const_0));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(9), .BITSIZE_out1(9)) ASSIGN_UNSIGNED_FU_u_assign_13 (.out1(out_u_assign_conn_obj_7_ASSIGN_UNSIGNED_FU_u_assign_13), .in1(out_reg_7_reg_7));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(2), .BITSIZE_out1(2)) ASSIGN_UNSIGNED_FU_u_assign_14 (.out1(out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14), .in1(out_const_6));
  ASSIGN_UNSIGNED_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) ASSIGN_UNSIGNED_FU_u_assign_15 (.out1(out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15), .in1(out_const_5));
  BMEMORY_CTRL #(.BITSIZE_in1(8), .BITSIZE_in2(7), .BITSIZE_in3(4), .BITSIZE_out1(8), .BITSIZE_Min_addr_ram(7), .BITSIZE_Mout_addr_ram(7), .BITSIZE_M_Rdata_ram(8), .BITSIZE_Min_Wdata_ram(8), .BITSIZE_Mout_Wdata_ram(8), .BITSIZE_Min_data_ram_size(4), .BITSIZE_Mout_data_ram_size(4)) BMEMORY_CTRL_61_i0 (.out1(out_BMEMORY_CTRL_61_i0_BMEMORY_CTRL_61_i0), .Mout_oe_ram(sig_in_bus_mergerMout_oe_ram3_0), .Mout_we_ram(sig_in_bus_mergerMout_we_ram4_0), .Mout_addr_ram(sig_in_bus_mergerMout_addr_ram1_0), .Mout_Wdata_ram(sig_in_bus_mergerMout_Wdata_ram0_0), .Mout_data_ram_size(sig_in_bus_mergerMout_data_ram_size2_0), .clock(clock), .in1(out_MUX_4_BMEMORY_CTRL_61_i0_0_2_0), .in2(out_MUX_5_BMEMORY_CTRL_61_i0_1_2_0), .in3(out_conv_out_const_3_5_4), .in4(out_const_5), .sel_LOAD(fuselector_BMEMORY_CTRL_61_i0_LOAD), .sel_STORE(fuselector_BMEMORY_CTRL_61_i0_STORE), .Min_oe_ram(Min_oe_ram), .Min_we_ram(Min_we_ram), .Min_addr_ram(Min_addr_ram), .M_Rdata_ram(M_Rdata_ram), .Min_Wdata_ram(Min_Wdata_ram), .Min_data_ram_size(Min_data_ram_size), .M_DataRdy(M_DataRdy));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_2 (.out1(out_iu_conv_conn_obj_1_IUdata_converter_FU_iu_conv_2), .in1(out_reg_8_reg_8));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_3 (.out1(out_iu_conv_conn_obj_10_IUdata_converter_FU_iu_conv_3), .in1(out_reg_60_reg_60));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_4 (.out1(out_iu_conv_conn_obj_11_IUdata_converter_FU_iu_conv_4), .in1(out_reg_61_reg_61));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_5 (.out1(out_iu_conv_conn_obj_12_IUdata_converter_FU_iu_conv_5), .in1(out_reg_62_reg_62));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_6 (.out1(out_iu_conv_conn_obj_13_IUdata_converter_FU_iu_conv_6), .in1(out_reg_63_reg_63));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_7 (.out1(out_iu_conv_conn_obj_2_IUdata_converter_FU_iu_conv_7), .in1(out_reg_53_reg_53));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_8 (.out1(out_iu_conv_conn_obj_3_IUdata_converter_FU_iu_conv_8), .in1(out_reg_53_reg_53));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) IUdata_converter_FU_iu_conv_9 (.out1(out_iu_conv_conn_obj_4_IUdata_converter_FU_iu_conv_9), .in1(out_reg_8_reg_8));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_102_reg_29_0_0_0 (.out1(out_MUX_102_reg_29_0_0_0), .sel(selector_MUX_102_reg_29_0_0_0), .in1(out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8), .in2(out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_104_reg_30_0_0_0 (.out1(out_MUX_104_reg_30_0_0_0), .sel(selector_MUX_104_reg_30_0_0_0), .in1(out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8), .in2(out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_106_reg_32_0_0_0 (.out1(out_MUX_106_reg_32_0_0_0), .sel(selector_MUX_106_reg_32_0_0_0), .in1(out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8), .in2(out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_107_reg_33_0_0_0 (.out1(out_MUX_107_reg_33_0_0_0), .sel(selector_MUX_107_reg_33_0_0_0), .in1(out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8), .in2(out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_108_reg_34_0_0_0 (.out1(out_MUX_108_reg_34_0_0_0), .sel(selector_MUX_108_reg_34_0_0_0), .in1(out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8), .in2(out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_109_reg_35_0_0_0 (.out1(out_MUX_109_reg_35_0_0_0), .sel(selector_MUX_109_reg_35_0_0_0), .in1(out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8), .in2(out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_110_reg_36_0_0_0 (.out1(out_MUX_110_reg_36_0_0_0), .sel(selector_MUX_110_reg_36_0_0_0), .in1(out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8), .in2(out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_111_reg_37_0_0_0 (.out1(out_MUX_111_reg_37_0_0_0), .sel(selector_MUX_111_reg_37_0_0_0), .in1(out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8), .in2(out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_112_reg_38_0_0_0 (.out1(out_MUX_112_reg_38_0_0_0), .sel(selector_MUX_112_reg_38_0_0_0), .in1(out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8), .in2(out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_113_reg_39_0_0_0 (.out1(out_MUX_113_reg_39_0_0_0), .sel(selector_MUX_113_reg_39_0_0_0), .in1(out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8), .in2(out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_115_reg_40_0_0_0 (.out1(out_MUX_115_reg_40_0_0_0), .sel(selector_MUX_115_reg_40_0_0_0), .in1(out_conv_out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15_1_8), .in2(out_ui_bit_ior_concat_expr_FU_71_i2_fu_fft_28867_29429));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_116_reg_41_0_0_0 (.out1(out_MUX_116_reg_41_0_0_0), .sel(selector_MUX_116_reg_41_0_0_0), .in1(out_reg_40_reg_40), .in2(out_ui_bit_ior_concat_expr_FU_72_i0_fu_fft_28867_29415));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_131_reg_55_0_0_0 (.out1(out_MUX_131_reg_55_0_0_0), .sel(selector_MUX_131_reg_55_0_0_0), .in1(out_ASSIGN_SIGNED_FU_36_i0_fu_fft_28867_32510), .in2(out_ASSIGN_SIGNED_FU_37_i0_fu_fft_28867_32512));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_143_reg_9_0_0_0 (.out1(out_MUX_143_reg_9_0_0_0), .sel(selector_MUX_143_reg_9_0_0_0), .in1(out_reg_0_reg_0), .in2(out_conv_out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11_7_8));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0 (.out1(out_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0), .sel(selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0), .in1(out_reg_20_reg_20), .in2(out_reg_17_reg_17));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0 (.out1(out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0), .sel(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0), .in1(out_reg_17_reg_17), .in2(out_reg_16_reg_16));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1 (.out1(out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1), .sel(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1), .in1(out_const_1), .in2(out_const_8));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 (.out1(out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0), .sel(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0), .in1(out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0), .in2(out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1));
  MUX_GATE #(.BITSIZE_in1(64), .BITSIZE_in2(64), .BITSIZE_out1(64)) MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0 (.out1(out_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0), .sel(selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0), .in1(out_reg_27_reg_27), .in2(out_reg_20_reg_20));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0 (.out1(out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0), .sel(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0), .in1(out_conv_out_reg_26_reg_26_I_8_I_32), .in2(out_conv_out_reg_18_reg_18_I_8_I_32));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1 (.out1(out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1), .sel(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1), .in1(out_conv_out_reg_13_reg_13_I_9_I_32), .in2(out_conv_out_const_0_I_1_I_32));
  MUX_GATE #(.BITSIZE_in1(32), .BITSIZE_in2(32), .BITSIZE_out1(32)) MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 (.out1(out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0), .sel(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0), .in1(out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0), .in2(out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_0_0 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_0), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0), .in1(out_iu_conv_conn_obj_1_IUdata_converter_FU_iu_conv_2), .in2(out_iu_conv_conn_obj_10_IUdata_converter_FU_iu_conv_3));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_0_1 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_1), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1), .in1(out_iu_conv_conn_obj_11_IUdata_converter_FU_iu_conv_4), .in2(out_iu_conv_conn_obj_12_IUdata_converter_FU_iu_conv_5));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_0_2 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_2), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2), .in1(out_iu_conv_conn_obj_13_IUdata_converter_FU_iu_conv_6), .in2(out_iu_conv_conn_obj_2_IUdata_converter_FU_iu_conv_7));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_0_3 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_3), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3), .in1(out_iu_conv_conn_obj_3_IUdata_converter_FU_iu_conv_8), .in2(out_iu_conv_conn_obj_4_IUdata_converter_FU_iu_conv_9));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_1_0 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_1_0), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0), .in1(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_0), .in2(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_1));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_1_1 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_1_1), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1), .in1(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_2), .in2(out_MUX_4_BMEMORY_CTRL_61_i0_0_0_3));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_4_BMEMORY_CTRL_61_i0_0_2_0 (.out1(out_MUX_4_BMEMORY_CTRL_61_i0_0_2_0), .sel(selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0), .in1(out_MUX_4_BMEMORY_CTRL_61_i0_0_1_0), .in2(out_MUX_4_BMEMORY_CTRL_61_i0_0_1_1));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_0_0 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_0), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0), .in1(out_conv_out_reg_6_reg_6_10_7), .in2(out_conv_out_reg_51_reg_51_10_7));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_0_1 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_1), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1), .in1(out_conv_out_reg_5_reg_5_9_7), .in2(out_conv_out_reg_45_reg_45_10_7));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_0_2 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_2), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2), .in1(out_conv_out_reg_44_reg_44_9_7), .in2(out_conv_out_reg_42_reg_42_9_7));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_0_3 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_3), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3), .in1(out_conv_out_reg_4_reg_4_10_7), .in2(out_conv_out_reg_3_reg_3_9_7));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_1_0 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_1_0), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0), .in1(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_0), .in2(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_1));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_1_1 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_1_1), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1), .in1(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_2), .in2(out_MUX_5_BMEMORY_CTRL_61_i0_1_0_3));
  MUX_GATE #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) MUX_5_BMEMORY_CTRL_61_i0_1_2_0 (.out1(out_MUX_5_BMEMORY_CTRL_61_i0_1_2_0), .sel(selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0), .in1(out_MUX_5_BMEMORY_CTRL_61_i0_1_1_0), .in2(out_MUX_5_BMEMORY_CTRL_61_i0_1_1_1));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_69_mysin_99_i0_0_0_0 (.out1(out_MUX_69_mysin_99_i0_0_0_0), .sel(selector_MUX_69_mysin_99_i0_0_0_0), .in1(out_reg_23_reg_23), .in2(out_reg_19_reg_19));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_82_reg_10_0_0_0 (.out1(out_MUX_82_reg_10_0_0_0), .sel(selector_MUX_82_reg_10_0_0_0), .in1(out_conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10_1_8), .in2(out_ui_minus_expr_FU_8_8_8_85_i0_fu_fft_28867_29218));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_82_reg_10_0_0_1 (.out1(out_MUX_82_reg_10_0_0_1), .sel(selector_MUX_82_reg_10_0_0_1), .in1(out_ui_plus_expr_FU_8_8_8_90_i0_fu_fft_28867_29202), .in2(out_MUX_82_reg_10_0_0_0));
  MUX_GATE #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) MUX_83_reg_11_0_0_0 (.out1(out_MUX_83_reg_11_0_0_0), .sel(selector_MUX_83_reg_11_0_0_0), .in1(out_reg_12_reg_12), .in2(out_conv_out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14_2_8));
  MUX_GATE #(.BITSIZE_in1(9), .BITSIZE_in2(9), .BITSIZE_out1(9)) MUX_92_reg_2_0_0_0 (.out1(out_MUX_92_reg_2_0_0_0), .sel(selector_MUX_92_reg_2_0_0_0), .in1(out_conv_out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12_1_9), .in2(out_u_assign_conn_obj_7_ASSIGN_UNSIGNED_FU_u_assign_13));
  WRAPPED_PROXY_PREF___float64_divSRT4if __float64_divSRT4if_instance (.done_port(s_done___float64_divSRT4if_instance), .return_port(out_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if_instance), .PROXY_PREF_done_port(PROXY_PREF_done_port___float64_divSRT4if), .PROXY_PREF_return_port(PROXY_PREF_return_port___float64_divSRT4if), .clock(clock), .reset(reset), .start_port(selector_IN_UNBOUNDED_fft_28867_29310), .a(out_const_4), .b(out_reg_17_reg_17), .PROXY_PREF_start_port(sig_out_bus_mergerPROXY_PREF_start_port7_), .PROXY_PREF_a(sig_out_bus_mergerPROXY_PREF_a5_), .PROXY_PREF_b(sig_out_bus_mergerPROXY_PREF_b6_), .sel___float64_divSRT4if(fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if));
  WRAPPED_PROXY_PREF___float64_mulif __float64_mulif_instance (.done_port(s_done___float64_mulif_instance), .return_port(out_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif_instance), .PROXY_PREF_done_port(PROXY_PREF_done_port___float64_mulif), .PROXY_PREF_return_port(PROXY_PREF_return_port___float64_mulif), .clock(clock), .reset(reset), .start_port(s___float64_mulif_instance5), .a(out_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0), .b(out_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0), .PROXY_PREF_start_port(sig_out_bus_mergerPROXY_PREF_start_port10_), .PROXY_PREF_a(sig_out_bus_mergerPROXY_PREF_a8_), .PROXY_PREF_b(sig_out_bus_mergerPROXY_PREF_b9_), .sel___float64_mulif(fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif));
  WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif __float64_to_int32_round_to_zeroif_instance (.done_port(s_done___float64_to_int32_round_to_zeroif_instance), .return_port(out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance), .PROXY_PREF_done_port(PROXY_PREF_done_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_return_port(PROXY_PREF_return_port___float64_to_int32_round_to_zeroif), .clock(clock), .reset(reset), .start_port(s___float64_to_int32_round_to_zeroif_instance6), .a(out_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0), .PROXY_PREF_start_port(sig_out_bus_mergerPROXY_PREF_start_port12_), .PROXY_PREF_a(sig_out_bus_mergerPROXY_PREF_a11_), .sel___float64_to_int32_round_to_zeroif(fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif));
  WRAPPED_PROXY_PREF___int32_to_float64if __int32_to_float64if_instance (.done_port(s_done___int32_to_float64if_instance), .return_port(out_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if_instance), .PROXY_PREF_done_port(PROXY_PREF_done_port___int32_to_float64if), .PROXY_PREF_return_port(PROXY_PREF_return_port___int32_to_float64if), .clock(clock), .reset(reset), .start_port(s___int32_to_float64if_instance7), .a(out_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0), .PROXY_PREF_start_port(sig_out_bus_mergerPROXY_PREF_start_port14_), .PROXY_PREF_a(sig_out_bus_mergerPROXY_PREF_a13_), .sel___int32_to_float64if(fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if));
  bus_merger #(.BITSIZE_in1(8), .PORTSIZE_in1(1), .BITSIZE_out1(8)) bus_mergerMout_Wdata_ram0_ (.out1(sig_out_bus_mergerMout_Wdata_ram0_), .in1({sig_in_bus_mergerMout_Wdata_ram0_0}));
  bus_merger #(.BITSIZE_in1(7), .PORTSIZE_in1(1), .BITSIZE_out1(7)) bus_mergerMout_addr_ram1_ (.out1(sig_out_bus_mergerMout_addr_ram1_), .in1({sig_in_bus_mergerMout_addr_ram1_0}));
  bus_merger #(.BITSIZE_in1(4), .PORTSIZE_in1(1), .BITSIZE_out1(4)) bus_mergerMout_data_ram_size2_ (.out1(sig_out_bus_mergerMout_data_ram_size2_), .in1({sig_in_bus_mergerMout_data_ram_size2_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerMout_oe_ram3_ (.out1(sig_out_bus_mergerMout_oe_ram3_), .in1({sig_in_bus_mergerMout_oe_ram3_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerMout_we_ram4_ (.out1(sig_out_bus_mergerMout_we_ram4_), .in1({sig_in_bus_mergerMout_we_ram4_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_a11_ (.out1(sig_out_bus_mergerPROXY_PREF_a11_), .in1({sig_in_bus_mergerPROXY_PREF_a11_0}));
  bus_merger #(.BITSIZE_in1(32), .PORTSIZE_in1(1), .BITSIZE_out1(32)) bus_mergerPROXY_PREF_a13_ (.out1(sig_out_bus_mergerPROXY_PREF_a13_), .in1({sig_in_bus_mergerPROXY_PREF_a13_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_a5_ (.out1(sig_out_bus_mergerPROXY_PREF_a5_), .in1({sig_in_bus_mergerPROXY_PREF_a5_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_a8_ (.out1(sig_out_bus_mergerPROXY_PREF_a8_), .in1({sig_in_bus_mergerPROXY_PREF_a8_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_b6_ (.out1(sig_out_bus_mergerPROXY_PREF_b6_), .in1({sig_in_bus_mergerPROXY_PREF_b6_0}));
  bus_merger #(.BITSIZE_in1(64), .PORTSIZE_in1(1), .BITSIZE_out1(64)) bus_mergerPROXY_PREF_b9_ (.out1(sig_out_bus_mergerPROXY_PREF_b9_), .in1({sig_in_bus_mergerPROXY_PREF_b9_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port10_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port10_), .in1({sig_in_bus_mergerPROXY_PREF_start_port10_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port12_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port12_), .in1({sig_in_bus_mergerPROXY_PREF_start_port12_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port14_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port14_), .in1({sig_in_bus_mergerPROXY_PREF_start_port14_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerPROXY_PREF_start_port7_ (.out1(sig_out_bus_mergerPROXY_PREF_start_port7_), .in1({sig_in_bus_mergerPROXY_PREF_start_port7_0}));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(64), .value(64'b0011111111100000000000000000000000000000000000000000000000000000)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(2), .value(2'b01)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(5), .value(5'b01000)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(64), .value(64'b0100000000011001001000011111101101010100010001000010110100011100)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(2), .value(2'b10)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(2), .value(2'b11)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(64), .value(64'b1100000000000000000000000000000000000000000000000000000000000000)) const_8 (.out1(out_const_8));
  UUdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(7)) conv_in_port_data_32_7 (.out1(out_conv_in_port_data_32_7), .in1(in_port_data));
  UUdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) conv_out_MUX_92_reg_2_0_0_0_9_8 (.out1(out_conv_out_MUX_92_reg_2_0_0_0_9_8), .in1(out_MUX_92_reg_2_0_0_0));
  IUdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(9)) conv_out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance_I_32_9 (.out1(out_conv_out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance_I_32_9), .in1(out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance));
  IIdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(32)) conv_out_const_0_I_1_I_32 (.out1(out_conv_out_const_0_I_1_I_32), .in1(out_const_0));
  UUdata_converter_FU #(.BITSIZE_in1(5), .BITSIZE_out1(4)) conv_out_const_3_5_4 (.out1(out_conv_out_const_3_5_4), .in1(out_const_3));
  IUdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(8)) conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8 (.out1(out_conv_out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0_I_2_8), .in1(out_i_assign_conn_obj_14_ASSIGN_SIGNED_FU_i_assign_0));
  IUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8 (.out1(out_conv_out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1_I_1_8), .in1(out_i_assign_conn_obj_15_ASSIGN_SIGNED_FU_i_assign_1));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(32)) conv_out_reg_13_reg_13_I_9_I_32 (.out1(out_conv_out_reg_13_reg_13_I_9_I_32), .in1(out_reg_13_reg_13));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(32)) conv_out_reg_18_reg_18_I_8_I_32 (.out1(out_conv_out_reg_18_reg_18_I_8_I_32), .in1(out_reg_18_reg_18));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(32)) conv_out_reg_26_reg_26_I_8_I_32 (.out1(out_conv_out_reg_26_reg_26_I_8_I_32), .in1(out_reg_26_reg_26));
  UUdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(7)) conv_out_reg_3_reg_3_9_7 (.out1(out_conv_out_reg_3_reg_3_9_7), .in1(out_reg_3_reg_3));
  UUdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(7)) conv_out_reg_42_reg_42_9_7 (.out1(out_conv_out_reg_42_reg_42_9_7), .in1(out_reg_42_reg_42));
  UUdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(7)) conv_out_reg_44_reg_44_9_7 (.out1(out_conv_out_reg_44_reg_44_9_7), .in1(out_reg_44_reg_44));
  UUdata_converter_FU #(.BITSIZE_in1(10), .BITSIZE_out1(7)) conv_out_reg_45_reg_45_10_7 (.out1(out_conv_out_reg_45_reg_45_10_7), .in1(out_reg_45_reg_45));
  UUdata_converter_FU #(.BITSIZE_in1(10), .BITSIZE_out1(7)) conv_out_reg_4_reg_4_10_7 (.out1(out_conv_out_reg_4_reg_4_10_7), .in1(out_reg_4_reg_4));
  UUdata_converter_FU #(.BITSIZE_in1(10), .BITSIZE_out1(7)) conv_out_reg_51_reg_51_10_7 (.out1(out_conv_out_reg_51_reg_51_10_7), .in1(out_reg_51_reg_51));
  UUdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(7)) conv_out_reg_5_reg_5_9_7 (.out1(out_conv_out_reg_5_reg_5_9_7), .in1(out_reg_5_reg_5));
  UUdata_converter_FU #(.BITSIZE_in1(10), .BITSIZE_out1(7)) conv_out_reg_6_reg_6_10_7 (.out1(out_conv_out_reg_6_reg_6_10_7), .in1(out_reg_6_reg_6));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10_1_8 (.out1(out_conv_out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10_1_8), .in1(out_u_assign_conn_obj_0_ASSIGN_UNSIGNED_FU_u_assign_10));
  UUdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(8)) conv_out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11_7_8 (.out1(out_conv_out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11_7_8), .in1(out_u_assign_conn_obj_5_ASSIGN_UNSIGNED_FU_u_assign_11));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(9)) conv_out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12_1_9 (.out1(out_conv_out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12_1_9), .in1(out_u_assign_conn_obj_6_ASSIGN_UNSIGNED_FU_u_assign_12));
  UUdata_converter_FU #(.BITSIZE_in1(2), .BITSIZE_out1(8)) conv_out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14_2_8 (.out1(out_conv_out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14_2_8), .in1(out_u_assign_conn_obj_8_ASSIGN_UNSIGNED_FU_u_assign_14));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) conv_out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15_1_8 (.out1(out_conv_out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15_1_8), .in1(out_u_assign_conn_obj_9_ASSIGN_UNSIGNED_FU_u_assign_15));
  IUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29180 (.out1(out_IUdata_converter_FU_6_i0_fu_fft_28867_29180), .in1(in_port_nn));
  ui_lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(8)) fu_fft_28867_29181 (.out1(out_ui_lshift_expr_FU_8_0_8_79_i0_fu_fft_28867_29181), .in1(out_IUdata_converter_FU_6_i0_fu_fft_28867_29180), .in2(out_const_5));
  ui_plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29202 (.out1(out_ui_plus_expr_FU_8_8_8_90_i0_fu_fft_28867_29202), .in1(out_reg_9_reg_9), .in2(out_reg_10_reg_10));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(7), .PRECISION(8)) fu_fft_28867_29210 (.out1(out_ui_rshift_expr_FU_8_0_8_93_i0_fu_fft_28867_29210), .in1(out_reg_9_reg_9), .in2(out_const_2));
  ui_minus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29218 (.out1(out_ui_minus_expr_FU_8_8_8_85_i0_fu_fft_28867_29218), .in1(out_reg_10_reg_10), .in2(out_reg_9_reg_9));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(8), .OFFSET_PARAMETER(1)) fu_fft_28867_29221 (.out1(out_ui_bit_ior_concat_expr_FU_71_i0_fu_fft_28867_29221), .in1(out_ui_lshift_expr_FU_8_0_8_81_i0_fu_fft_28867_30581), .in2(out_const_5), .in3(out_const_5));
  UUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29227 (.out1(out_UUdata_converter_FU_20_i0_fu_fft_28867_29227), .in1(out_reg_2_reg_2));
  UUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29240 (.out1(out_UUdata_converter_FU_21_i0_fu_fft_28867_29240), .in1(out_reg_10_reg_10));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(8), .BITSIZE_out1(9), .LSB_PARAMETER(0)) fu_fft_28867_29241 (.out1(out_ui_pointer_plus_expr_FU_8_8_8_92_i0_fu_fft_28867_29241), .in1(out_conv_in_port_data_32_7), .in2(out_UUdata_converter_FU_21_i0_fu_fft_28867_29240));
  ui_plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(9)) fu_fft_28867_29246 (.out1(out_ui_plus_expr_FU_8_0_8_87_i0_fu_fft_28867_29246), .in1(out_UUdata_converter_FU_21_i0_fu_fft_28867_29240), .in2(out_const_5));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(9), .BITSIZE_out1(10), .LSB_PARAMETER(0)) fu_fft_28867_29247 (.out1(out_ui_pointer_plus_expr_FU_16_16_16_91_i0_fu_fft_28867_29247), .in1(out_conv_in_port_data_32_7), .in2(out_ui_plus_expr_FU_8_0_8_87_i0_fu_fft_28867_29246));
  ui_gt_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu_fft_28867_29292 (.out1(out_ui_gt_expr_FU_8_0_8_74_i0_fu_fft_28867_29292), .in1(out_reg_9_reg_9), .in2(out_const_5));
  ui_gt_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(1)) fu_fft_28867_29293 (.out1(out_ui_gt_expr_FU_8_8_8_75_i0_fu_fft_28867_29293), .in1(out_reg_10_reg_10), .in2(out_reg_9_reg_9));
  ui_bit_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu_fft_28867_29294 (.out1(out_ui_bit_and_expr_FU_1_1_1_69_i0_fu_fft_28867_29294), .in1(out_ui_gt_expr_FU_8_8_8_75_i0_fu_fft_28867_29293), .in2(out_ui_gt_expr_FU_8_0_8_74_i0_fu_fft_28867_29292));
  read_cond_FU #(.BITSIZE_in1(1)) fu_fft_28867_29295 (.out1(out_read_cond_FU_14_i0_fu_fft_28867_29295), .in1(out_ui_bit_and_expr_FU_1_1_1_69_i0_fu_fft_28867_29294));
  ui_lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(8)) fu_fft_28867_29305 (.out1(out_ui_lshift_expr_FU_8_0_8_79_i1_fu_fft_28867_29305), .in1(out_reg_11_reg_11), .in2(out_const_5));
  UIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(9)) fu_fft_28867_29308 (.out1(out_UIdata_converter_FU_57_i0_fu_fft_28867_29308), .in1(out_reg_11_reg_11));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(9)) fu_fft_28867_29316 (.out1(out_IIdata_converter_FU_27_i0_fu_fft_28867_29316), .in1(out_IIdata_converter_FU_26_i0_fu_fft_28867_29969));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(9)) fu_fft_28867_29322 (.out1(out_IIdata_converter_FU_32_i0_fu_fft_28867_29322), .in1(out_IIdata_converter_FU_24_i0_fu_fft_28867_29962));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(8), .OFFSET_PARAMETER(1)) fu_fft_28867_29386 (.out1(out_ui_bit_ior_concat_expr_FU_71_i1_fu_fft_28867_29386), .in1(out_ui_lshift_expr_FU_8_0_8_82_i0_fu_fft_28867_30596), .in2(out_const_5), .in3(out_const_5));
  UUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29387 (.out1(out_UUdata_converter_FU_43_i0_fu_fft_28867_29387), .in1(out_ui_bit_ior_concat_expr_FU_71_i1_fu_fft_28867_29386));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(8), .BITSIZE_out1(9), .LSB_PARAMETER(0)) fu_fft_28867_29388 (.out1(out_ui_pointer_plus_expr_FU_8_8_8_92_i1_fu_fft_28867_29388), .in1(out_conv_in_port_data_32_7), .in2(out_UUdata_converter_FU_43_i0_fu_fft_28867_29387));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29390 (.out1(out_mult_expr_FU_8_8_8_0_63_i0_fu_fft_28867_29390), .clock(clock), .in1(out_reg_53_reg_53), .in2(out_reg_29_reg_29));
  ui_plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(9)) fu_fft_28867_29391 (.out1(out_ui_plus_expr_FU_8_0_8_87_i1_fu_fft_28867_29391), .in1(out_UUdata_converter_FU_43_i0_fu_fft_28867_29387), .in2(out_const_5));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(9), .BITSIZE_out1(10), .LSB_PARAMETER(0)) fu_fft_28867_29392 (.out1(out_ui_pointer_plus_expr_FU_16_16_16_91_i1_fu_fft_28867_29392), .in1(out_conv_in_port_data_32_7), .in2(out_reg_43_reg_43));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29394 (.out1(out_mult_expr_FU_8_8_8_0_63_i1_fu_fft_28867_29394), .clock(clock), .in1(out_reg_53_reg_53), .in2(out_reg_30_reg_30));
  minus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29395 (.out1(out_minus_expr_FU_8_8_8_62_i0_fu_fft_28867_29395), .in1(out_reg_52_reg_52), .in2(out_reg_56_reg_56));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29396 (.out1(out_mult_expr_FU_8_8_8_0_63_i2_fu_fft_28867_29396), .clock(clock), .in1(out_reg_55_reg_55), .in2(out_reg_32_reg_32));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29397 (.out1(out_mult_expr_FU_8_8_8_0_63_i3_fu_fft_28867_29397), .clock(clock), .in1(out_reg_55_reg_55), .in2(out_reg_36_reg_36));
  plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29398 (.out1(out_plus_expr_FU_8_8_8_64_i0_fu_fft_28867_29398), .in1(out_reg_57_reg_57), .in2(out_reg_54_reg_54));
  UUdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29399 (.out1(out_UUdata_converter_FU_44_i0_fu_fft_28867_29399), .in1(out_reg_41_reg_41));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(8), .BITSIZE_out1(9), .LSB_PARAMETER(0)) fu_fft_28867_29400 (.out1(out_ui_pointer_plus_expr_FU_8_8_8_92_i2_fu_fft_28867_29400), .in1(out_conv_in_port_data_32_7), .in2(out_UUdata_converter_FU_44_i0_fu_fft_28867_29399));
  minus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29402 (.out1(out_minus_expr_FU_8_8_8_62_i1_fu_fft_28867_29402), .in1(out_reg_53_reg_53), .in2(out_minus_expr_FU_8_8_8_62_i0_fu_fft_28867_29395));
  ui_plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(9)) fu_fft_28867_29404 (.out1(out_ui_plus_expr_FU_8_0_8_87_i2_fu_fft_28867_29404), .in1(out_UUdata_converter_FU_44_i0_fu_fft_28867_29399), .in2(out_const_5));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(9), .BITSIZE_out1(10), .LSB_PARAMETER(0)) fu_fft_28867_29405 (.out1(out_ui_pointer_plus_expr_FU_16_16_16_91_i2_fu_fft_28867_29405), .in1(out_conv_in_port_data_32_7), .in2(out_ui_plus_expr_FU_8_0_8_87_i2_fu_fft_28867_29404));
  minus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29407 (.out1(out_minus_expr_FU_8_8_8_62_i2_fu_fft_28867_29407), .in1(out_reg_53_reg_53), .in2(out_reg_59_reg_59));
  plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29410 (.out1(out_plus_expr_FU_8_8_8_64_i1_fu_fft_28867_29410), .in1(out_reg_58_reg_58), .in2(out_reg_53_reg_53));
  plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8)) fu_fft_28867_29413 (.out1(out_plus_expr_FU_8_8_8_64_i2_fu_fft_28867_29413), .in1(out_reg_59_reg_59), .in2(out_reg_53_reg_53));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_in3(2), .BITSIZE_out1(8), .OFFSET_PARAMETER(2)) fu_fft_28867_29415 (.out1(out_ui_bit_ior_concat_expr_FU_72_i0_fu_fft_28867_29415), .in1(out_ui_lshift_expr_FU_8_0_8_83_i0_fu_fft_28867_30614), .in2(out_ui_bit_and_expr_FU_8_0_8_70_i0_fu_fft_28867_30617), .in3(out_const_6));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(8), .OFFSET_PARAMETER(1)) fu_fft_28867_29429 (.out1(out_ui_bit_ior_concat_expr_FU_71_i2_fu_fft_28867_29429), .in1(out_ui_lshift_expr_FU_8_0_8_82_i1_fu_fft_28867_30627), .in2(out_const_5), .in3(out_const_5));
  ternary_mp_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu_fft_28867_29453 (.out1(out_ternary_mp_expr_FU_8_8_8_8_65_i0_fu_fft_28867_29453), .in1(out_reg_47_reg_47), .in2(out_reg_48_reg_48), .in3(out_reg_33_reg_33));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29460 (.out1(out_mult_expr_FU_8_8_8_0_63_i4_fu_fft_28867_29460), .clock(clock), .in1(out_reg_34_reg_34), .in2(out_reg_28_reg_28));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29462 (.out1(out_mult_expr_FU_8_8_8_0_63_i5_fu_fft_28867_29462), .clock(clock), .in1(out_reg_37_reg_37), .in2(out_reg_22_reg_22));
  ternary_plus_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_in3(8), .BITSIZE_out1(8)) fu_fft_28867_29469 (.out1(out_ternary_plus_expr_FU_8_8_8_8_66_i0_fu_fft_28867_29469), .in1(out_reg_49_reg_49), .in2(out_reg_50_reg_50), .in3(out_reg_38_reg_38));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29476 (.out1(out_mult_expr_FU_8_8_8_0_63_i6_fu_fft_28867_29476), .clock(clock), .in1(out_reg_39_reg_39), .in2(out_reg_31_reg_31));
  mult_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(8), .PIPE_PARAMETER(0)) fu_fft_28867_29478 (.out1(out_mult_expr_FU_8_8_8_0_63_i7_fu_fft_28867_29478), .clock(clock), .in1(out_reg_35_reg_35), .in2(out_reg_25_reg_25));
  read_cond_FU #(.BITSIZE_in1(1)) fu_fft_28867_29527 (.out1(out_read_cond_FU_45_i0_fu_fft_28867_29527), .in1(out_reg_46_reg_46));
  read_cond_FU #(.BITSIZE_in1(1)) fu_fft_28867_29529 (.out1(out_read_cond_FU_56_i0_fu_fft_28867_29529), .in1(out_ui_lt_expr_FU_8_8_8_84_i1_fu_fft_28867_29638));
  read_cond_FU #(.BITSIZE_in1(1)) fu_fft_28867_29531 (.out1(out_read_cond_FU_59_i0_fu_fft_28867_29531), .in1(out_ui_gt_expr_FU_8_8_8_75_i2_fu_fft_28867_29640));
  ui_bit_ior_concat_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_in3(1), .BITSIZE_out1(8), .OFFSET_PARAMETER(1)) fu_fft_28867_29577 (.out1(out_ui_bit_ior_concat_expr_FU_73_i0_fu_fft_28867_29577), .in1(out_ui_lshift_expr_FU_8_0_8_80_i0_fu_fft_28867_30527), .in2(out_const_5), .in3(out_const_5));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(8), .BITSIZE_out1(9), .LSB_PARAMETER(0)) fu_fft_28867_29580 (.out1(out_ui_pointer_plus_expr_FU_8_8_8_92_i3_fu_fft_28867_29580), .in1(out_conv_in_port_data_32_7), .in2(out_ui_bit_ior_concat_expr_FU_73_i0_fu_fft_28867_29577));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(9), .BITSIZE_out1(10), .LSB_PARAMETER(0)) fu_fft_28867_29600 (.out1(out_ui_pointer_plus_expr_FU_16_16_16_91_i3_fu_fft_28867_29600), .in1(out_conv_in_port_data_32_7), .in2(out_ui_lshift_expr_FU_16_0_16_77_i0_fu_fft_28867_30548));
  ui_gt_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(1)) fu_fft_28867_29630 (.out1(out_ui_gt_expr_FU_8_8_8_75_i1_fu_fft_28867_29630), .in1(out_reg_10_reg_10), .in2(out_ui_bit_ior_concat_expr_FU_71_i0_fu_fft_28867_29221));
  ui_lt_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(1)) fu_fft_28867_29634 (.out1(out_ui_lt_expr_FU_8_8_8_84_i0_fu_fft_28867_29634), .in1(out_ui_bit_ior_concat_expr_FU_71_i0_fu_fft_28867_29221), .in2(out_reg_1_reg_1));
  ui_le_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(1)) fu_fft_28867_29636 (.out1(out_ui_le_expr_FU_8_8_8_76_i0_fu_fft_28867_29636), .in1(out_reg_41_reg_41), .in2(out_reg_1_reg_1));
  ui_lt_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(1)) fu_fft_28867_29638 (.out1(out_ui_lt_expr_FU_8_8_8_84_i1_fu_fft_28867_29638), .in1(out_reg_40_reg_40), .in2(out_reg_11_reg_11));
  ui_gt_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(8), .BITSIZE_out1(1)) fu_fft_28867_29640 (.out1(out_ui_gt_expr_FU_8_8_8_75_i2_fu_fft_28867_29640), .in1(out_reg_1_reg_1), .in2(out_reg_11_reg_11));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(9)) fu_fft_28867_29958 (.out1(out_IIdata_converter_FU_58_i0_fu_fft_28867_29958), .in1(out_UIdata_converter_FU_57_i0_fu_fft_28867_29308));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_fft_28867_29962 (.out1(out_IIdata_converter_FU_24_i0_fu_fft_28867_29962), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29965 (.out1(out_IIdata_converter_FU_25_i0_fu_fft_28867_29965), .in1(out_IIdata_converter_FU_24_i0_fu_fft_28867_29962));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_fft_28867_29969 (.out1(out_IIdata_converter_FU_26_i0_fu_fft_28867_29969), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_fft_28867_29972 (.out1(out_IIdata_converter_FU_28_i0_fu_fft_28867_29972), .in1(out_IIdata_converter_FU_27_i0_fu_fft_28867_29316));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_29975 (.out1(out_IIdata_converter_FU_29_i0_fu_fft_28867_29975), .in1(out_reg_24_reg_24));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_fft_28867_29979 (.out1(out_IIdata_converter_FU_30_i0_fu_fft_28867_29979), .in1(out_reg_21_reg_21));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_fft_28867_29982 (.out1(out_IIdata_converter_FU_33_i0_fu_fft_28867_29982), .in1(out_IIdata_converter_FU_32_i0_fu_fft_28867_29322));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(32)) fu_fft_28867_30520 (.out1(out_ui_rshift_expr_FU_8_0_8_94_i0_fu_fft_28867_30520), .in1(out_reg_2_reg_2), .in2(out_const_5));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(32)) fu_fft_28867_30527 (.out1(out_ui_lshift_expr_FU_8_0_8_80_i0_fu_fft_28867_30527), .in1(out_ui_rshift_expr_FU_8_0_8_94_i0_fu_fft_28867_30520), .in2(out_const_5));
  ui_plus_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(7), .BITSIZE_out1(8)) fu_fft_28867_30544 (.out1(out_ui_plus_expr_FU_0_8_8_86_i0_fu_fft_28867_30544), .in1(out_const_5), .in2(out_ui_rshift_expr_FU_8_0_8_94_i0_fu_fft_28867_30520));
  ui_lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(9), .PRECISION(32)) fu_fft_28867_30548 (.out1(out_ui_lshift_expr_FU_16_0_16_77_i0_fu_fft_28867_30548), .in1(out_ui_plus_expr_FU_0_8_8_86_i0_fu_fft_28867_30544), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(32)) fu_fft_28867_30562 (.out1(out_ui_rshift_expr_FU_8_0_8_95_i0_fu_fft_28867_30562), .in1(out_reg_2_reg_2), .in2(out_const_5));
  ui_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8)) fu_fft_28867_30564 (.out1(out_ui_plus_expr_FU_8_0_8_88_i0_fu_fft_28867_30564), .in1(out_ui_rshift_expr_FU_8_0_8_95_i0_fu_fft_28867_30562), .in2(out_const_5));
  ui_lshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(9), .PRECISION(32)) fu_fft_28867_30567 (.out1(out_ui_lshift_expr_FU_16_0_16_78_i0_fu_fft_28867_30567), .in1(out_ui_plus_expr_FU_8_0_8_88_i0_fu_fft_28867_30564), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(8)) fu_fft_28867_30572 (.out1(out_ui_rshift_expr_FU_8_0_8_96_i0_fu_fft_28867_30572), .in1(out_UUdata_converter_FU_20_i0_fu_fft_28867_29227), .in2(out_const_5));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(8)) fu_fft_28867_30581 (.out1(out_ui_lshift_expr_FU_8_0_8_81_i0_fu_fft_28867_30581), .in1(out_ui_rshift_expr_FU_8_0_8_96_i0_fu_fft_28867_30572), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(8)) fu_fft_28867_30588 (.out1(out_ui_rshift_expr_FU_8_0_8_97_i0_fu_fft_28867_30588), .in1(out_reg_41_reg_41), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(8)) fu_fft_28867_30591 (.out1(out_ui_rshift_expr_FU_8_0_8_97_i1_fu_fft_28867_30591), .in1(out_reg_11_reg_11), .in2(out_const_5));
  ui_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(7), .BITSIZE_out1(7)) fu_fft_28867_30593 (.out1(out_ui_plus_expr_FU_8_8_8_90_i1_fu_fft_28867_30593), .in1(out_ui_rshift_expr_FU_8_0_8_97_i0_fu_fft_28867_30588), .in2(out_reg_14_reg_14));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(8)) fu_fft_28867_30596 (.out1(out_ui_lshift_expr_FU_8_0_8_82_i0_fu_fft_28867_30596), .in1(out_ui_plus_expr_FU_8_8_8_90_i1_fu_fft_28867_30593), .in2(out_const_5));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(6), .PRECISION(8)) fu_fft_28867_30605 (.out1(out_ui_rshift_expr_FU_8_0_8_98_i0_fu_fft_28867_30605), .in1(out_reg_41_reg_41), .in2(out_const_6));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(6), .PRECISION(8)) fu_fft_28867_30609 (.out1(out_ui_rshift_expr_FU_8_0_8_98_i1_fu_fft_28867_30609), .in1(out_ui_lshift_expr_FU_8_0_8_79_i1_fu_fft_28867_29305), .in2(out_const_6));
  ui_plus_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(6), .BITSIZE_out1(6)) fu_fft_28867_30611 (.out1(out_ui_plus_expr_FU_8_8_8_90_i2_fu_fft_28867_30611), .in1(out_ui_rshift_expr_FU_8_0_8_98_i0_fu_fft_28867_30605), .in2(out_reg_15_reg_15));
  ui_lshift_expr_FU #(.BITSIZE_in1(6), .BITSIZE_in2(2), .BITSIZE_out1(8), .PRECISION(8)) fu_fft_28867_30614 (.out1(out_ui_lshift_expr_FU_8_0_8_83_i0_fu_fft_28867_30614), .in1(out_ui_plus_expr_FU_8_8_8_90_i2_fu_fft_28867_30611), .in2(out_const_6));
  ui_bit_and_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(2), .BITSIZE_out1(2)) fu_fft_28867_30617 (.out1(out_ui_bit_and_expr_FU_8_0_8_70_i0_fu_fft_28867_30617), .in1(out_reg_41_reg_41), .in2(out_const_7));
  ui_rshift_expr_FU #(.BITSIZE_in1(8), .BITSIZE_in2(1), .BITSIZE_out1(7), .PRECISION(8)) fu_fft_28867_30622 (.out1(out_ui_rshift_expr_FU_8_0_8_97_i2_fu_fft_28867_30622), .in1(out_reg_40_reg_40), .in2(out_const_5));
  ui_plus_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(7)) fu_fft_28867_30624 (.out1(out_ui_plus_expr_FU_8_0_8_89_i0_fu_fft_28867_30624), .in1(out_ui_rshift_expr_FU_8_0_8_97_i2_fu_fft_28867_30622), .in2(out_const_5));
  ui_lshift_expr_FU #(.BITSIZE_in1(7), .BITSIZE_in2(1), .BITSIZE_out1(8), .PRECISION(8)) fu_fft_28867_30627 (.out1(out_ui_lshift_expr_FU_8_0_8_82_i1_fu_fft_28867_30627), .in1(out_ui_plus_expr_FU_8_0_8_89_i0_fu_fft_28867_30624), .in2(out_const_5));
  multi_read_cond_FU #(.BITSIZE_in1(1), .PORTSIZE_in1(2), .BITSIZE_out1(2)) fu_fft_28867_32498 (.out1(out_multi_read_cond_FU_22_i0_fu_fft_28867_32498), .in1({out_truth_and_expr_FU_1_1_1_67_i0_fu_fft_28867_32504, out_truth_not_expr_FU_1_1_68_i0_fu_fft_28867_32501}));
  truth_not_expr_FU #(.BITSIZE_in1(1), .BITSIZE_out1(1)) fu_fft_28867_32501 (.out1(out_truth_not_expr_FU_1_1_68_i0_fu_fft_28867_32501), .in1(out_ui_lt_expr_FU_8_8_8_84_i0_fu_fft_28867_29634));
  truth_and_expr_FU #(.BITSIZE_in1(1), .BITSIZE_in2(1), .BITSIZE_out1(1)) fu_fft_28867_32504 (.out1(out_truth_and_expr_FU_1_1_1_67_i0_fu_fft_28867_32504), .in1(out_ui_lt_expr_FU_8_8_8_84_i0_fu_fft_28867_29634), .in2(out_ui_gt_expr_FU_8_8_8_75_i1_fu_fft_28867_29630));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_32506 (.out1(out_ASSIGN_SIGNED_FU_31_i0_fu_fft_28867_32506), .in1(out_IIdata_converter_FU_30_i0_fu_fft_28867_29979));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_32508 (.out1(out_ASSIGN_SIGNED_FU_34_i0_fu_fft_28867_32508), .in1(out_reg_22_reg_22));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_32510 (.out1(out_ASSIGN_SIGNED_FU_36_i0_fu_fft_28867_32510), .in1(out_BMEMORY_CTRL_61_i0_BMEMORY_CTRL_61_i0));
  ASSIGN_SIGNED_FU #(.BITSIZE_in1(8), .BITSIZE_out1(8)) fu_fft_28867_32512 (.out1(out_ASSIGN_SIGNED_FU_37_i0_fu_fft_28867_32512), .in1(out_BMEMORY_CTRL_61_i0_BMEMORY_CTRL_61_i0));
  mysin mysin_99_i0 (.done_port(s_done_mysin_99_i0), .return_port(out_mysin_99_i0_mysin_99_i0), .PROXY_PREF_start_port___float64_divSRT4if(sig_in_bus_mergerPROXY_PREF_start_port7_0), .PROXY_PREF_a___float64_divSRT4if(sig_in_bus_mergerPROXY_PREF_a5_0), .PROXY_PREF_b___float64_divSRT4if(sig_in_bus_mergerPROXY_PREF_b6_0), .PROXY_PREF_start_port___float64_mulif(sig_in_bus_mergerPROXY_PREF_start_port10_0), .PROXY_PREF_a___float64_mulif(sig_in_bus_mergerPROXY_PREF_a8_0), .PROXY_PREF_b___float64_mulif(sig_in_bus_mergerPROXY_PREF_b9_0), .PROXY_PREF_start_port___float64_to_int32_round_to_zeroif(sig_in_bus_mergerPROXY_PREF_start_port12_0), .PROXY_PREF_a___float64_to_int32_round_to_zeroif(sig_in_bus_mergerPROXY_PREF_a11_0), .PROXY_PREF_start_port___int32_to_float64if(sig_in_bus_mergerPROXY_PREF_start_port14_0), .PROXY_PREF_a___int32_to_float64if(sig_in_bus_mergerPROXY_PREF_a13_0), .clock(clock), .reset(reset), .start_port(s_mysin_99_i08), .rad(out_MUX_69_mysin_99_i0_0_0_0), .PROXY_PREF_done_port___float64_divSRT4if(PROXY_PREF_done_port___float64_divSRT4if), .PROXY_PREF_return_port___float64_divSRT4if(PROXY_PREF_return_port___float64_divSRT4if), .PROXY_PREF_done_port___float64_mulif(PROXY_PREF_done_port___float64_mulif), .PROXY_PREF_return_port___float64_mulif(PROXY_PREF_return_port___float64_mulif), .PROXY_PREF_done_port___float64_to_int32_round_to_zeroif(PROXY_PREF_done_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_return_port___float64_to_int32_round_to_zeroif(PROXY_PREF_return_port___float64_to_int32_round_to_zeroif), .PROXY_PREF_done_port___int32_to_float64if(PROXY_PREF_done_port___int32_to_float64if), .PROXY_PREF_return_port___int32_to_float64if(PROXY_PREF_return_port___int32_to_float64if));
  or or_or___float64_mulif_instance5( s___float64_mulif_instance5, selector_IN_UNBOUNDED_fft_28867_29311, selector_IN_UNBOUNDED_fft_28867_29314, selector_IN_UNBOUNDED_fft_28867_29319, selector_IN_UNBOUNDED_fft_28867_29320);
  or or_or___float64_to_int32_round_to_zeroif_instance6( s___float64_to_int32_round_to_zeroif_instance6, selector_IN_UNBOUNDED_fft_28867_29312, selector_IN_UNBOUNDED_fft_28867_29315, selector_IN_UNBOUNDED_fft_28867_29321);
  or or_or___int32_to_float64if_instance7( s___int32_to_float64if_instance7, selector_IN_UNBOUNDED_fft_28867_29307, selector_IN_UNBOUNDED_fft_28867_29309, selector_IN_UNBOUNDED_fft_28867_29313, selector_IN_UNBOUNDED_fft_28867_29318);
  or or_or_mysin_99_i08( s_mysin_99_i08, selector_IN_UNBOUNDED_fft_28867_29317, selector_IN_UNBOUNDED_fft_28867_29323);
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_IUdata_converter_FU_6_i0_fu_fft_28867_29180), .wenable(wrenable_reg_0));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_8_0_8_79_i0_fu_fft_28867_29181), .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_10 (.out1(out_reg_10_reg_10), .clock(clock), .reset(reset), .in1(out_MUX_82_reg_10_0_0_1), .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_11 (.out1(out_reg_11_reg_11), .clock(clock), .reset(reset), .in1(out_MUX_83_reg_11_0_0_0), .wenable(wrenable_reg_11));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_12 (.out1(out_reg_12_reg_12), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_8_0_8_79_i1_fu_fft_28867_29305), .wenable(wrenable_reg_12));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_13 (.out1(out_reg_13_reg_13), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_58_i0_fu_fft_28867_29958), .wenable(wrenable_reg_13));
  register_SE #(.BITSIZE_in1(7), .BITSIZE_out1(7)) reg_14 (.out1(out_reg_14_reg_14), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_8_0_8_97_i1_fu_fft_28867_30591), .wenable(wrenable_reg_14));
  register_SE #(.BITSIZE_in1(6), .BITSIZE_out1(6)) reg_15 (.out1(out_reg_15_reg_15), .clock(clock), .reset(reset), .in1(out_ui_rshift_expr_FU_8_0_8_98_i1_fu_fft_28867_30609), .wenable(wrenable_reg_15));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_16 (.out1(out_reg_16_reg_16), .clock(clock), .reset(reset), .in1(out_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if_instance), .wenable(wrenable_reg_16));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_17 (.out1(out_reg_17_reg_17), .clock(clock), .reset(reset), .in1(out_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if_instance), .wenable(wrenable_reg_17));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_18 (.out1(out_reg_18_reg_18), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_25_i0_fu_fft_28867_29965), .wenable(wrenable_reg_18));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_19 (.out1(out_reg_19_reg_19), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_33_i0_fu_fft_28867_29982), .wenable(wrenable_reg_19));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_2 (.out1(out_reg_2_reg_2), .clock(clock), .reset(reset), .in1(out_conv_out_MUX_92_reg_2_0_0_0_9_8), .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_20 (.out1(out_reg_20_reg_20), .clock(clock), .reset(reset), .in1(out_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif_instance), .wenable(wrenable_reg_20));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_21 (.out1(out_reg_21_reg_21), .clock(clock), .reset(reset), .in1(out_conv_out_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif_instance_I_32_9), .wenable(wrenable_reg_21));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_22 (.out1(out_reg_22_reg_22), .clock(clock), .reset(reset), .in1(out_mysin_99_i0_mysin_99_i0), .wenable(wrenable_reg_22));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_23 (.out1(out_reg_23_reg_23), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_28_i0_fu_fft_28867_29972), .wenable(wrenable_reg_23));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_24 (.out1(out_reg_24_reg_24), .clock(clock), .reset(reset), .in1(out_mysin_99_i0_mysin_99_i0), .wenable(wrenable_reg_24));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_25 (.out1(out_reg_25_reg_25), .clock(clock), .reset(reset), .in1(out_ASSIGN_SIGNED_FU_34_i0_fu_fft_28867_32508), .wenable(wrenable_reg_25));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_26 (.out1(out_reg_26_reg_26), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_29_i0_fu_fft_28867_29975), .wenable(wrenable_reg_26));
  register_SE #(.BITSIZE_in1(64), .BITSIZE_out1(64)) reg_27 (.out1(out_reg_27_reg_27), .clock(clock), .reset(reset), .in1(out_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif_instance), .wenable(wrenable_reg_27));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_28 (.out1(out_reg_28_reg_28), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_30_i0_fu_fft_28867_29979), .wenable(wrenable_reg_28));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_29 (.out1(out_reg_29_reg_29), .clock(clock), .reset(reset), .in1(out_MUX_102_reg_29_0_0_0), .wenable(wrenable_reg_29));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_3 (.out1(out_reg_3_reg_3), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_8_8_8_92_i0_fu_fft_28867_29241), .wenable(wrenable_reg_3));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_30 (.out1(out_reg_30_reg_30), .clock(clock), .reset(reset), .in1(out_MUX_104_reg_30_0_0_0), .wenable(wrenable_reg_30));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_31 (.out1(out_reg_31_reg_31), .clock(clock), .reset(reset), .in1(out_ASSIGN_SIGNED_FU_31_i0_fu_fft_28867_32506), .wenable(wrenable_reg_31));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_32 (.out1(out_reg_32_reg_32), .clock(clock), .reset(reset), .in1(out_MUX_106_reg_32_0_0_0), .wenable(wrenable_reg_32));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_33 (.out1(out_reg_33_reg_33), .clock(clock), .reset(reset), .in1(out_MUX_107_reg_33_0_0_0), .wenable(wrenable_reg_33));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_34 (.out1(out_reg_34_reg_34), .clock(clock), .reset(reset), .in1(out_MUX_108_reg_34_0_0_0), .wenable(wrenable_reg_34));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_35 (.out1(out_reg_35_reg_35), .clock(clock), .reset(reset), .in1(out_MUX_109_reg_35_0_0_0), .wenable(wrenable_reg_35));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_36 (.out1(out_reg_36_reg_36), .clock(clock), .reset(reset), .in1(out_MUX_110_reg_36_0_0_0), .wenable(wrenable_reg_36));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_37 (.out1(out_reg_37_reg_37), .clock(clock), .reset(reset), .in1(out_MUX_111_reg_37_0_0_0), .wenable(wrenable_reg_37));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_38 (.out1(out_reg_38_reg_38), .clock(clock), .reset(reset), .in1(out_MUX_112_reg_38_0_0_0), .wenable(wrenable_reg_38));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_39 (.out1(out_reg_39_reg_39), .clock(clock), .reset(reset), .in1(out_MUX_113_reg_39_0_0_0), .wenable(wrenable_reg_39));
  register_SE #(.BITSIZE_in1(10), .BITSIZE_out1(10)) reg_4 (.out1(out_reg_4_reg_4), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_16_16_16_91_i0_fu_fft_28867_29247), .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_40 (.out1(out_reg_40_reg_40), .clock(clock), .reset(reset), .in1(out_MUX_115_reg_40_0_0_0), .wenable(wrenable_reg_40));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_41 (.out1(out_reg_41_reg_41), .clock(clock), .reset(reset), .in1(out_MUX_116_reg_41_0_0_0), .wenable(wrenable_reg_41));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_42 (.out1(out_reg_42_reg_42), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_8_8_8_92_i1_fu_fft_28867_29388), .wenable(wrenable_reg_42));
  register_STD #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_43 (.out1(out_reg_43_reg_43), .clock(clock), .reset(reset), .in1(out_ui_plus_expr_FU_8_0_8_87_i1_fu_fft_28867_29391), .wenable(wrenable_reg_43));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_44 (.out1(out_reg_44_reg_44), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_8_8_8_92_i2_fu_fft_28867_29400), .wenable(wrenable_reg_44));
  register_SE #(.BITSIZE_in1(10), .BITSIZE_out1(10)) reg_45 (.out1(out_reg_45_reg_45), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_16_16_16_91_i2_fu_fft_28867_29405), .wenable(wrenable_reg_45));
  register_STD #(.BITSIZE_in1(1), .BITSIZE_out1(1)) reg_46 (.out1(out_reg_46_reg_46), .clock(clock), .reset(reset), .in1(out_ui_le_expr_FU_8_8_8_76_i0_fu_fft_28867_29636), .wenable(wrenable_reg_46));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_47 (.out1(out_reg_47_reg_47), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i4_fu_fft_28867_29460), .wenable(wrenable_reg_47));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_48 (.out1(out_reg_48_reg_48), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i5_fu_fft_28867_29462), .wenable(wrenable_reg_48));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_49 (.out1(out_reg_49_reg_49), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i6_fu_fft_28867_29476), .wenable(wrenable_reg_49));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_5 (.out1(out_reg_5_reg_5), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_8_8_8_92_i3_fu_fft_28867_29580), .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_50 (.out1(out_reg_50_reg_50), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i7_fu_fft_28867_29478), .wenable(wrenable_reg_50));
  register_SE #(.BITSIZE_in1(10), .BITSIZE_out1(10)) reg_51 (.out1(out_reg_51_reg_51), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_16_16_16_91_i1_fu_fft_28867_29392), .wenable(wrenable_reg_51));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_52 (.out1(out_reg_52_reg_52), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i0_fu_fft_28867_29390), .wenable(wrenable_reg_52));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_53 (.out1(out_reg_53_reg_53), .clock(clock), .reset(reset), .in1(out_BMEMORY_CTRL_61_i0_BMEMORY_CTRL_61_i0), .wenable(wrenable_reg_53));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_54 (.out1(out_reg_54_reg_54), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i3_fu_fft_28867_29397), .wenable(wrenable_reg_54));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_55 (.out1(out_reg_55_reg_55), .clock(clock), .reset(reset), .in1(out_MUX_131_reg_55_0_0_0), .wenable(wrenable_reg_55));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_56 (.out1(out_reg_56_reg_56), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i1_fu_fft_28867_29394), .wenable(wrenable_reg_56));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_57 (.out1(out_reg_57_reg_57), .clock(clock), .reset(reset), .in1(out_mult_expr_FU_8_8_8_0_63_i2_fu_fft_28867_29396), .wenable(wrenable_reg_57));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_58 (.out1(out_reg_58_reg_58), .clock(clock), .reset(reset), .in1(out_minus_expr_FU_8_8_8_62_i0_fu_fft_28867_29395), .wenable(wrenable_reg_58));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_59 (.out1(out_reg_59_reg_59), .clock(clock), .reset(reset), .in1(out_plus_expr_FU_8_8_8_64_i0_fu_fft_28867_29398), .wenable(wrenable_reg_59));
  register_SE #(.BITSIZE_in1(10), .BITSIZE_out1(10)) reg_6 (.out1(out_reg_6_reg_6), .clock(clock), .reset(reset), .in1(out_ui_pointer_plus_expr_FU_16_16_16_91_i3_fu_fft_28867_29600), .wenable(wrenable_reg_6));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_60 (.out1(out_reg_60_reg_60), .clock(clock), .reset(reset), .in1(out_minus_expr_FU_8_8_8_62_i1_fu_fft_28867_29402), .wenable(wrenable_reg_60));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_61 (.out1(out_reg_61_reg_61), .clock(clock), .reset(reset), .in1(out_minus_expr_FU_8_8_8_62_i2_fu_fft_28867_29407), .wenable(wrenable_reg_61));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_62 (.out1(out_reg_62_reg_62), .clock(clock), .reset(reset), .in1(out_plus_expr_FU_8_8_8_64_i1_fu_fft_28867_29410), .wenable(wrenable_reg_62));
  register_STD #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_63 (.out1(out_reg_63_reg_63), .clock(clock), .reset(reset), .in1(out_plus_expr_FU_8_8_8_64_i2_fu_fft_28867_29413), .wenable(wrenable_reg_63));
  register_SE #(.BITSIZE_in1(9), .BITSIZE_out1(9)) reg_7 (.out1(out_reg_7_reg_7), .clock(clock), .reset(reset), .in1(out_ui_lshift_expr_FU_16_0_16_78_i0_fu_fft_28867_30567), .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_8 (.out1(out_reg_8_reg_8), .clock(clock), .reset(reset), .in1(out_BMEMORY_CTRL_61_i0_BMEMORY_CTRL_61_i0), .wenable(wrenable_reg_8));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_9 (.out1(out_reg_9_reg_9), .clock(clock), .reset(reset), .in1(out_MUX_143_reg_9_0_0_0), .wenable(wrenable_reg_9));
  // io-signal post fix
  assign Mout_oe_ram = sig_out_bus_mergerMout_oe_ram3_;
  assign Mout_we_ram = sig_out_bus_mergerMout_we_ram4_;
  assign Mout_addr_ram = sig_out_bus_mergerMout_addr_ram1_;
  assign Mout_Wdata_ram = sig_out_bus_mergerMout_Wdata_ram0_;
  assign Mout_data_ram_size = sig_out_bus_mergerMout_data_ram_size2_;
  assign OUT_CONDITION_fft_28867_29295 = out_read_cond_FU_14_i0_fu_fft_28867_29295;
  assign OUT_CONDITION_fft_28867_29527 = out_read_cond_FU_45_i0_fu_fft_28867_29527;
  assign OUT_CONDITION_fft_28867_29529 = out_read_cond_FU_56_i0_fu_fft_28867_29529;
  assign OUT_CONDITION_fft_28867_29531 = out_read_cond_FU_59_i0_fu_fft_28867_29531;
  assign OUT_MULTIIF_fft_28867_32498 = out_multi_read_cond_FU_22_i0_fu_fft_28867_32498;
  assign OUT_UNBOUNDED_fft_28867_29307 = s_done___int32_to_float64if_instance;
  assign OUT_UNBOUNDED_fft_28867_29309 = s_done___int32_to_float64if_instance;
  assign OUT_UNBOUNDED_fft_28867_29310 = s_done___float64_divSRT4if_instance;
  assign OUT_UNBOUNDED_fft_28867_29311 = s_done___float64_mulif_instance;
  assign OUT_UNBOUNDED_fft_28867_29312 = s_done___float64_to_int32_round_to_zeroif_instance;
  assign OUT_UNBOUNDED_fft_28867_29313 = s_done___int32_to_float64if_instance;
  assign OUT_UNBOUNDED_fft_28867_29314 = s_done___float64_mulif_instance;
  assign OUT_UNBOUNDED_fft_28867_29315 = s_done___float64_to_int32_round_to_zeroif_instance;
  assign OUT_UNBOUNDED_fft_28867_29317 = s_done_mysin_99_i0;
  assign OUT_UNBOUNDED_fft_28867_29318 = s_done___int32_to_float64if_instance;
  assign OUT_UNBOUNDED_fft_28867_29319 = s_done___float64_mulif_instance;
  assign OUT_UNBOUNDED_fft_28867_29320 = s_done___float64_mulif_instance;
  assign OUT_UNBOUNDED_fft_28867_29321 = s_done___float64_to_int32_round_to_zeroif_instance;
  assign OUT_UNBOUNDED_fft_28867_29323 = s_done_mysin_99_i0;

endmodule

// FSM based controller description for fft
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller_fft(done_port, fuselector_BMEMORY_CTRL_61_i0_LOAD, fuselector_BMEMORY_CTRL_61_i0_STORE, selector_IN_UNBOUNDED_fft_28867_29307, selector_IN_UNBOUNDED_fft_28867_29309, selector_IN_UNBOUNDED_fft_28867_29310, selector_IN_UNBOUNDED_fft_28867_29311, selector_IN_UNBOUNDED_fft_28867_29312, selector_IN_UNBOUNDED_fft_28867_29313, selector_IN_UNBOUNDED_fft_28867_29314, selector_IN_UNBOUNDED_fft_28867_29315, selector_IN_UNBOUNDED_fft_28867_29317, selector_IN_UNBOUNDED_fft_28867_29318, selector_IN_UNBOUNDED_fft_28867_29319, selector_IN_UNBOUNDED_fft_28867_29320, selector_IN_UNBOUNDED_fft_28867_29321, selector_IN_UNBOUNDED_fft_28867_29323, selector_MUX_102_reg_29_0_0_0, selector_MUX_104_reg_30_0_0_0, selector_MUX_106_reg_32_0_0_0, selector_MUX_107_reg_33_0_0_0, selector_MUX_108_reg_34_0_0_0, selector_MUX_109_reg_35_0_0_0, selector_MUX_110_reg_36_0_0_0, selector_MUX_111_reg_37_0_0_0, selector_MUX_112_reg_38_0_0_0, selector_MUX_113_reg_39_0_0_0, selector_MUX_115_reg_40_0_0_0, selector_MUX_116_reg_41_0_0_0, selector_MUX_131_reg_55_0_0_0, selector_MUX_143_reg_9_0_0_0, selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0, selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0, selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1, selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0, selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0, selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0, selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1, selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2, selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3, selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0, selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1, selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2, selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3, selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0, selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1, selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0, selector_MUX_69_mysin_99_i0_0_0_0, selector_MUX_82_reg_10_0_0_0, selector_MUX_82_reg_10_0_0_1, selector_MUX_83_reg_11_0_0_0, selector_MUX_92_reg_2_0_0_0, fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if, fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if, fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif, fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif, fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif, fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif, fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if, fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if, wrenable_reg_0, wrenable_reg_1, wrenable_reg_10, wrenable_reg_11, wrenable_reg_12, wrenable_reg_13, wrenable_reg_14, wrenable_reg_15, wrenable_reg_16, wrenable_reg_17, wrenable_reg_18, wrenable_reg_19, wrenable_reg_2, wrenable_reg_20, wrenable_reg_21, wrenable_reg_22, wrenable_reg_23, wrenable_reg_24, wrenable_reg_25, wrenable_reg_26, wrenable_reg_27, wrenable_reg_28, wrenable_reg_29, wrenable_reg_3, wrenable_reg_30, wrenable_reg_31, wrenable_reg_32, wrenable_reg_33, wrenable_reg_34, wrenable_reg_35, wrenable_reg_36, wrenable_reg_37, wrenable_reg_38, wrenable_reg_39, wrenable_reg_4, wrenable_reg_40, wrenable_reg_41, wrenable_reg_42, wrenable_reg_43, wrenable_reg_44, wrenable_reg_45, wrenable_reg_46, wrenable_reg_47, wrenable_reg_48, wrenable_reg_49, wrenable_reg_5, wrenable_reg_50, wrenable_reg_51, wrenable_reg_52, wrenable_reg_53, wrenable_reg_54, wrenable_reg_55, wrenable_reg_56, wrenable_reg_57, wrenable_reg_58, wrenable_reg_59, wrenable_reg_6, wrenable_reg_60, wrenable_reg_61, wrenable_reg_62, wrenable_reg_63, wrenable_reg_7, wrenable_reg_8, wrenable_reg_9, OUT_CONDITION_fft_28867_29295, OUT_CONDITION_fft_28867_29527, OUT_CONDITION_fft_28867_29529, OUT_CONDITION_fft_28867_29531, OUT_MULTIIF_fft_28867_32498, OUT_UNBOUNDED_fft_28867_29307, OUT_UNBOUNDED_fft_28867_29309, OUT_UNBOUNDED_fft_28867_29310, OUT_UNBOUNDED_fft_28867_29311, OUT_UNBOUNDED_fft_28867_29312, OUT_UNBOUNDED_fft_28867_29313, OUT_UNBOUNDED_fft_28867_29314, OUT_UNBOUNDED_fft_28867_29315, OUT_UNBOUNDED_fft_28867_29317, OUT_UNBOUNDED_fft_28867_29318, OUT_UNBOUNDED_fft_28867_29319, OUT_UNBOUNDED_fft_28867_29320, OUT_UNBOUNDED_fft_28867_29321, OUT_UNBOUNDED_fft_28867_29323, clock, reset, start_port);
  // IN
  input OUT_CONDITION_fft_28867_29295;
  input OUT_CONDITION_fft_28867_29527;
  input OUT_CONDITION_fft_28867_29529;
  input OUT_CONDITION_fft_28867_29531;
  input [1:0] OUT_MULTIIF_fft_28867_32498;
  input OUT_UNBOUNDED_fft_28867_29307;
  input OUT_UNBOUNDED_fft_28867_29309;
  input OUT_UNBOUNDED_fft_28867_29310;
  input OUT_UNBOUNDED_fft_28867_29311;
  input OUT_UNBOUNDED_fft_28867_29312;
  input OUT_UNBOUNDED_fft_28867_29313;
  input OUT_UNBOUNDED_fft_28867_29314;
  input OUT_UNBOUNDED_fft_28867_29315;
  input OUT_UNBOUNDED_fft_28867_29317;
  input OUT_UNBOUNDED_fft_28867_29318;
  input OUT_UNBOUNDED_fft_28867_29319;
  input OUT_UNBOUNDED_fft_28867_29320;
  input OUT_UNBOUNDED_fft_28867_29321;
  input OUT_UNBOUNDED_fft_28867_29323;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output fuselector_BMEMORY_CTRL_61_i0_LOAD;
  output fuselector_BMEMORY_CTRL_61_i0_STORE;
  output selector_IN_UNBOUNDED_fft_28867_29307;
  output selector_IN_UNBOUNDED_fft_28867_29309;
  output selector_IN_UNBOUNDED_fft_28867_29310;
  output selector_IN_UNBOUNDED_fft_28867_29311;
  output selector_IN_UNBOUNDED_fft_28867_29312;
  output selector_IN_UNBOUNDED_fft_28867_29313;
  output selector_IN_UNBOUNDED_fft_28867_29314;
  output selector_IN_UNBOUNDED_fft_28867_29315;
  output selector_IN_UNBOUNDED_fft_28867_29317;
  output selector_IN_UNBOUNDED_fft_28867_29318;
  output selector_IN_UNBOUNDED_fft_28867_29319;
  output selector_IN_UNBOUNDED_fft_28867_29320;
  output selector_IN_UNBOUNDED_fft_28867_29321;
  output selector_IN_UNBOUNDED_fft_28867_29323;
  output selector_MUX_102_reg_29_0_0_0;
  output selector_MUX_104_reg_30_0_0_0;
  output selector_MUX_106_reg_32_0_0_0;
  output selector_MUX_107_reg_33_0_0_0;
  output selector_MUX_108_reg_34_0_0_0;
  output selector_MUX_109_reg_35_0_0_0;
  output selector_MUX_110_reg_36_0_0_0;
  output selector_MUX_111_reg_37_0_0_0;
  output selector_MUX_112_reg_38_0_0_0;
  output selector_MUX_113_reg_39_0_0_0;
  output selector_MUX_115_reg_40_0_0_0;
  output selector_MUX_116_reg_41_0_0_0;
  output selector_MUX_131_reg_55_0_0_0;
  output selector_MUX_143_reg_9_0_0_0;
  output selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0;
  output selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0;
  output selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1;
  output selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0;
  output selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0;
  output selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0;
  output selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1;
  output selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1;
  output selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1;
  output selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0;
  output selector_MUX_69_mysin_99_i0_0_0_0;
  output selector_MUX_82_reg_10_0_0_0;
  output selector_MUX_82_reg_10_0_0_1;
  output selector_MUX_83_reg_11_0_0_0;
  output selector_MUX_92_reg_2_0_0_0;
  output fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if;
  output fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if;
  output fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif;
  output fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif;
  output fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif;
  output fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif;
  output fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if;
  output fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_24;
  output wrenable_reg_25;
  output wrenable_reg_26;
  output wrenable_reg_27;
  output wrenable_reg_28;
  output wrenable_reg_29;
  output wrenable_reg_3;
  output wrenable_reg_30;
  output wrenable_reg_31;
  output wrenable_reg_32;
  output wrenable_reg_33;
  output wrenable_reg_34;
  output wrenable_reg_35;
  output wrenable_reg_36;
  output wrenable_reg_37;
  output wrenable_reg_38;
  output wrenable_reg_39;
  output wrenable_reg_4;
  output wrenable_reg_40;
  output wrenable_reg_41;
  output wrenable_reg_42;
  output wrenable_reg_43;
  output wrenable_reg_44;
  output wrenable_reg_45;
  output wrenable_reg_46;
  output wrenable_reg_47;
  output wrenable_reg_48;
  output wrenable_reg_49;
  output wrenable_reg_5;
  output wrenable_reg_50;
  output wrenable_reg_51;
  output wrenable_reg_52;
  output wrenable_reg_53;
  output wrenable_reg_54;
  output wrenable_reg_55;
  output wrenable_reg_56;
  output wrenable_reg_57;
  output wrenable_reg_58;
  output wrenable_reg_59;
  output wrenable_reg_6;
  output wrenable_reg_60;
  output wrenable_reg_61;
  output wrenable_reg_62;
  output wrenable_reg_63;
  output wrenable_reg_7;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [69:0] S_0 = 70'b0000000000000000000000000000000000000000000000000000000000000000000001,
    S_13 = 70'b0000000000000000000000000000000000000000000000000000000010000000000000,
    S_1 = 70'b0000000000000000000000000000000000000000000000000000000000000000000010,
    S_2 = 70'b0000000000000000000000000000000000000000000000000000000000000000000100,
    S_3 = 70'b0000000000000000000000000000000000000000000000000000000000000000001000,
    S_4 = 70'b0000000000000000000000000000000000000000000000000000000000000000010000,
    S_5 = 70'b0000000000000000000000000000000000000000000000000000000000000000100000,
    S_6 = 70'b0000000000000000000000000000000000000000000000000000000000000001000000,
    S_7 = 70'b0000000000000000000000000000000000000000000000000000000000000010000000,
    S_8 = 70'b0000000000000000000000000000000000000000000000000000000000000100000000,
    S_9 = 70'b0000000000000000000000000000000000000000000000000000000000001000000000,
    S_10 = 70'b0000000000000000000000000000000000000000000000000000000000010000000000,
    S_11 = 70'b0000000000000000000000000000000000000000000000000000000000100000000000,
    S_12 = 70'b0000000000000000000000000000000000000000000000000000000001000000000000,
    S_68 = 70'b0100000000000000000000000000000000000000000000000000000000000000000000,
    S_69 = 70'b1000000000000000000000000000000000000000000000000000000000000000000000,
    S_14 = 70'b0000000000000000000000000000000000000000000000000000000100000000000000,
    S_15 = 70'b0000000000000000000000000000000000000000000000000000001000000000000000,
    S_16 = 70'b0000000000000000000000000000000000000000000000000000010000000000000000,
    S_17 = 70'b0000000000000000000000000000000000000000000000000000100000000000000000,
    S_18 = 70'b0000000000000000000000000000000000000000000000000001000000000000000000,
    S_19 = 70'b0000000000000000000000000000000000000000000000000010000000000000000000,
    S_20 = 70'b0000000000000000000000000000000000000000000000000100000000000000000000,
    S_21 = 70'b0000000000000000000000000000000000000000000000001000000000000000000000,
    S_22 = 70'b0000000000000000000000000000000000000000000000010000000000000000000000,
    S_23 = 70'b0000000000000000000000000000000000000000000000100000000000000000000000,
    S_24 = 70'b0000000000000000000000000000000000000000000001000000000000000000000000,
    S_25 = 70'b0000000000000000000000000000000000000000000010000000000000000000000000,
    S_26 = 70'b0000000000000000000000000000000000000000000100000000000000000000000000,
    S_27 = 70'b0000000000000000000000000000000000000000001000000000000000000000000000,
    S_28 = 70'b0000000000000000000000000000000000000000010000000000000000000000000000,
    S_29 = 70'b0000000000000000000000000000000000000000100000000000000000000000000000,
    S_30 = 70'b0000000000000000000000000000000000000001000000000000000000000000000000,
    S_31 = 70'b0000000000000000000000000000000000000010000000000000000000000000000000,
    S_32 = 70'b0000000000000000000000000000000000000100000000000000000000000000000000,
    S_33 = 70'b0000000000000000000000000000000000001000000000000000000000000000000000,
    S_34 = 70'b0000000000000000000000000000000000010000000000000000000000000000000000,
    S_35 = 70'b0000000000000000000000000000000000100000000000000000000000000000000000,
    S_36 = 70'b0000000000000000000000000000000001000000000000000000000000000000000000,
    S_37 = 70'b0000000000000000000000000000000010000000000000000000000000000000000000,
    S_38 = 70'b0000000000000000000000000000000100000000000000000000000000000000000000,
    S_39 = 70'b0000000000000000000000000000001000000000000000000000000000000000000000,
    S_40 = 70'b0000000000000000000000000000010000000000000000000000000000000000000000,
    S_41 = 70'b0000000000000000000000000000100000000000000000000000000000000000000000,
    S_42 = 70'b0000000000000000000000000001000000000000000000000000000000000000000000,
    S_43 = 70'b0000000000000000000000000010000000000000000000000000000000000000000000,
    S_44 = 70'b0000000000000000000000000100000000000000000000000000000000000000000000,
    S_67 = 70'b0010000000000000000000000000000000000000000000000000000000000000000000,
    S_63 = 70'b0000001000000000000000000000000000000000000000000000000000000000000000,
    S_64 = 70'b0000010000000000000000000000000000000000000000000000000000000000000000,
    S_65 = 70'b0000100000000000000000000000000000000000000000000000000000000000000000,
    S_66 = 70'b0001000000000000000000000000000000000000000000000000000000000000000000,
    S_45 = 70'b0000000000000000000000001000000000000000000000000000000000000000000000,
    S_46 = 70'b0000000000000000000000010000000000000000000000000000000000000000000000,
    S_47 = 70'b0000000000000000000000100000000000000000000000000000000000000000000000,
    S_48 = 70'b0000000000000000000001000000000000000000000000000000000000000000000000,
    S_49 = 70'b0000000000000000000010000000000000000000000000000000000000000000000000,
    S_50 = 70'b0000000000000000000100000000000000000000000000000000000000000000000000,
    S_51 = 70'b0000000000000000001000000000000000000000000000000000000000000000000000,
    S_52 = 70'b0000000000000000010000000000000000000000000000000000000000000000000000,
    S_53 = 70'b0000000000000000100000000000000000000000000000000000000000000000000000,
    S_54 = 70'b0000000000000001000000000000000000000000000000000000000000000000000000,
    S_55 = 70'b0000000000000010000000000000000000000000000000000000000000000000000000,
    S_56 = 70'b0000000000000100000000000000000000000000000000000000000000000000000000,
    S_57 = 70'b0000000000001000000000000000000000000000000000000000000000000000000000,
    S_58 = 70'b0000000000010000000000000000000000000000000000000000000000000000000000,
    S_59 = 70'b0000000000100000000000000000000000000000000000000000000000000000000000,
    S_60 = 70'b0000000001000000000000000000000000000000000000000000000000000000000000,
    S_61 = 70'b0000000010000000000000000000000000000000000000000000000000000000000000,
    S_62 = 70'b0000000100000000000000000000000000000000000000000000000000000000000000;
  reg [69:0] _present_state, _next_state;
  reg done_port;
  reg fuselector_BMEMORY_CTRL_61_i0_LOAD;
  reg fuselector_BMEMORY_CTRL_61_i0_STORE;
  reg selector_IN_UNBOUNDED_fft_28867_29307;
  reg selector_IN_UNBOUNDED_fft_28867_29309;
  reg selector_IN_UNBOUNDED_fft_28867_29310;
  reg selector_IN_UNBOUNDED_fft_28867_29311;
  reg selector_IN_UNBOUNDED_fft_28867_29312;
  reg selector_IN_UNBOUNDED_fft_28867_29313;
  reg selector_IN_UNBOUNDED_fft_28867_29314;
  reg selector_IN_UNBOUNDED_fft_28867_29315;
  reg selector_IN_UNBOUNDED_fft_28867_29317;
  reg selector_IN_UNBOUNDED_fft_28867_29318;
  reg selector_IN_UNBOUNDED_fft_28867_29319;
  reg selector_IN_UNBOUNDED_fft_28867_29320;
  reg selector_IN_UNBOUNDED_fft_28867_29321;
  reg selector_IN_UNBOUNDED_fft_28867_29323;
  reg selector_MUX_102_reg_29_0_0_0;
  reg selector_MUX_104_reg_30_0_0_0;
  reg selector_MUX_106_reg_32_0_0_0;
  reg selector_MUX_107_reg_33_0_0_0;
  reg selector_MUX_108_reg_34_0_0_0;
  reg selector_MUX_109_reg_35_0_0_0;
  reg selector_MUX_110_reg_36_0_0_0;
  reg selector_MUX_111_reg_37_0_0_0;
  reg selector_MUX_112_reg_38_0_0_0;
  reg selector_MUX_113_reg_39_0_0_0;
  reg selector_MUX_115_reg_40_0_0_0;
  reg selector_MUX_116_reg_41_0_0_0;
  reg selector_MUX_131_reg_55_0_0_0;
  reg selector_MUX_143_reg_9_0_0_0;
  reg selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0;
  reg selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0;
  reg selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1;
  reg selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0;
  reg selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0;
  reg selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0;
  reg selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1;
  reg selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1;
  reg selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1;
  reg selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0;
  reg selector_MUX_69_mysin_99_i0_0_0_0;
  reg selector_MUX_82_reg_10_0_0_0;
  reg selector_MUX_82_reg_10_0_0_1;
  reg selector_MUX_83_reg_11_0_0_0;
  reg selector_MUX_92_reg_2_0_0_0;
  reg fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if;
  reg fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if;
  reg fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif;
  reg fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif;
  reg fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif;
  reg fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif;
  reg fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if;
  reg fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_24;
  reg wrenable_reg_25;
  reg wrenable_reg_26;
  reg wrenable_reg_27;
  reg wrenable_reg_28;
  reg wrenable_reg_29;
  reg wrenable_reg_3;
  reg wrenable_reg_30;
  reg wrenable_reg_31;
  reg wrenable_reg_32;
  reg wrenable_reg_33;
  reg wrenable_reg_34;
  reg wrenable_reg_35;
  reg wrenable_reg_36;
  reg wrenable_reg_37;
  reg wrenable_reg_38;
  reg wrenable_reg_39;
  reg wrenable_reg_4;
  reg wrenable_reg_40;
  reg wrenable_reg_41;
  reg wrenable_reg_42;
  reg wrenable_reg_43;
  reg wrenable_reg_44;
  reg wrenable_reg_45;
  reg wrenable_reg_46;
  reg wrenable_reg_47;
  reg wrenable_reg_48;
  reg wrenable_reg_49;
  reg wrenable_reg_5;
  reg wrenable_reg_50;
  reg wrenable_reg_51;
  reg wrenable_reg_52;
  reg wrenable_reg_53;
  reg wrenable_reg_54;
  reg wrenable_reg_55;
  reg wrenable_reg_56;
  reg wrenable_reg_57;
  reg wrenable_reg_58;
  reg wrenable_reg_59;
  reg wrenable_reg_6;
  reg wrenable_reg_60;
  reg wrenable_reg_61;
  reg wrenable_reg_62;
  reg wrenable_reg_63;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b0;
    fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29307 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29309 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29310 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29311 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29312 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29313 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29314 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29315 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29317 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29318 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29319 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29320 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29321 = 1'b0;
    selector_IN_UNBOUNDED_fft_28867_29323 = 1'b0;
    selector_MUX_102_reg_29_0_0_0 = 1'b0;
    selector_MUX_104_reg_30_0_0_0 = 1'b0;
    selector_MUX_106_reg_32_0_0_0 = 1'b0;
    selector_MUX_107_reg_33_0_0_0 = 1'b0;
    selector_MUX_108_reg_34_0_0_0 = 1'b0;
    selector_MUX_109_reg_35_0_0_0 = 1'b0;
    selector_MUX_110_reg_36_0_0_0 = 1'b0;
    selector_MUX_111_reg_37_0_0_0 = 1'b0;
    selector_MUX_112_reg_38_0_0_0 = 1'b0;
    selector_MUX_113_reg_39_0_0_0 = 1'b0;
    selector_MUX_115_reg_40_0_0_0 = 1'b0;
    selector_MUX_116_reg_41_0_0_0 = 1'b0;
    selector_MUX_131_reg_55_0_0_0 = 1'b0;
    selector_MUX_143_reg_9_0_0_0 = 1'b0;
    selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0 = 1'b0;
    selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0 = 1'b0;
    selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1 = 1'b0;
    selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'b0;
    selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0 = 1'b0;
    selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0 = 1'b0;
    selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1 = 1'b0;
    selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1 = 1'b0;
    selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'b0;
    selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b0;
    selector_MUX_69_mysin_99_i0_0_0_0 = 1'b0;
    selector_MUX_82_reg_10_0_0_0 = 1'b0;
    selector_MUX_82_reg_10_0_0_1 = 1'b0;
    selector_MUX_83_reg_11_0_0_0 = 1'b0;
    selector_MUX_92_reg_2_0_0_0 = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b0;
    fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_24 = 1'b0;
    wrenable_reg_25 = 1'b0;
    wrenable_reg_26 = 1'b0;
    wrenable_reg_27 = 1'b0;
    wrenable_reg_28 = 1'b0;
    wrenable_reg_29 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_30 = 1'b0;
    wrenable_reg_31 = 1'b0;
    wrenable_reg_32 = 1'b0;
    wrenable_reg_33 = 1'b0;
    wrenable_reg_34 = 1'b0;
    wrenable_reg_35 = 1'b0;
    wrenable_reg_36 = 1'b0;
    wrenable_reg_37 = 1'b0;
    wrenable_reg_38 = 1'b0;
    wrenable_reg_39 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_40 = 1'b0;
    wrenable_reg_41 = 1'b0;
    wrenable_reg_42 = 1'b0;
    wrenable_reg_43 = 1'b0;
    wrenable_reg_44 = 1'b0;
    wrenable_reg_45 = 1'b0;
    wrenable_reg_46 = 1'b0;
    wrenable_reg_47 = 1'b0;
    wrenable_reg_48 = 1'b0;
    wrenable_reg_49 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_50 = 1'b0;
    wrenable_reg_51 = 1'b0;
    wrenable_reg_52 = 1'b0;
    wrenable_reg_53 = 1'b0;
    wrenable_reg_54 = 1'b0;
    wrenable_reg_55 = 1'b0;
    wrenable_reg_56 = 1'b0;
    wrenable_reg_57 = 1'b0;
    wrenable_reg_58 = 1'b0;
    wrenable_reg_59 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_60 = 1'b0;
    wrenable_reg_61 = 1'b0;
    wrenable_reg_62 = 1'b0;
    wrenable_reg_63 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          selector_MUX_82_reg_10_0_0_0 = 1'b1;
          selector_MUX_92_reg_2_0_0_0 = 1'b1;
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_2 = 1'b1;
          _next_state = S_13;
        end
        else
        begin
          selector_MUX_102_reg_29_0_0_0 = 1'bX;
          selector_MUX_104_reg_30_0_0_0 = 1'bX;
          selector_MUX_106_reg_32_0_0_0 = 1'bX;
          selector_MUX_107_reg_33_0_0_0 = 1'bX;
          selector_MUX_108_reg_34_0_0_0 = 1'bX;
          selector_MUX_109_reg_35_0_0_0 = 1'bX;
          selector_MUX_110_reg_36_0_0_0 = 1'bX;
          selector_MUX_111_reg_37_0_0_0 = 1'bX;
          selector_MUX_112_reg_38_0_0_0 = 1'bX;
          selector_MUX_113_reg_39_0_0_0 = 1'bX;
          selector_MUX_115_reg_40_0_0_0 = 1'bX;
          selector_MUX_116_reg_41_0_0_0 = 1'bX;
          selector_MUX_131_reg_55_0_0_0 = 1'bX;
          selector_MUX_143_reg_9_0_0_0 = 1'bX;
          selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0 = 1'bX;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0 = 1'bX;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1 = 1'bX;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'bX;
          selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0 = 1'bX;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0 = 1'bX;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1 = 1'bX;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'bX;
          selector_MUX_69_mysin_99_i0_0_0_0 = 1'bX;
          selector_MUX_82_reg_10_0_0_0 = 1'bX;
          selector_MUX_82_reg_10_0_0_1 = 1'bX;
          selector_MUX_83_reg_11_0_0_0 = 1'bX;
          selector_MUX_92_reg_2_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_54 = 1'bX;
          wrenable_reg_55 = 1'bX;
          wrenable_reg_56 = 1'bX;
          wrenable_reg_57 = 1'bX;
          wrenable_reg_58 = 1'bX;
          wrenable_reg_59 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_60 = 1'bX;
          wrenable_reg_61 = 1'bX;
          wrenable_reg_62 = 1'bX;
          wrenable_reg_63 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
          _next_state = S_0;
        end
      S_13 :
        begin
          selector_MUX_143_reg_9_0_0_0 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_9 = 1'b1;
          if (OUT_MULTIIF_fft_28867_32498[0] == 1'b1)
            begin
              _next_state = S_68;
              selector_MUX_143_reg_9_0_0_0 = 1'b0;
              wrenable_reg_3 = 1'b0;
              wrenable_reg_4 = 1'b0;
              wrenable_reg_5 = 1'b0;
              wrenable_reg_6 = 1'b0;
              wrenable_reg_7 = 1'b0;
              wrenable_reg_9 = 1'b0;
            end
          else if (OUT_MULTIIF_fft_28867_32498[1] == 1'b1)
            begin
              _next_state = S_1;
              selector_MUX_143_reg_9_0_0_0 = 1'b0;
              wrenable_reg_11 = 1'b0;
              wrenable_reg_9 = 1'b0;
            end
          else
            begin
              _next_state = S_11;
              wrenable_reg_11 = 1'b0;
              wrenable_reg_3 = 1'b0;
              wrenable_reg_4 = 1'b0;
              wrenable_reg_5 = 1'b0;
              wrenable_reg_6 = 1'b0;
            end
        end
      S_1 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          wrenable_reg_53 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          wrenable_reg_8 = 1'b1;
          _next_state = S_4;
        end
      S_4 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0 = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0 = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'b1;
          _next_state = S_5;
        end
      S_5 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          _next_state = S_6;
        end
      S_6 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          _next_state = S_7;
        end
      S_7 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3 = 1'b1;
          wrenable_reg_53 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          wrenable_reg_8 = 1'b1;
          _next_state = S_9;
        end
      S_9 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3 = 1'b1;
          _next_state = S_10;
        end
      S_10 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_143_reg_9_0_0_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_11;
        end
      S_11 :
        begin
          wrenable_reg_10 = 1'b1;
          wrenable_reg_9 = 1'b1;
          if (OUT_CONDITION_fft_28867_29295 == 1'b1)
            begin
              _next_state = S_11;
            end
          else
            begin
              _next_state = S_12;
              wrenable_reg_10 = 1'b0;
              wrenable_reg_9 = 1'b0;
            end
        end
      S_12 :
        begin
          selector_MUX_82_reg_10_0_0_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_2 = 1'b1;
          _next_state = S_13;
        end
      S_68 :
        begin
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_15 = 1'b1;
          if (OUT_CONDITION_fft_28867_29531 == 1'b1)
            begin
              _next_state = S_14;
            end
          else
            begin
              _next_state = S_69;
              done_port = 1'b1;
              wrenable_reg_12 = 1'b0;
              wrenable_reg_13 = 1'b0;
              wrenable_reg_14 = 1'b0;
              wrenable_reg_15 = 1'b0;
            end
        end
      S_69 :
        begin
          _next_state = S_0;
        end
      S_14 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29309 = 1'b1;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29309 == 1'b0)
            begin
              _next_state = S_15;
            end
          else
            begin
              _next_state = S_16;
            end
        end
      S_15 :
        begin
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29309 == 1'b0)
            begin
              _next_state = S_15;
            end
          else
            begin
              _next_state = S_16;
            end
        end
      S_16 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29310 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if = 1'b1;
          wrenable_reg_16 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29310 == 1'b0)
            begin
              _next_state = S_17;
            end
          else
            begin
              _next_state = S_18;
            end
        end
      S_17 :
        begin
          fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if = 1'b1;
          wrenable_reg_16 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29310 == 1'b0)
            begin
              _next_state = S_17;
            end
          else
            begin
              _next_state = S_18;
            end
        end
      S_18 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29307 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29307 == 1'b0)
            begin
              _next_state = S_19;
            end
          else
            begin
              _next_state = S_20;
            end
        end
      S_19 :
        begin
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29307 == 1'b0)
            begin
              _next_state = S_19;
            end
          else
            begin
              _next_state = S_20;
            end
        end
      S_20 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29311 = 1'b1;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29311 == 1'b0)
            begin
              _next_state = S_21;
            end
          else
            begin
              _next_state = S_22;
            end
        end
      S_21 :
        begin
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29311 == 1'b0)
            begin
              _next_state = S_21;
            end
          else
            begin
              _next_state = S_22;
            end
        end
      S_22 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29312 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29312 == 1'b0)
            begin
              _next_state = S_23;
            end
          else
            begin
              _next_state = S_24;
            end
        end
      S_23 :
        begin
          fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29312 == 1'b0)
            begin
              _next_state = S_23;
            end
          else
            begin
              _next_state = S_24;
            end
        end
      S_24 :
        begin
          wrenable_reg_18 = 1'b1;
          wrenable_reg_19 = 1'b1;
          _next_state = S_25;
        end
      S_25 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29313 = 1'b1;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29313 == 1'b0)
            begin
              _next_state = S_26;
            end
          else
            begin
              _next_state = S_27;
            end
        end
      S_26 :
        begin
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29313 == 1'b0)
            begin
              _next_state = S_26;
            end
          else
            begin
              _next_state = S_27;
            end
        end
      S_27 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29314 = 1'b1;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29314 == 1'b0)
            begin
              _next_state = S_28;
            end
          else
            begin
              _next_state = S_29;
            end
        end
      S_28 :
        begin
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29314 == 1'b0)
            begin
              _next_state = S_28;
            end
          else
            begin
              _next_state = S_29;
            end
        end
      S_29 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29315 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29315 == 1'b0)
            begin
              _next_state = S_30;
            end
          else
            begin
              _next_state = S_31;
            end
        end
      S_30 :
        begin
          fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29315 == 1'b0)
            begin
              _next_state = S_30;
            end
          else
            begin
              _next_state = S_31;
            end
        end
      S_31 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29323 = 1'b1;
          wrenable_reg_22 = 1'b1;
          wrenable_reg_23 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29323 == 1'b0)
            begin
              _next_state = S_32;
            end
          else
            begin
              _next_state = S_33;
            end
        end
      S_32 :
        begin
          wrenable_reg_22 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29323 == 1'b0)
            begin
              _next_state = S_32;
            end
          else
            begin
              _next_state = S_33;
            end
        end
      S_33 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29317 = 1'b1;
          selector_MUX_69_mysin_99_i0_0_0_0 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_25 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29317 == 1'b0)
            begin
              _next_state = S_34;
            end
          else
            begin
              _next_state = S_35;
            end
        end
      S_34 :
        begin
          selector_MUX_69_mysin_99_i0_0_0_0 = 1'b1;
          wrenable_reg_24 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29317 == 1'b0)
            begin
              _next_state = S_34;
            end
          else
            begin
              _next_state = S_35;
            end
        end
      S_35 :
        begin
          wrenable_reg_26 = 1'b1;
          _next_state = S_36;
        end
      S_36 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29318 = 1'b1;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0 = 1'b1;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29318 == 1'b0)
            begin
              _next_state = S_37;
            end
          else
            begin
              _next_state = S_38;
            end
        end
      S_37 :
        begin
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0 = 1'b1;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if = 1'b1;
          wrenable_reg_17 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29318 == 1'b0)
            begin
              _next_state = S_37;
            end
          else
            begin
              _next_state = S_38;
            end
        end
      S_38 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29319 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29319 == 1'b0)
            begin
              _next_state = S_39;
            end
          else
            begin
              _next_state = S_40;
            end
        end
      S_39 :
        begin
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_20 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29319 == 1'b0)
            begin
              _next_state = S_39;
            end
          else
            begin
              _next_state = S_40;
            end
        end
      S_40 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29320 = 1'b1;
          selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0 = 1'b1;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0 = 1'b1;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_27 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29320 == 1'b0)
            begin
              _next_state = S_41;
            end
          else
            begin
              _next_state = S_42;
            end
        end
      S_41 :
        begin
          selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0 = 1'b1;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0 = 1'b1;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif = 1'b1;
          wrenable_reg_27 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29320 == 1'b0)
            begin
              _next_state = S_41;
            end
          else
            begin
              _next_state = S_42;
            end
        end
      S_42 :
        begin
          selector_IN_UNBOUNDED_fft_28867_29321 = 1'b1;
          selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29321 == 1'b0)
            begin
              _next_state = S_43;
            end
          else
            begin
              _next_state = S_44;
            end
        end
      S_43 :
        begin
          selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0 = 1'b1;
          fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif = 1'b1;
          wrenable_reg_21 = 1'b1;
          if (OUT_UNBOUNDED_fft_28867_29321 == 1'b0)
            begin
              _next_state = S_43;
            end
          else
            begin
              _next_state = S_44;
            end
        end
      S_44 :
        begin
          selector_MUX_102_reg_29_0_0_0 = 1'b1;
          selector_MUX_104_reg_30_0_0_0 = 1'b1;
          selector_MUX_106_reg_32_0_0_0 = 1'b1;
          selector_MUX_107_reg_33_0_0_0 = 1'b1;
          selector_MUX_108_reg_34_0_0_0 = 1'b1;
          selector_MUX_109_reg_35_0_0_0 = 1'b1;
          selector_MUX_110_reg_36_0_0_0 = 1'b1;
          selector_MUX_111_reg_37_0_0_0 = 1'b1;
          selector_MUX_112_reg_38_0_0_0 = 1'b1;
          selector_MUX_113_reg_39_0_0_0 = 1'b1;
          selector_MUX_115_reg_40_0_0_0 = 1'b1;
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          wrenable_reg_31 = 1'b1;
          wrenable_reg_32 = 1'b1;
          wrenable_reg_33 = 1'b1;
          wrenable_reg_34 = 1'b1;
          wrenable_reg_35 = 1'b1;
          wrenable_reg_36 = 1'b1;
          wrenable_reg_37 = 1'b1;
          wrenable_reg_38 = 1'b1;
          wrenable_reg_39 = 1'b1;
          wrenable_reg_40 = 1'b1;
          _next_state = S_67;
        end
      S_67 :
        begin
          selector_MUX_116_reg_41_0_0_0 = 1'b1;
          selector_MUX_83_reg_11_0_0_0 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_40 = 1'b1;
          wrenable_reg_41 = 1'b1;
          if (OUT_CONDITION_fft_28867_29529 == 1'b1)
            begin
              _next_state = S_63;
              selector_MUX_83_reg_11_0_0_0 = 1'b0;
              wrenable_reg_11 = 1'b0;
            end
          else
            begin
              _next_state = S_68;
              selector_MUX_116_reg_41_0_0_0 = 1'b0;
              wrenable_reg_40 = 1'b0;
              wrenable_reg_41 = 1'b0;
            end
        end
      S_63 :
        begin
          wrenable_reg_41 = 1'b1;
          wrenable_reg_42 = 1'b1;
          wrenable_reg_43 = 1'b1;
          wrenable_reg_44 = 1'b1;
          wrenable_reg_45 = 1'b1;
          wrenable_reg_46 = 1'b1;
          _next_state = S_64;
        end
      S_64 :
        begin
          wrenable_reg_51 = 1'b1;
          if (OUT_CONDITION_fft_28867_29527 == 1'b1)
            begin
              _next_state = S_45;
            end
          else
            begin
              _next_state = S_65;
              wrenable_reg_51 = 1'b0;
            end
        end
      S_65 :
        begin
          wrenable_reg_47 = 1'b1;
          wrenable_reg_48 = 1'b1;
          wrenable_reg_49 = 1'b1;
          wrenable_reg_50 = 1'b1;
          _next_state = S_66;
        end
      S_66 :
        begin
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          wrenable_reg_32 = 1'b1;
          wrenable_reg_33 = 1'b1;
          wrenable_reg_34 = 1'b1;
          wrenable_reg_35 = 1'b1;
          wrenable_reg_36 = 1'b1;
          wrenable_reg_37 = 1'b1;
          wrenable_reg_38 = 1'b1;
          wrenable_reg_39 = 1'b1;
          _next_state = S_67;
        end
      S_45 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'b1;
          _next_state = S_46;
        end
      S_46 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_131_reg_55_0_0_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          wrenable_reg_53 = 1'b1;
          wrenable_reg_55 = 1'b1;
          _next_state = S_47;
        end
      S_47 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'b1;
          wrenable_reg_52 = 1'b1;
          wrenable_reg_53 = 1'b1;
          wrenable_reg_54 = 1'b1;
          wrenable_reg_55 = 1'b1;
          _next_state = S_48;
        end
      S_48 :
        begin
          wrenable_reg_53 = 1'b1;
          wrenable_reg_56 = 1'b1;
          wrenable_reg_57 = 1'b1;
          _next_state = S_49;
        end
      S_49 :
        begin
          wrenable_reg_58 = 1'b1;
          wrenable_reg_59 = 1'b1;
          wrenable_reg_60 = 1'b1;
          _next_state = S_50;
        end
      S_50 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0 = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'b1;
          _next_state = S_51;
        end
      S_51 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          _next_state = S_52;
        end
      S_52 :
        begin
          wrenable_reg_53 = 1'b1;
          _next_state = S_53;
        end
      S_53 :
        begin
          wrenable_reg_61 = 1'b1;
          _next_state = S_54;
        end
      S_54 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1 = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          _next_state = S_55;
        end
      S_55 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'b1;
          _next_state = S_56;
        end
      S_56 :
        begin
          wrenable_reg_53 = 1'b1;
          _next_state = S_57;
        end
      S_57 :
        begin
          wrenable_reg_62 = 1'b1;
          _next_state = S_58;
        end
      S_58 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'b1;
          _next_state = S_59;
        end
      S_59 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_LOAD = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          _next_state = S_60;
        end
      S_60 :
        begin
          wrenable_reg_53 = 1'b1;
          _next_state = S_61;
        end
      S_61 :
        begin
          wrenable_reg_63 = 1'b1;
          _next_state = S_62;
        end
      S_62 :
        begin
          fuselector_BMEMORY_CTRL_61_i0_STORE = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2 = 1'b1;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1 = 1'b1;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'b1;
          _next_state = S_63;
        end
      default :
        begin
          _next_state = S_0;
          selector_MUX_102_reg_29_0_0_0 = 1'bX;
          selector_MUX_104_reg_30_0_0_0 = 1'bX;
          selector_MUX_106_reg_32_0_0_0 = 1'bX;
          selector_MUX_107_reg_33_0_0_0 = 1'bX;
          selector_MUX_108_reg_34_0_0_0 = 1'bX;
          selector_MUX_109_reg_35_0_0_0 = 1'bX;
          selector_MUX_110_reg_36_0_0_0 = 1'bX;
          selector_MUX_111_reg_37_0_0_0 = 1'bX;
          selector_MUX_112_reg_38_0_0_0 = 1'bX;
          selector_MUX_113_reg_39_0_0_0 = 1'bX;
          selector_MUX_115_reg_40_0_0_0 = 1'bX;
          selector_MUX_116_reg_41_0_0_0 = 1'bX;
          selector_MUX_131_reg_55_0_0_0 = 1'bX;
          selector_MUX_143_reg_9_0_0_0 = 1'bX;
          selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0 = 1'bX;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0 = 1'bX;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1 = 1'bX;
          selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0 = 1'bX;
          selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0 = 1'bX;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0 = 1'bX;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1 = 1'bX;
          selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1 = 1'bX;
          selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1 = 1'bX;
          selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0 = 1'bX;
          selector_MUX_69_mysin_99_i0_0_0_0 = 1'bX;
          selector_MUX_82_reg_10_0_0_0 = 1'bX;
          selector_MUX_82_reg_10_0_0_1 = 1'bX;
          selector_MUX_83_reg_11_0_0_0 = 1'bX;
          selector_MUX_92_reg_2_0_0_0 = 1'bX;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          wrenable_reg_10 = 1'bX;
          wrenable_reg_11 = 1'bX;
          wrenable_reg_12 = 1'bX;
          wrenable_reg_13 = 1'bX;
          wrenable_reg_14 = 1'bX;
          wrenable_reg_15 = 1'bX;
          wrenable_reg_16 = 1'bX;
          wrenable_reg_17 = 1'bX;
          wrenable_reg_18 = 1'bX;
          wrenable_reg_19 = 1'bX;
          wrenable_reg_2 = 1'bX;
          wrenable_reg_20 = 1'bX;
          wrenable_reg_21 = 1'bX;
          wrenable_reg_22 = 1'bX;
          wrenable_reg_23 = 1'bX;
          wrenable_reg_24 = 1'bX;
          wrenable_reg_25 = 1'bX;
          wrenable_reg_26 = 1'bX;
          wrenable_reg_27 = 1'bX;
          wrenable_reg_28 = 1'bX;
          wrenable_reg_29 = 1'bX;
          wrenable_reg_3 = 1'bX;
          wrenable_reg_30 = 1'bX;
          wrenable_reg_31 = 1'bX;
          wrenable_reg_32 = 1'bX;
          wrenable_reg_33 = 1'bX;
          wrenable_reg_34 = 1'bX;
          wrenable_reg_35 = 1'bX;
          wrenable_reg_36 = 1'bX;
          wrenable_reg_37 = 1'bX;
          wrenable_reg_38 = 1'bX;
          wrenable_reg_39 = 1'bX;
          wrenable_reg_4 = 1'bX;
          wrenable_reg_40 = 1'bX;
          wrenable_reg_41 = 1'bX;
          wrenable_reg_42 = 1'bX;
          wrenable_reg_43 = 1'bX;
          wrenable_reg_44 = 1'bX;
          wrenable_reg_45 = 1'bX;
          wrenable_reg_46 = 1'bX;
          wrenable_reg_47 = 1'bX;
          wrenable_reg_48 = 1'bX;
          wrenable_reg_49 = 1'bX;
          wrenable_reg_5 = 1'bX;
          wrenable_reg_50 = 1'bX;
          wrenable_reg_51 = 1'bX;
          wrenable_reg_52 = 1'bX;
          wrenable_reg_53 = 1'bX;
          wrenable_reg_54 = 1'bX;
          wrenable_reg_55 = 1'bX;
          wrenable_reg_56 = 1'bX;
          wrenable_reg_57 = 1'bX;
          wrenable_reg_58 = 1'bX;
          wrenable_reg_59 = 1'bX;
          wrenable_reg_6 = 1'bX;
          wrenable_reg_60 = 1'bX;
          wrenable_reg_61 = 1'bX;
          wrenable_reg_62 = 1'bX;
          wrenable_reg_63 = 1'bX;
          wrenable_reg_7 = 1'bX;
          wrenable_reg_8 = 1'bX;
          wrenable_reg_9 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for fft
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module fft(clock, reset, start_port, done_port, nn, size, data, isign, M_Rdata_ram, M_DataRdy, Min_oe_ram, Min_we_ram, Min_addr_ram, Min_Wdata_ram, Min_data_ram_size, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size);
  // IN
  input clock;
  input reset;
  input start_port;
  input signed [7:0] nn;
  input [7:0] size;
  input [31:0] data;
  input [7:0] isign;
  input [7:0] M_Rdata_ram;
  input M_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [6:0] Min_addr_ram;
  input [7:0] Min_Wdata_ram;
  input [3:0] Min_data_ram_size;
  // OUT
  output done_port;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [6:0] Mout_addr_ram;
  output [7:0] Mout_Wdata_ram;
  output [3:0] Mout_data_ram_size;
  // Component and signal declarations
  wire OUT_CONDITION_fft_28867_29295;
  wire OUT_CONDITION_fft_28867_29527;
  wire OUT_CONDITION_fft_28867_29529;
  wire OUT_CONDITION_fft_28867_29531;
  wire [1:0] OUT_MULTIIF_fft_28867_32498;
  wire OUT_UNBOUNDED_fft_28867_29307;
  wire OUT_UNBOUNDED_fft_28867_29309;
  wire OUT_UNBOUNDED_fft_28867_29310;
  wire OUT_UNBOUNDED_fft_28867_29311;
  wire OUT_UNBOUNDED_fft_28867_29312;
  wire OUT_UNBOUNDED_fft_28867_29313;
  wire OUT_UNBOUNDED_fft_28867_29314;
  wire OUT_UNBOUNDED_fft_28867_29315;
  wire OUT_UNBOUNDED_fft_28867_29317;
  wire OUT_UNBOUNDED_fft_28867_29318;
  wire OUT_UNBOUNDED_fft_28867_29319;
  wire OUT_UNBOUNDED_fft_28867_29320;
  wire OUT_UNBOUNDED_fft_28867_29321;
  wire OUT_UNBOUNDED_fft_28867_29323;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire fuselector_BMEMORY_CTRL_61_i0_LOAD;
  wire fuselector_BMEMORY_CTRL_61_i0_STORE;
  wire fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if;
  wire fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if;
  wire fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif;
  wire fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif;
  wire fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif;
  wire fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif;
  wire fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if;
  wire fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if;
  wire selector_IN_UNBOUNDED_fft_28867_29307;
  wire selector_IN_UNBOUNDED_fft_28867_29309;
  wire selector_IN_UNBOUNDED_fft_28867_29310;
  wire selector_IN_UNBOUNDED_fft_28867_29311;
  wire selector_IN_UNBOUNDED_fft_28867_29312;
  wire selector_IN_UNBOUNDED_fft_28867_29313;
  wire selector_IN_UNBOUNDED_fft_28867_29314;
  wire selector_IN_UNBOUNDED_fft_28867_29315;
  wire selector_IN_UNBOUNDED_fft_28867_29317;
  wire selector_IN_UNBOUNDED_fft_28867_29318;
  wire selector_IN_UNBOUNDED_fft_28867_29319;
  wire selector_IN_UNBOUNDED_fft_28867_29320;
  wire selector_IN_UNBOUNDED_fft_28867_29321;
  wire selector_IN_UNBOUNDED_fft_28867_29323;
  wire selector_MUX_102_reg_29_0_0_0;
  wire selector_MUX_104_reg_30_0_0_0;
  wire selector_MUX_106_reg_32_0_0_0;
  wire selector_MUX_107_reg_33_0_0_0;
  wire selector_MUX_108_reg_34_0_0_0;
  wire selector_MUX_109_reg_35_0_0_0;
  wire selector_MUX_110_reg_36_0_0_0;
  wire selector_MUX_111_reg_37_0_0_0;
  wire selector_MUX_112_reg_38_0_0_0;
  wire selector_MUX_113_reg_39_0_0_0;
  wire selector_MUX_115_reg_40_0_0_0;
  wire selector_MUX_116_reg_41_0_0_0;
  wire selector_MUX_131_reg_55_0_0_0;
  wire selector_MUX_143_reg_9_0_0_0;
  wire selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0;
  wire selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0;
  wire selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1;
  wire selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0;
  wire selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0;
  wire selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0;
  wire selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1;
  wire selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1;
  wire selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1;
  wire selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0;
  wire selector_MUX_69_mysin_99_i0_0_0_0;
  wire selector_MUX_82_reg_10_0_0_0;
  wire selector_MUX_82_reg_10_0_0_1;
  wire selector_MUX_83_reg_11_0_0_0;
  wire selector_MUX_92_reg_2_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_24;
  wire wrenable_reg_25;
  wire wrenable_reg_26;
  wire wrenable_reg_27;
  wire wrenable_reg_28;
  wire wrenable_reg_29;
  wire wrenable_reg_3;
  wire wrenable_reg_30;
  wire wrenable_reg_31;
  wire wrenable_reg_32;
  wire wrenable_reg_33;
  wire wrenable_reg_34;
  wire wrenable_reg_35;
  wire wrenable_reg_36;
  wire wrenable_reg_37;
  wire wrenable_reg_38;
  wire wrenable_reg_39;
  wire wrenable_reg_4;
  wire wrenable_reg_40;
  wire wrenable_reg_41;
  wire wrenable_reg_42;
  wire wrenable_reg_43;
  wire wrenable_reg_44;
  wire wrenable_reg_45;
  wire wrenable_reg_46;
  wire wrenable_reg_47;
  wire wrenable_reg_48;
  wire wrenable_reg_49;
  wire wrenable_reg_5;
  wire wrenable_reg_50;
  wire wrenable_reg_51;
  wire wrenable_reg_52;
  wire wrenable_reg_53;
  wire wrenable_reg_54;
  wire wrenable_reg_55;
  wire wrenable_reg_56;
  wire wrenable_reg_57;
  wire wrenable_reg_58;
  wire wrenable_reg_59;
  wire wrenable_reg_6;
  wire wrenable_reg_60;
  wire wrenable_reg_61;
  wire wrenable_reg_62;
  wire wrenable_reg_63;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller_fft Controller_i (.done_port(done_delayed_REG_signal_in), .fuselector_BMEMORY_CTRL_61_i0_LOAD(fuselector_BMEMORY_CTRL_61_i0_LOAD), .fuselector_BMEMORY_CTRL_61_i0_STORE(fuselector_BMEMORY_CTRL_61_i0_STORE), .selector_IN_UNBOUNDED_fft_28867_29307(selector_IN_UNBOUNDED_fft_28867_29307), .selector_IN_UNBOUNDED_fft_28867_29309(selector_IN_UNBOUNDED_fft_28867_29309), .selector_IN_UNBOUNDED_fft_28867_29310(selector_IN_UNBOUNDED_fft_28867_29310), .selector_IN_UNBOUNDED_fft_28867_29311(selector_IN_UNBOUNDED_fft_28867_29311), .selector_IN_UNBOUNDED_fft_28867_29312(selector_IN_UNBOUNDED_fft_28867_29312), .selector_IN_UNBOUNDED_fft_28867_29313(selector_IN_UNBOUNDED_fft_28867_29313), .selector_IN_UNBOUNDED_fft_28867_29314(selector_IN_UNBOUNDED_fft_28867_29314), .selector_IN_UNBOUNDED_fft_28867_29315(selector_IN_UNBOUNDED_fft_28867_29315), .selector_IN_UNBOUNDED_fft_28867_29317(selector_IN_UNBOUNDED_fft_28867_29317), .selector_IN_UNBOUNDED_fft_28867_29318(selector_IN_UNBOUNDED_fft_28867_29318), .selector_IN_UNBOUNDED_fft_28867_29319(selector_IN_UNBOUNDED_fft_28867_29319), .selector_IN_UNBOUNDED_fft_28867_29320(selector_IN_UNBOUNDED_fft_28867_29320), .selector_IN_UNBOUNDED_fft_28867_29321(selector_IN_UNBOUNDED_fft_28867_29321), .selector_IN_UNBOUNDED_fft_28867_29323(selector_IN_UNBOUNDED_fft_28867_29323), .selector_MUX_102_reg_29_0_0_0(selector_MUX_102_reg_29_0_0_0), .selector_MUX_104_reg_30_0_0_0(selector_MUX_104_reg_30_0_0_0), .selector_MUX_106_reg_32_0_0_0(selector_MUX_106_reg_32_0_0_0), .selector_MUX_107_reg_33_0_0_0(selector_MUX_107_reg_33_0_0_0), .selector_MUX_108_reg_34_0_0_0(selector_MUX_108_reg_34_0_0_0), .selector_MUX_109_reg_35_0_0_0(selector_MUX_109_reg_35_0_0_0), .selector_MUX_110_reg_36_0_0_0(selector_MUX_110_reg_36_0_0_0), .selector_MUX_111_reg_37_0_0_0(selector_MUX_111_reg_37_0_0_0), .selector_MUX_112_reg_38_0_0_0(selector_MUX_112_reg_38_0_0_0), .selector_MUX_113_reg_39_0_0_0(selector_MUX_113_reg_39_0_0_0), .selector_MUX_115_reg_40_0_0_0(selector_MUX_115_reg_40_0_0_0), .selector_MUX_116_reg_41_0_0_0(selector_MUX_116_reg_41_0_0_0), .selector_MUX_131_reg_55_0_0_0(selector_MUX_131_reg_55_0_0_0), .selector_MUX_143_reg_9_0_0_0(selector_MUX_143_reg_9_0_0_0), .selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0(selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0), .selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0), .selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1), .selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0), .selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0(selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0), .selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0), .selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1), .selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0(selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1(selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0(selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0(selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1(selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0(selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0), .selector_MUX_69_mysin_99_i0_0_0_0(selector_MUX_69_mysin_99_i0_0_0_0), .selector_MUX_82_reg_10_0_0_0(selector_MUX_82_reg_10_0_0_0), .selector_MUX_82_reg_10_0_0_1(selector_MUX_82_reg_10_0_0_1), .selector_MUX_83_reg_11_0_0_0(selector_MUX_83_reg_11_0_0_0), .selector_MUX_92_reg_2_0_0_0(selector_MUX_92_reg_2_0_0_0), .fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if(fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if), .fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if(fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if), .fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif(fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif), .fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif(fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif), .fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif(fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif), .fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif(fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif), .fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if(fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if), .fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if(fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_54(wrenable_reg_54), .wrenable_reg_55(wrenable_reg_55), .wrenable_reg_56(wrenable_reg_56), .wrenable_reg_57(wrenable_reg_57), .wrenable_reg_58(wrenable_reg_58), .wrenable_reg_59(wrenable_reg_59), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_60(wrenable_reg_60), .wrenable_reg_61(wrenable_reg_61), .wrenable_reg_62(wrenable_reg_62), .wrenable_reg_63(wrenable_reg_63), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9), .OUT_CONDITION_fft_28867_29295(OUT_CONDITION_fft_28867_29295), .OUT_CONDITION_fft_28867_29527(OUT_CONDITION_fft_28867_29527), .OUT_CONDITION_fft_28867_29529(OUT_CONDITION_fft_28867_29529), .OUT_CONDITION_fft_28867_29531(OUT_CONDITION_fft_28867_29531), .OUT_MULTIIF_fft_28867_32498(OUT_MULTIIF_fft_28867_32498), .OUT_UNBOUNDED_fft_28867_29307(OUT_UNBOUNDED_fft_28867_29307), .OUT_UNBOUNDED_fft_28867_29309(OUT_UNBOUNDED_fft_28867_29309), .OUT_UNBOUNDED_fft_28867_29310(OUT_UNBOUNDED_fft_28867_29310), .OUT_UNBOUNDED_fft_28867_29311(OUT_UNBOUNDED_fft_28867_29311), .OUT_UNBOUNDED_fft_28867_29312(OUT_UNBOUNDED_fft_28867_29312), .OUT_UNBOUNDED_fft_28867_29313(OUT_UNBOUNDED_fft_28867_29313), .OUT_UNBOUNDED_fft_28867_29314(OUT_UNBOUNDED_fft_28867_29314), .OUT_UNBOUNDED_fft_28867_29315(OUT_UNBOUNDED_fft_28867_29315), .OUT_UNBOUNDED_fft_28867_29317(OUT_UNBOUNDED_fft_28867_29317), .OUT_UNBOUNDED_fft_28867_29318(OUT_UNBOUNDED_fft_28867_29318), .OUT_UNBOUNDED_fft_28867_29319(OUT_UNBOUNDED_fft_28867_29319), .OUT_UNBOUNDED_fft_28867_29320(OUT_UNBOUNDED_fft_28867_29320), .OUT_UNBOUNDED_fft_28867_29321(OUT_UNBOUNDED_fft_28867_29321), .OUT_UNBOUNDED_fft_28867_29323(OUT_UNBOUNDED_fft_28867_29323), .clock(clock), .reset(reset), .start_port(start_port));
  datapath_fft Datapath_i (.Mout_oe_ram(Mout_oe_ram), .Mout_we_ram(Mout_we_ram), .Mout_addr_ram(Mout_addr_ram), .Mout_Wdata_ram(Mout_Wdata_ram), .Mout_data_ram_size(Mout_data_ram_size), .OUT_CONDITION_fft_28867_29295(OUT_CONDITION_fft_28867_29295), .OUT_CONDITION_fft_28867_29527(OUT_CONDITION_fft_28867_29527), .OUT_CONDITION_fft_28867_29529(OUT_CONDITION_fft_28867_29529), .OUT_CONDITION_fft_28867_29531(OUT_CONDITION_fft_28867_29531), .OUT_MULTIIF_fft_28867_32498(OUT_MULTIIF_fft_28867_32498), .OUT_UNBOUNDED_fft_28867_29307(OUT_UNBOUNDED_fft_28867_29307), .OUT_UNBOUNDED_fft_28867_29309(OUT_UNBOUNDED_fft_28867_29309), .OUT_UNBOUNDED_fft_28867_29310(OUT_UNBOUNDED_fft_28867_29310), .OUT_UNBOUNDED_fft_28867_29311(OUT_UNBOUNDED_fft_28867_29311), .OUT_UNBOUNDED_fft_28867_29312(OUT_UNBOUNDED_fft_28867_29312), .OUT_UNBOUNDED_fft_28867_29313(OUT_UNBOUNDED_fft_28867_29313), .OUT_UNBOUNDED_fft_28867_29314(OUT_UNBOUNDED_fft_28867_29314), .OUT_UNBOUNDED_fft_28867_29315(OUT_UNBOUNDED_fft_28867_29315), .OUT_UNBOUNDED_fft_28867_29317(OUT_UNBOUNDED_fft_28867_29317), .OUT_UNBOUNDED_fft_28867_29318(OUT_UNBOUNDED_fft_28867_29318), .OUT_UNBOUNDED_fft_28867_29319(OUT_UNBOUNDED_fft_28867_29319), .OUT_UNBOUNDED_fft_28867_29320(OUT_UNBOUNDED_fft_28867_29320), .OUT_UNBOUNDED_fft_28867_29321(OUT_UNBOUNDED_fft_28867_29321), .OUT_UNBOUNDED_fft_28867_29323(OUT_UNBOUNDED_fft_28867_29323), .clock(clock), .reset(reset), .in_port_nn(nn), .in_port_size(size), .in_port_data(data), .in_port_isign(isign), .M_Rdata_ram(M_Rdata_ram), .M_DataRdy(M_DataRdy), .Min_oe_ram(Min_oe_ram), .Min_we_ram(Min_we_ram), .Min_addr_ram(Min_addr_ram), .Min_Wdata_ram(Min_Wdata_ram), .Min_data_ram_size(Min_data_ram_size), .fuselector_BMEMORY_CTRL_61_i0_LOAD(fuselector_BMEMORY_CTRL_61_i0_LOAD), .fuselector_BMEMORY_CTRL_61_i0_STORE(fuselector_BMEMORY_CTRL_61_i0_STORE), .selector_IN_UNBOUNDED_fft_28867_29307(selector_IN_UNBOUNDED_fft_28867_29307), .selector_IN_UNBOUNDED_fft_28867_29309(selector_IN_UNBOUNDED_fft_28867_29309), .selector_IN_UNBOUNDED_fft_28867_29310(selector_IN_UNBOUNDED_fft_28867_29310), .selector_IN_UNBOUNDED_fft_28867_29311(selector_IN_UNBOUNDED_fft_28867_29311), .selector_IN_UNBOUNDED_fft_28867_29312(selector_IN_UNBOUNDED_fft_28867_29312), .selector_IN_UNBOUNDED_fft_28867_29313(selector_IN_UNBOUNDED_fft_28867_29313), .selector_IN_UNBOUNDED_fft_28867_29314(selector_IN_UNBOUNDED_fft_28867_29314), .selector_IN_UNBOUNDED_fft_28867_29315(selector_IN_UNBOUNDED_fft_28867_29315), .selector_IN_UNBOUNDED_fft_28867_29317(selector_IN_UNBOUNDED_fft_28867_29317), .selector_IN_UNBOUNDED_fft_28867_29318(selector_IN_UNBOUNDED_fft_28867_29318), .selector_IN_UNBOUNDED_fft_28867_29319(selector_IN_UNBOUNDED_fft_28867_29319), .selector_IN_UNBOUNDED_fft_28867_29320(selector_IN_UNBOUNDED_fft_28867_29320), .selector_IN_UNBOUNDED_fft_28867_29321(selector_IN_UNBOUNDED_fft_28867_29321), .selector_IN_UNBOUNDED_fft_28867_29323(selector_IN_UNBOUNDED_fft_28867_29323), .selector_MUX_102_reg_29_0_0_0(selector_MUX_102_reg_29_0_0_0), .selector_MUX_104_reg_30_0_0_0(selector_MUX_104_reg_30_0_0_0), .selector_MUX_106_reg_32_0_0_0(selector_MUX_106_reg_32_0_0_0), .selector_MUX_107_reg_33_0_0_0(selector_MUX_107_reg_33_0_0_0), .selector_MUX_108_reg_34_0_0_0(selector_MUX_108_reg_34_0_0_0), .selector_MUX_109_reg_35_0_0_0(selector_MUX_109_reg_35_0_0_0), .selector_MUX_110_reg_36_0_0_0(selector_MUX_110_reg_36_0_0_0), .selector_MUX_111_reg_37_0_0_0(selector_MUX_111_reg_37_0_0_0), .selector_MUX_112_reg_38_0_0_0(selector_MUX_112_reg_38_0_0_0), .selector_MUX_113_reg_39_0_0_0(selector_MUX_113_reg_39_0_0_0), .selector_MUX_115_reg_40_0_0_0(selector_MUX_115_reg_40_0_0_0), .selector_MUX_116_reg_41_0_0_0(selector_MUX_116_reg_41_0_0_0), .selector_MUX_131_reg_55_0_0_0(selector_MUX_131_reg_55_0_0_0), .selector_MUX_143_reg_9_0_0_0(selector_MUX_143_reg_9_0_0_0), .selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0(selector_MUX_31_WRAPPED_PROXY_PREF___float64_mulif_1_i0_0_0_0), .selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_0), .selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_0_1), .selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0(selector_MUX_32_WRAPPED_PROXY_PREF___float64_mulif_1_i0_1_1_0), .selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0(selector_MUX_33_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_0_0_0), .selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_0), .selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_0_1), .selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0(selector_MUX_34_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_0_1_0), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_0), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_1), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_2), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3(selector_MUX_4_BMEMORY_CTRL_61_i0_0_0_3), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0(selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_0), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1(selector_MUX_4_BMEMORY_CTRL_61_i0_0_1_1), .selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0(selector_MUX_4_BMEMORY_CTRL_61_i0_0_2_0), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_0), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_1), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_2), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3(selector_MUX_5_BMEMORY_CTRL_61_i0_1_0_3), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0(selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_0), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1(selector_MUX_5_BMEMORY_CTRL_61_i0_1_1_1), .selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0(selector_MUX_5_BMEMORY_CTRL_61_i0_1_2_0), .selector_MUX_69_mysin_99_i0_0_0_0(selector_MUX_69_mysin_99_i0_0_0_0), .selector_MUX_82_reg_10_0_0_0(selector_MUX_82_reg_10_0_0_0), .selector_MUX_82_reg_10_0_0_1(selector_MUX_82_reg_10_0_0_1), .selector_MUX_83_reg_11_0_0_0(selector_MUX_83_reg_11_0_0_0), .selector_MUX_92_reg_2_0_0_0(selector_MUX_92_reg_2_0_0_0), .fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if(fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0___float64_divSRT4if), .fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if(fuselector_WRAPPED_PROXY_PREF___float64_divSRT4if_0_i0_WRAPPED_PROXY_PREF___float64_divSRT4if), .fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif(fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0___float64_mulif), .fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif(fuselector_WRAPPED_PROXY_PREF___float64_mulif_1_i0_WRAPPED_PROXY_PREF___float64_mulif), .fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif(fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0___float64_to_int32_round_to_zeroif), .fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif(fuselector_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif_2_i0_WRAPPED_PROXY_PREF___float64_to_int32_round_to_zeroif), .fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if(fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0___int32_to_float64if), .fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if(fuselector_WRAPPED_PROXY_PREF___int32_to_float64if_3_i0_WRAPPED_PROXY_PREF___int32_to_float64if), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .wrenable_reg_10(wrenable_reg_10), .wrenable_reg_11(wrenable_reg_11), .wrenable_reg_12(wrenable_reg_12), .wrenable_reg_13(wrenable_reg_13), .wrenable_reg_14(wrenable_reg_14), .wrenable_reg_15(wrenable_reg_15), .wrenable_reg_16(wrenable_reg_16), .wrenable_reg_17(wrenable_reg_17), .wrenable_reg_18(wrenable_reg_18), .wrenable_reg_19(wrenable_reg_19), .wrenable_reg_2(wrenable_reg_2), .wrenable_reg_20(wrenable_reg_20), .wrenable_reg_21(wrenable_reg_21), .wrenable_reg_22(wrenable_reg_22), .wrenable_reg_23(wrenable_reg_23), .wrenable_reg_24(wrenable_reg_24), .wrenable_reg_25(wrenable_reg_25), .wrenable_reg_26(wrenable_reg_26), .wrenable_reg_27(wrenable_reg_27), .wrenable_reg_28(wrenable_reg_28), .wrenable_reg_29(wrenable_reg_29), .wrenable_reg_3(wrenable_reg_3), .wrenable_reg_30(wrenable_reg_30), .wrenable_reg_31(wrenable_reg_31), .wrenable_reg_32(wrenable_reg_32), .wrenable_reg_33(wrenable_reg_33), .wrenable_reg_34(wrenable_reg_34), .wrenable_reg_35(wrenable_reg_35), .wrenable_reg_36(wrenable_reg_36), .wrenable_reg_37(wrenable_reg_37), .wrenable_reg_38(wrenable_reg_38), .wrenable_reg_39(wrenable_reg_39), .wrenable_reg_4(wrenable_reg_4), .wrenable_reg_40(wrenable_reg_40), .wrenable_reg_41(wrenable_reg_41), .wrenable_reg_42(wrenable_reg_42), .wrenable_reg_43(wrenable_reg_43), .wrenable_reg_44(wrenable_reg_44), .wrenable_reg_45(wrenable_reg_45), .wrenable_reg_46(wrenable_reg_46), .wrenable_reg_47(wrenable_reg_47), .wrenable_reg_48(wrenable_reg_48), .wrenable_reg_49(wrenable_reg_49), .wrenable_reg_5(wrenable_reg_5), .wrenable_reg_50(wrenable_reg_50), .wrenable_reg_51(wrenable_reg_51), .wrenable_reg_52(wrenable_reg_52), .wrenable_reg_53(wrenable_reg_53), .wrenable_reg_54(wrenable_reg_54), .wrenable_reg_55(wrenable_reg_55), .wrenable_reg_56(wrenable_reg_56), .wrenable_reg_57(wrenable_reg_57), .wrenable_reg_58(wrenable_reg_58), .wrenable_reg_59(wrenable_reg_59), .wrenable_reg_6(wrenable_reg_6), .wrenable_reg_60(wrenable_reg_60), .wrenable_reg_61(wrenable_reg_61), .wrenable_reg_62(wrenable_reg_62), .wrenable_reg_63(wrenable_reg_63), .wrenable_reg_7(wrenable_reg_7), .wrenable_reg_8(wrenable_reg_8), .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Datapath RTL description for main
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath_main(clock, reset, S_oe_ram, S_we_ram, S_addr_ram, S_Wdata_ram, S_data_ram_size, M_Rdata_ram, M_DataRdy, Sin_Rdata_ram, Sin_DataRdy, Sout_Rdata_ram, Sout_DataRdy, Min_oe_ram, Min_we_ram, Min_addr_ram, Min_Wdata_ram, Min_data_ram_size, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size, fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD, fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE, selector_IN_UNBOUNDED_main_28869_29540, wrenable_reg_0, wrenable_reg_1, OUT_UNBOUNDED_main_28869_29540);
  parameter MEM_var_28859_28869=32, MEM_var_28861_28869=64;
  // IN
  input clock;
  input reset;
  input S_oe_ram;
  input S_we_ram;
  input [6:0] S_addr_ram;
  input [7:0] S_Wdata_ram;
  input [3:0] S_data_ram_size;
  input [7:0] M_Rdata_ram;
  input M_DataRdy;
  input [7:0] Sin_Rdata_ram;
  input Sin_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [6:0] Min_addr_ram;
  input [7:0] Min_Wdata_ram;
  input [3:0] Min_data_ram_size;
  input fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD;
  input fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE;
  input selector_IN_UNBOUNDED_main_28869_29540;
  input wrenable_reg_0;
  input wrenable_reg_1;
  // OUT
  output [7:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [6:0] Mout_addr_ram;
  output [7:0] Mout_Wdata_ram;
  output [3:0] Mout_data_ram_size;
  output OUT_UNBOUNDED_main_28869_29540;
  // Component and signal declarations
  wire [7:0] out_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_array_28861_0;
  wire signed [8:0] out_IIdata_converter_FU_5_i0_fu_main_28869_29539;
  wire signed [7:0] out_IIdata_converter_FU_7_i0_fu_main_28869_29985;
  wire [6:0] out_UUdata_converter_FU_8_i0_fu_main_28869_29991;
  wire [31:0] out_addr_expr_FU_4_i0_fu_main_28869_29616;
  wire [6:0] out_addr_expr_FU_6_i0_fu_main_28869_29621;
  wire out_const_0;
  wire [4:0] out_const_1;
  wire out_const_2;
  wire [6:0] out_const_3;
  wire [6:0] out_const_4;
  wire [6:0] out_conv_out_addr_expr_FU_4_i0_fu_main_28869_29616_32_7;
  wire [7:0] out_conv_out_const_0_1_8;
  wire [3:0] out_conv_out_const_1_5_4;
  wire [31:0] out_conv_out_const_3_7_32;
  wire [31:0] out_conv_out_const_4_7_32;
  wire [31:0] out_conv_out_reg_0_reg_0_7_32;
  wire [6:0] out_reg_0_reg_0;
  wire [7:0] out_reg_1_reg_1;
  wire s_done_fu_main_28869_29540;
  wire [7:0] sig_in_bus_mergerMout_Wdata_ram0_0;
  wire [6:0] sig_in_bus_mergerMout_addr_ram1_0;
  wire [3:0] sig_in_bus_mergerMout_data_ram_size2_0;
  wire sig_in_bus_mergerMout_oe_ram3_0;
  wire sig_in_bus_mergerMout_we_ram4_0;
  wire sig_in_bus_mergerSout_DataRdy5_0;
  wire sig_in_bus_mergerSout_DataRdy5_1;
  wire [7:0] sig_in_bus_mergerSout_Rdata_ram6_0;
  wire [7:0] sig_in_bus_mergerSout_Rdata_ram6_1;
  wire [7:0] sig_out_bus_mergerMout_Wdata_ram0_;
  wire [6:0] sig_out_bus_mergerMout_addr_ram1_;
  wire [3:0] sig_out_bus_mergerMout_data_ram_size2_;
  wire sig_out_bus_mergerMout_oe_ram3_;
  wire sig_out_bus_mergerMout_we_ram4_;
  wire sig_out_bus_mergerSout_DataRdy5_;
  wire [7:0] sig_out_bus_mergerSout_Rdata_ram6_;
  
  ARRAY_1D_STD_BRAM_SDS_BUS #(.BITSIZE_in1(8), .BITSIZE_in2(7), .BITSIZE_in3(4), .BITSIZE_out1(8), .BITSIZE_S_addr_ram(7), .BITSIZE_S_Wdata_ram(8), .BITSIZE_Sin_Rdata_ram(8), .BITSIZE_Sout_Rdata_ram(8), .BITSIZE_S_data_ram_size(4), .MEMORY_INIT_file("array_ref_28859.mem"), .n_elements(5), .data_size(8), .address_space_begin(MEM_var_28859_28869), .address_space_rangesize(32), .BUS_PIPELINED(1), .BRAM_BITSIZE(8), .PRIVATE_MEMORY(0), .USE_SPARSE_MEMORY(1), .BITSIZE_proxy_in1(8), .BITSIZE_proxy_in2(7), .BITSIZE_proxy_in3(4), .BITSIZE_proxy_out1(8)) array_28859_0 (.Sout_Rdata_ram(sig_in_bus_mergerSout_Rdata_ram6_0), .Sout_DataRdy(sig_in_bus_mergerSout_DataRdy5_0), .clock(clock), .reset(reset), .in1(8'b00000000), .in2(7'b0000000), .in3(4'b0000), .in4(1'b0), .sel_LOAD(1'b0), .sel_STORE(1'b0), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(8'b00000000), .proxy_in2(7'b0000000), .proxy_in3(4'b0000), .proxy_sel_LOAD(1'b0), .proxy_sel_STORE(1'b0));
  ARRAY_1D_STD_BRAM_SDS_BUS #(.BITSIZE_in1(8), .BITSIZE_in2(7), .BITSIZE_in3(4), .BITSIZE_out1(8), .BITSIZE_S_addr_ram(7), .BITSIZE_S_Wdata_ram(8), .BITSIZE_Sin_Rdata_ram(8), .BITSIZE_Sout_Rdata_ram(8), .BITSIZE_S_data_ram_size(4), .MEMORY_INIT_file("array_ref_28861.mem"), .n_elements(1), .data_size(8), .address_space_begin(MEM_var_28861_28869), .address_space_rangesize(32), .BUS_PIPELINED(1), .BRAM_BITSIZE(8), .PRIVATE_MEMORY(0), .USE_SPARSE_MEMORY(1), .BITSIZE_proxy_in1(8), .BITSIZE_proxy_in2(7), .BITSIZE_proxy_in3(4), .BITSIZE_proxy_out1(8)) array_28861_0 (.out1(out_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_array_28861_0), .Sout_Rdata_ram(sig_in_bus_mergerSout_Rdata_ram6_1), .Sout_DataRdy(sig_in_bus_mergerSout_DataRdy5_1), .clock(clock), .reset(reset), .in1(8'b00000000), .in2(out_conv_out_addr_expr_FU_4_i0_fu_main_28869_29616_32_7), .in3(out_conv_out_const_1_5_4), .in4(out_const_2), .sel_LOAD(fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD), .sel_STORE(fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(8'b00000000), .proxy_in2(7'b0000000), .proxy_in3(4'b0000), .proxy_sel_LOAD(1'b0), .proxy_sel_STORE(1'b0));
  bus_merger #(.BITSIZE_in1(8), .PORTSIZE_in1(1), .BITSIZE_out1(8)) bus_mergerMout_Wdata_ram0_ (.out1(sig_out_bus_mergerMout_Wdata_ram0_), .in1({sig_in_bus_mergerMout_Wdata_ram0_0}));
  bus_merger #(.BITSIZE_in1(7), .PORTSIZE_in1(1), .BITSIZE_out1(7)) bus_mergerMout_addr_ram1_ (.out1(sig_out_bus_mergerMout_addr_ram1_), .in1({sig_in_bus_mergerMout_addr_ram1_0}));
  bus_merger #(.BITSIZE_in1(4), .PORTSIZE_in1(1), .BITSIZE_out1(4)) bus_mergerMout_data_ram_size2_ (.out1(sig_out_bus_mergerMout_data_ram_size2_), .in1({sig_in_bus_mergerMout_data_ram_size2_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerMout_oe_ram3_ (.out1(sig_out_bus_mergerMout_oe_ram3_), .in1({sig_in_bus_mergerMout_oe_ram3_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(1), .BITSIZE_out1(1)) bus_mergerMout_we_ram4_ (.out1(sig_out_bus_mergerMout_we_ram4_), .in1({sig_in_bus_mergerMout_we_ram4_0}));
  bus_merger #(.BITSIZE_in1(1), .PORTSIZE_in1(2), .BITSIZE_out1(1)) bus_mergerSout_DataRdy5_ (.out1(sig_out_bus_mergerSout_DataRdy5_), .in1({sig_in_bus_mergerSout_DataRdy5_1, sig_in_bus_mergerSout_DataRdy5_0}));
  bus_merger #(.BITSIZE_in1(8), .PORTSIZE_in1(2), .BITSIZE_out1(8)) bus_mergerSout_Rdata_ram6_ (.out1(sig_out_bus_mergerSout_Rdata_ram6_), .in1({sig_in_bus_mergerSout_Rdata_ram6_1, sig_in_bus_mergerSout_Rdata_ram6_0}));
  constant_value #(.BITSIZE_out1(1), .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(5), .value(5'b01000)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(1), .value(1'b1)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(7), .value(MEM_var_28859_28869)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(7), .value(MEM_var_28861_28869)) const_4 (.out1(out_const_4));
  UUdata_converter_FU #(.BITSIZE_in1(32), .BITSIZE_out1(7)) conv_out_addr_expr_FU_4_i0_fu_main_28869_29616_32_7 (.out1(out_conv_out_addr_expr_FU_4_i0_fu_main_28869_29616_32_7), .in1(out_addr_expr_FU_4_i0_fu_main_28869_29616));
  UUdata_converter_FU #(.BITSIZE_in1(1), .BITSIZE_out1(8)) conv_out_const_0_1_8 (.out1(out_conv_out_const_0_1_8), .in1(out_const_0));
  UUdata_converter_FU #(.BITSIZE_in1(5), .BITSIZE_out1(4)) conv_out_const_1_5_4 (.out1(out_conv_out_const_1_5_4), .in1(out_const_1));
  UUdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(32)) conv_out_const_3_7_32 (.out1(out_conv_out_const_3_7_32), .in1(out_const_3));
  UUdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(32)) conv_out_const_4_7_32 (.out1(out_conv_out_const_4_7_32), .in1(out_const_4));
  UUdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(32)) conv_out_reg_0_reg_0_7_32 (.out1(out_conv_out_reg_0_reg_0_7_32), .in1(out_reg_0_reg_0));
  IIdata_converter_FU #(.BITSIZE_in1(8), .BITSIZE_out1(9)) fu_main_28869_29539 (.out1(out_IIdata_converter_FU_5_i0_fu_main_28869_29539), .in1(out_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_array_28861_0));
  fft fu_main_28869_29540 (.done_port(s_done_fu_main_28869_29540), .Mout_oe_ram(sig_in_bus_mergerMout_oe_ram3_0), .Mout_we_ram(sig_in_bus_mergerMout_we_ram4_0), .Mout_addr_ram(sig_in_bus_mergerMout_addr_ram1_0), .Mout_Wdata_ram(sig_in_bus_mergerMout_Wdata_ram0_0), .Mout_data_ram_size(sig_in_bus_mergerMout_data_ram_size2_0), .clock(clock), .reset(reset), .start_port(selector_IN_UNBOUNDED_main_28869_29540), .nn(out_reg_1_reg_1), .size(out_conv_out_const_0_1_8), .data(out_conv_out_reg_0_reg_0_7_32), .isign(out_conv_out_const_0_1_8), .M_Rdata_ram(M_Rdata_ram), .M_DataRdy(M_DataRdy), .Min_oe_ram(Min_oe_ram), .Min_we_ram(Min_we_ram), .Min_addr_ram(Min_addr_ram), .Min_Wdata_ram(Min_Wdata_ram), .Min_data_ram_size(Min_data_ram_size));
  addr_expr_FU #(.BITSIZE_in1(32), .BITSIZE_out1(32)) fu_main_28869_29616 (.out1(out_addr_expr_FU_4_i0_fu_main_28869_29616), .in1(out_conv_out_const_4_7_32));
  addr_expr_FU #(.BITSIZE_in1(32), .BITSIZE_out1(7)) fu_main_28869_29621 (.out1(out_addr_expr_FU_6_i0_fu_main_28869_29621), .in1(out_conv_out_const_3_7_32));
  IIdata_converter_FU #(.BITSIZE_in1(9), .BITSIZE_out1(8)) fu_main_28869_29985 (.out1(out_IIdata_converter_FU_7_i0_fu_main_28869_29985), .in1(out_IIdata_converter_FU_5_i0_fu_main_28869_29539));
  UUdata_converter_FU #(.BITSIZE_in1(7), .BITSIZE_out1(7)) fu_main_28869_29991 (.out1(out_UUdata_converter_FU_8_i0_fu_main_28869_29991), .in1(out_addr_expr_FU_6_i0_fu_main_28869_29621));
  register_SE #(.BITSIZE_in1(7), .BITSIZE_out1(7)) reg_0 (.out1(out_reg_0_reg_0), .clock(clock), .reset(reset), .in1(out_UUdata_converter_FU_8_i0_fu_main_28869_29991), .wenable(wrenable_reg_0));
  register_SE #(.BITSIZE_in1(8), .BITSIZE_out1(8)) reg_1 (.out1(out_reg_1_reg_1), .clock(clock), .reset(reset), .in1(out_IIdata_converter_FU_7_i0_fu_main_28869_29985), .wenable(wrenable_reg_1));
  // io-signal post fix
  assign Sout_Rdata_ram = sig_out_bus_mergerSout_Rdata_ram6_;
  assign Sout_DataRdy = sig_out_bus_mergerSout_DataRdy5_;
  assign Mout_oe_ram = sig_out_bus_mergerMout_oe_ram3_;
  assign Mout_we_ram = sig_out_bus_mergerMout_we_ram4_;
  assign Mout_addr_ram = sig_out_bus_mergerMout_addr_ram1_;
  assign Mout_Wdata_ram = sig_out_bus_mergerMout_Wdata_ram0_;
  assign Mout_data_ram_size = sig_out_bus_mergerMout_data_ram_size2_;
  assign OUT_UNBOUNDED_main_28869_29540 = s_done_fu_main_28869_29540;

endmodule

// FSM based controller description for main
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller_main(done_port, fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD, fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE, selector_IN_UNBOUNDED_main_28869_29540, wrenable_reg_0, wrenable_reg_1, OUT_UNBOUNDED_main_28869_29540, clock, reset, start_port);
  // IN
  input OUT_UNBOUNDED_main_28869_29540;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD;
  output fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE;
  output selector_IN_UNBOUNDED_main_28869_29540;
  output wrenable_reg_0;
  output wrenable_reg_1;
  parameter [4:0] S_0 = 5'b00001,
    S_1 = 5'b00010,
    S_2 = 5'b00100,
    S_3 = 5'b01000,
    S_4 = 5'b10000;
  reg [4:0] _present_state, _next_state;
  reg done_port;
  reg fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD;
  reg fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE;
  reg selector_IN_UNBOUNDED_main_28869_29540;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD = 1'b0;
    fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE = 1'b0;
    selector_IN_UNBOUNDED_main_28869_29540 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD = 1'b1;
          wrenable_reg_0 = 1'b1;
          _next_state = S_1;
        end
        else
        begin
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
          _next_state = S_0;
        end
      S_1 :
        begin
          wrenable_reg_1 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          selector_IN_UNBOUNDED_main_28869_29540 = 1'b1;
          if (OUT_UNBOUNDED_main_28869_29540 == 1'b0)
            begin
              _next_state = S_3;
            end
          else
            begin
              _next_state = S_4;
              done_port = 1'b1;
            end
        end
      S_3 :
        begin
          if (OUT_UNBOUNDED_main_28869_29540 == 1'b0)
            begin
              _next_state = S_3;
            end
          else
            begin
              _next_state = S_4;
              done_port = 1'b1;
            end
        end
      S_4 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
          wrenable_reg_0 = 1'bX;
          wrenable_reg_1 = 1'bX;
        end
    endcase
  end
endmodule

// Top component for main
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module _main(clock, reset, start_port, done_port, S_oe_ram, S_we_ram, S_addr_ram, S_Wdata_ram, S_data_ram_size, M_Rdata_ram, M_DataRdy, Sin_Rdata_ram, Sin_DataRdy, Min_oe_ram, Min_we_ram, Min_addr_ram, Min_Wdata_ram, Min_data_ram_size, Sout_Rdata_ram, Sout_DataRdy, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size);
  parameter MEM_var_28859_28869=32, MEM_var_28861_28869=64;
  // IN
  input clock;
  input reset;
  input start_port;
  input S_oe_ram;
  input S_we_ram;
  input [6:0] S_addr_ram;
  input [7:0] S_Wdata_ram;
  input [3:0] S_data_ram_size;
  input [7:0] M_Rdata_ram;
  input M_DataRdy;
  input [7:0] Sin_Rdata_ram;
  input Sin_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [6:0] Min_addr_ram;
  input [7:0] Min_Wdata_ram;
  input [3:0] Min_data_ram_size;
  // OUT
  output done_port;
  output [7:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [6:0] Mout_addr_ram;
  output [7:0] Mout_Wdata_ram;
  output [3:0] Mout_data_ram_size;
  // Component and signal declarations
  wire OUT_UNBOUNDED_main_28869_29540;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD;
  wire fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE;
  wire selector_IN_UNBOUNDED_main_28869_29540;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  
  controller_main Controller_i (.done_port(done_delayed_REG_signal_in), .fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD(fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD), .fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE(fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE), .selector_IN_UNBOUNDED_main_28869_29540(selector_IN_UNBOUNDED_main_28869_29540), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1), .OUT_UNBOUNDED_main_28869_29540(OUT_UNBOUNDED_main_28869_29540), .clock(clock), .reset(reset), .start_port(start_port));
  datapath_main #(.MEM_var_28859_28869(MEM_var_28859_28869), .MEM_var_28861_28869(MEM_var_28861_28869)) Datapath_i (.Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .Mout_oe_ram(Mout_oe_ram), .Mout_we_ram(Mout_we_ram), .Mout_addr_ram(Mout_addr_ram), .Mout_Wdata_ram(Mout_Wdata_ram), .Mout_data_ram_size(Mout_data_ram_size), .OUT_UNBOUNDED_main_28869_29540(OUT_UNBOUNDED_main_28869_29540), .clock(clock), .reset(reset), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .S_data_ram_size(S_data_ram_size), .M_Rdata_ram(M_Rdata_ram), .M_DataRdy(M_DataRdy), .Sin_Rdata_ram(Sin_Rdata_ram), .Sin_DataRdy(Sin_DataRdy), .Min_oe_ram(Min_oe_ram), .Min_we_ram(Min_we_ram), .Min_addr_ram(Min_addr_ram), .Min_Wdata_ram(Min_Wdata_ram), .Min_data_ram_size(Min_data_ram_size), .fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD(fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_LOAD), .fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE(fuselector_ARRAY_1D_STD_BRAM_SDS_BUS_1_i0_STORE), .selector_IN_UNBOUNDED_main_28869_29540(selector_IN_UNBOUNDED_main_28869_29540), .wrenable_reg_0(wrenable_reg_0), .wrenable_reg_1(wrenable_reg_1));
  flipflop_AR #(.BITSIZE_in1(1), .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out), .clock(clock), .reset(reset), .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Minimal interface for function: main
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module main(clock, reset, start_port, S_oe_ram, S_we_ram, S_addr_ram, S_Wdata_ram, S_data_ram_size, M_Rdata_ram, M_DataRdy, done_port, Sout_Rdata_ram, Sout_DataRdy, Mout_oe_ram, Mout_we_ram, Mout_addr_ram, Mout_Wdata_ram, Mout_data_ram_size);
  parameter MEM_var_28859_28869=32, MEM_var_28861_28869=64;
  // IN
  input clock;
  input reset;
  input start_port;
  input S_oe_ram;
  input S_we_ram;
  input [6:0] S_addr_ram;
  input [7:0] S_Wdata_ram;
  input [3:0] S_data_ram_size;
  input [7:0] M_Rdata_ram;
  input M_DataRdy;
  // OUT
  output done_port;
  output [7:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [6:0] Mout_addr_ram;
  output [7:0] Mout_Wdata_ram;
  output [3:0] Mout_data_ram_size;
  // Component and signal declarations
  
  _main #(.MEM_var_28859_28869(MEM_var_28859_28869), .MEM_var_28861_28869(MEM_var_28861_28869)) _main_i0 (.done_port(done_port), .Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .Mout_oe_ram(Mout_oe_ram), .Mout_we_ram(Mout_we_ram), .Mout_addr_ram(Mout_addr_ram), .Mout_Wdata_ram(Mout_Wdata_ram), .Mout_data_ram_size(Mout_data_ram_size), .clock(clock), .reset(reset), .start_port(start_port), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .S_data_ram_size(S_data_ram_size), .M_Rdata_ram(M_Rdata_ram), .M_DataRdy(M_DataRdy), .Sin_Rdata_ram(8'b00000000), .Sin_DataRdy(1'b0), .Min_oe_ram(1'b0), .Min_we_ram(1'b0), .Min_addr_ram(7'b0000000), .Min_Wdata_ram(8'b00000000), .Min_data_ram_size(4'b0000));

endmodule


